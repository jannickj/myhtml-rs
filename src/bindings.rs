
#![allow(non_upper_case_globals)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(improper_ctypes)]
#![allow(dead_code)]
/* automatically generated by rust-bindgen */

pub const MyHTML_VERSION_MAJOR: u32 = 4;
pub const MyHTML_VERSION_MINOR: u32 = 0;
pub const MyHTML_VERSION_PATCH: u32 = 5;
pub const true_: u32 = 1;
pub const false_: u32 = 0;
pub const __bool_true_false_are_defined: u32 = 1;
pub const _STDIO_H: u32 = 1;
pub const _FEATURES_H: u32 = 1;
pub const _DEFAULT_SOURCE: u32 = 1;
pub const __USE_ISOC11: u32 = 1;
pub const __USE_ISOC99: u32 = 1;
pub const __USE_ISOC95: u32 = 1;
pub const __USE_POSIX_IMPLICITLY: u32 = 1;
pub const _POSIX_SOURCE: u32 = 1;
pub const _POSIX_C_SOURCE: u32 = 200809;
pub const __USE_POSIX: u32 = 1;
pub const __USE_POSIX2: u32 = 1;
pub const __USE_POSIX199309: u32 = 1;
pub const __USE_POSIX199506: u32 = 1;
pub const __USE_XOPEN2K: u32 = 1;
pub const __USE_XOPEN2K8: u32 = 1;
pub const _ATFILE_SOURCE: u32 = 1;
pub const __USE_MISC: u32 = 1;
pub const __USE_ATFILE: u32 = 1;
pub const __USE_FORTIFY_LEVEL: u32 = 0;
pub const __GLIBC_USE_DEPRECATED_GETS: u32 = 0;
pub const _STDC_PREDEF_H: u32 = 1;
pub const __STDC_IEC_559__: u32 = 1;
pub const __STDC_IEC_559_COMPLEX__: u32 = 1;
pub const __STDC_ISO_10646__: u32 = 201706;
pub const __STDC_NO_THREADS__: u32 = 1;
pub const __GNU_LIBRARY__: u32 = 6;
pub const __GLIBC__: u32 = 2;
pub const __GLIBC_MINOR__: u32 = 27;
pub const _SYS_CDEFS_H: u32 = 1;
pub const __glibc_c99_flexarr_available: u32 = 1;
pub const __WORDSIZE: u32 = 64;
pub const __WORDSIZE_TIME64_COMPAT32: u32 = 1;
pub const __SYSCALL_WORDSIZE: u32 = 64;
pub const __HAVE_GENERIC_SELECTION: u32 = 1;
pub const __GLIBC_USE_LIB_EXT2: u32 = 0;
pub const __GLIBC_USE_IEC_60559_BFP_EXT: u32 = 0;
pub const __GLIBC_USE_IEC_60559_FUNCS_EXT: u32 = 0;
pub const __GLIBC_USE_IEC_60559_TYPES_EXT: u32 = 0;
pub const _BITS_TYPES_H: u32 = 1;
pub const _BITS_TYPESIZES_H: u32 = 1;
pub const __OFF_T_MATCHES_OFF64_T: u32 = 1;
pub const __INO_T_MATCHES_INO64_T: u32 = 1;
pub const __RLIM_T_MATCHES_RLIM64_T: u32 = 1;
pub const __FD_SETSIZE: u32 = 1024;
pub const ____FILE_defined: u32 = 1;
pub const __FILE_defined: u32 = 1;
pub const _BITS_LIBIO_H: u32 = 1;
pub const _BITS_G_CONFIG_H: u32 = 1;
pub const ____mbstate_t_defined: u32 = 1;
pub const _G_HAVE_MMAP: u32 = 1;
pub const _G_HAVE_MREMAP: u32 = 1;
pub const _G_IO_IO_FILE_VERSION: u32 = 131073;
pub const _G_BUFSIZ: u32 = 8192;
pub const _IO_BUFSIZ: u32 = 8192;
pub const __GNUC_VA_LIST: u32 = 1;
pub const _IO_UNIFIED_JUMPTABLES: u32 = 1;
pub const EOF: i32 = -1;
pub const _IOS_INPUT: u32 = 1;
pub const _IOS_OUTPUT: u32 = 2;
pub const _IOS_ATEND: u32 = 4;
pub const _IOS_APPEND: u32 = 8;
pub const _IOS_TRUNC: u32 = 16;
pub const _IOS_NOCREATE: u32 = 32;
pub const _IOS_NOREPLACE: u32 = 64;
pub const _IOS_BIN: u32 = 128;
pub const _IO_MAGIC: u32 = 4222418944;
pub const _OLD_STDIO_MAGIC: u32 = 4206624768;
pub const _IO_MAGIC_MASK: u32 = 4294901760;
pub const _IO_USER_BUF: u32 = 1;
pub const _IO_UNBUFFERED: u32 = 2;
pub const _IO_NO_READS: u32 = 4;
pub const _IO_NO_WRITES: u32 = 8;
pub const _IO_EOF_SEEN: u32 = 16;
pub const _IO_ERR_SEEN: u32 = 32;
pub const _IO_DELETE_DONT_CLOSE: u32 = 64;
pub const _IO_LINKED: u32 = 128;
pub const _IO_IN_BACKUP: u32 = 256;
pub const _IO_LINE_BUF: u32 = 512;
pub const _IO_TIED_PUT_GET: u32 = 1024;
pub const _IO_CURRENTLY_PUTTING: u32 = 2048;
pub const _IO_IS_APPENDING: u32 = 4096;
pub const _IO_IS_FILEBUF: u32 = 8192;
pub const _IO_BAD_SEEN: u32 = 16384;
pub const _IO_USER_LOCK: u32 = 32768;
pub const _IO_FLAGS2_MMAP: u32 = 1;
pub const _IO_FLAGS2_NOTCANCEL: u32 = 2;
pub const _IO_FLAGS2_USER_WBUF: u32 = 8;
pub const _IO_SKIPWS: u32 = 1;
pub const _IO_LEFT: u32 = 2;
pub const _IO_RIGHT: u32 = 4;
pub const _IO_INTERNAL: u32 = 8;
pub const _IO_DEC: u32 = 16;
pub const _IO_OCT: u32 = 32;
pub const _IO_HEX: u32 = 64;
pub const _IO_SHOWBASE: u32 = 128;
pub const _IO_SHOWPOINT: u32 = 256;
pub const _IO_UPPERCASE: u32 = 512;
pub const _IO_SHOWPOS: u32 = 1024;
pub const _IO_SCIENTIFIC: u32 = 2048;
pub const _IO_FIXED: u32 = 4096;
pub const _IO_UNITBUF: u32 = 8192;
pub const _IO_STDIO: u32 = 16384;
pub const _IO_DONT_CLOSE: u32 = 32768;
pub const _IO_BOOLALPHA: u32 = 65536;
pub const _IOFBF: u32 = 0;
pub const _IOLBF: u32 = 1;
pub const _IONBF: u32 = 2;
pub const BUFSIZ: u32 = 8192;
pub const SEEK_SET: u32 = 0;
pub const SEEK_CUR: u32 = 1;
pub const SEEK_END: u32 = 2;
pub const P_tmpdir: &'static [u8; 5usize] = b"/tmp\0";
pub const _BITS_STDIO_LIM_H: u32 = 1;
pub const L_tmpnam: u32 = 20;
pub const TMP_MAX: u32 = 238328;
pub const FILENAME_MAX: u32 = 4096;
pub const L_ctermid: u32 = 9;
pub const FOPEN_MAX: u32 = 16;
pub const _STDLIB_H: u32 = 1;
pub const WNOHANG: u32 = 1;
pub const WUNTRACED: u32 = 2;
pub const WSTOPPED: u32 = 2;
pub const WEXITED: u32 = 4;
pub const WCONTINUED: u32 = 8;
pub const WNOWAIT: u32 = 16777216;
pub const __WNOTHREAD: u32 = 536870912;
pub const __WALL: u32 = 1073741824;
pub const __WCLONE: u32 = 2147483648;
pub const __ENUM_IDTYPE_T: u32 = 1;
pub const __W_CONTINUED: u32 = 65535;
pub const __WCOREFLAG: u32 = 128;
pub const __HAVE_FLOAT128: u32 = 0;
pub const __HAVE_DISTINCT_FLOAT128: u32 = 0;
pub const __HAVE_FLOAT64X: u32 = 1;
pub const __HAVE_FLOAT64X_LONG_DOUBLE: u32 = 1;
pub const __HAVE_FLOAT16: u32 = 0;
pub const __HAVE_FLOAT32: u32 = 1;
pub const __HAVE_FLOAT64: u32 = 1;
pub const __HAVE_FLOAT32X: u32 = 1;
pub const __HAVE_FLOAT128X: u32 = 0;
pub const __HAVE_DISTINCT_FLOAT16: u32 = 0;
pub const __HAVE_DISTINCT_FLOAT32: u32 = 0;
pub const __HAVE_DISTINCT_FLOAT64: u32 = 0;
pub const __HAVE_DISTINCT_FLOAT32X: u32 = 0;
pub const __HAVE_DISTINCT_FLOAT64X: u32 = 0;
pub const __HAVE_DISTINCT_FLOAT128X: u32 = 0;
pub const __HAVE_FLOATN_NOT_TYPEDEF: u32 = 0;
pub const __ldiv_t_defined: u32 = 1;
pub const __lldiv_t_defined: u32 = 1;
pub const RAND_MAX: u32 = 2147483647;
pub const EXIT_FAILURE: u32 = 1;
pub const EXIT_SUCCESS: u32 = 0;
pub const _SYS_TYPES_H: u32 = 1;
pub const __clock_t_defined: u32 = 1;
pub const __clockid_t_defined: u32 = 1;
pub const __time_t_defined: u32 = 1;
pub const __timer_t_defined: u32 = 1;
pub const _BITS_STDINT_INTN_H: u32 = 1;
pub const __BIT_TYPES_DEFINED__: u32 = 1;
pub const _ENDIAN_H: u32 = 1;
pub const __LITTLE_ENDIAN: u32 = 1234;
pub const __BIG_ENDIAN: u32 = 4321;
pub const __PDP_ENDIAN: u32 = 3412;
pub const __BYTE_ORDER: u32 = 1234;
pub const __FLOAT_WORD_ORDER: u32 = 1234;
pub const LITTLE_ENDIAN: u32 = 1234;
pub const BIG_ENDIAN: u32 = 4321;
pub const PDP_ENDIAN: u32 = 3412;
pub const BYTE_ORDER: u32 = 1234;
pub const _BITS_BYTESWAP_H: u32 = 1;
pub const _BITS_UINTN_IDENTITY_H: u32 = 1;
pub const _SYS_SELECT_H: u32 = 1;
pub const __FD_ZERO_STOS: &'static [u8; 6usize] = b"stosq\0";
pub const __sigset_t_defined: u32 = 1;
pub const __timeval_defined: u32 = 1;
pub const __timespec_defined: u32 = 1;
pub const FD_SETSIZE: u32 = 1024;
pub const _SYS_SYSMACROS_H: u32 = 1;
pub const _BITS_SYSMACROS_H: u32 = 1;
pub const _BITS_PTHREADTYPES_COMMON_H: u32 = 1;
pub const _THREAD_SHARED_TYPES_H: u32 = 1;
pub const _BITS_PTHREADTYPES_ARCH_H: u32 = 1;
pub const __SIZEOF_PTHREAD_MUTEX_T: u32 = 40;
pub const __SIZEOF_PTHREAD_ATTR_T: u32 = 56;
pub const __SIZEOF_PTHREAD_RWLOCK_T: u32 = 56;
pub const __SIZEOF_PTHREAD_BARRIER_T: u32 = 32;
pub const __SIZEOF_PTHREAD_MUTEXATTR_T: u32 = 4;
pub const __SIZEOF_PTHREAD_COND_T: u32 = 48;
pub const __SIZEOF_PTHREAD_CONDATTR_T: u32 = 4;
pub const __SIZEOF_PTHREAD_RWLOCKATTR_T: u32 = 8;
pub const __SIZEOF_PTHREAD_BARRIERATTR_T: u32 = 4;
pub const __PTHREAD_MUTEX_LOCK_ELISION: u32 = 1;
pub const __PTHREAD_MUTEX_NUSERS_AFTER_KIND: u32 = 0;
pub const __PTHREAD_MUTEX_USE_UNION: u32 = 0;
pub const __PTHREAD_RWLOCK_INT_FLAGS_SHARED: u32 = 1;
pub const __PTHREAD_MUTEX_HAVE_PREV: u32 = 1;
pub const __have_pthread_attr_t: u32 = 1;
pub const _ALLOCA_H: u32 = 1;
pub const _MEMORY_H: u32 = 1;
pub const _STRING_H: u32 = 1;
pub const _BITS_TYPES_LOCALE_T_H: u32 = 1;
pub const _BITS_TYPES___LOCALE_T_H: u32 = 1;
pub const _STRINGS_H: u32 = 1;
pub const _STDINT_H: u32 = 1;
pub const _BITS_WCHAR_H: u32 = 1;
pub const _BITS_STDINT_UINTN_H: u32 = 1;
pub const INT8_MIN: i32 = -128;
pub const INT16_MIN: i32 = -32768;
pub const INT32_MIN: i32 = -2147483648;
pub const INT8_MAX: u32 = 127;
pub const INT16_MAX: u32 = 32767;
pub const INT32_MAX: u32 = 2147483647;
pub const UINT8_MAX: u32 = 255;
pub const UINT16_MAX: u32 = 65535;
pub const UINT32_MAX: u32 = 4294967295;
pub const INT_LEAST8_MIN: i32 = -128;
pub const INT_LEAST16_MIN: i32 = -32768;
pub const INT_LEAST32_MIN: i32 = -2147483648;
pub const INT_LEAST8_MAX: u32 = 127;
pub const INT_LEAST16_MAX: u32 = 32767;
pub const INT_LEAST32_MAX: u32 = 2147483647;
pub const UINT_LEAST8_MAX: u32 = 255;
pub const UINT_LEAST16_MAX: u32 = 65535;
pub const UINT_LEAST32_MAX: u32 = 4294967295;
pub const INT_FAST8_MIN: i32 = -128;
pub const INT_FAST16_MIN: i64 = -9223372036854775808;
pub const INT_FAST32_MIN: i64 = -9223372036854775808;
pub const INT_FAST8_MAX: u32 = 127;
pub const INT_FAST16_MAX: u64 = 9223372036854775807;
pub const INT_FAST32_MAX: u64 = 9223372036854775807;
pub const UINT_FAST8_MAX: u32 = 255;
pub const UINT_FAST16_MAX: i32 = -1;
pub const UINT_FAST32_MAX: i32 = -1;
pub const INTPTR_MIN: i64 = -9223372036854775808;
pub const INTPTR_MAX: u64 = 9223372036854775807;
pub const UINTPTR_MAX: i32 = -1;
pub const PTRDIFF_MIN: i64 = -9223372036854775808;
pub const PTRDIFF_MAX: u64 = 9223372036854775807;
pub const SIG_ATOMIC_MIN: i32 = -2147483648;
pub const SIG_ATOMIC_MAX: u32 = 2147483647;
pub const SIZE_MAX: i32 = -1;
pub const WINT_MIN: u32 = 0;
pub const WINT_MAX: u32 = 4294967295;
pub const _INTTYPES_H: u32 = 1;
pub const ____gwchar_t_defined: u32 = 1;
pub const __PRI64_PREFIX: &'static [u8; 2usize] = b"l\0";
pub const __PRIPTR_PREFIX: &'static [u8; 2usize] = b"l\0";
pub const PRId8: &'static [u8; 2usize] = b"d\0";
pub const PRId16: &'static [u8; 2usize] = b"d\0";
pub const PRId32: &'static [u8; 2usize] = b"d\0";
pub const PRId64: &'static [u8; 3usize] = b"ld\0";
pub const PRIdLEAST8: &'static [u8; 2usize] = b"d\0";
pub const PRIdLEAST16: &'static [u8; 2usize] = b"d\0";
pub const PRIdLEAST32: &'static [u8; 2usize] = b"d\0";
pub const PRIdLEAST64: &'static [u8; 3usize] = b"ld\0";
pub const PRIdFAST8: &'static [u8; 2usize] = b"d\0";
pub const PRIdFAST16: &'static [u8; 3usize] = b"ld\0";
pub const PRIdFAST32: &'static [u8; 3usize] = b"ld\0";
pub const PRIdFAST64: &'static [u8; 3usize] = b"ld\0";
pub const PRIi8: &'static [u8; 2usize] = b"i\0";
pub const PRIi16: &'static [u8; 2usize] = b"i\0";
pub const PRIi32: &'static [u8; 2usize] = b"i\0";
pub const PRIi64: &'static [u8; 3usize] = b"li\0";
pub const PRIiLEAST8: &'static [u8; 2usize] = b"i\0";
pub const PRIiLEAST16: &'static [u8; 2usize] = b"i\0";
pub const PRIiLEAST32: &'static [u8; 2usize] = b"i\0";
pub const PRIiLEAST64: &'static [u8; 3usize] = b"li\0";
pub const PRIiFAST8: &'static [u8; 2usize] = b"i\0";
pub const PRIiFAST16: &'static [u8; 3usize] = b"li\0";
pub const PRIiFAST32: &'static [u8; 3usize] = b"li\0";
pub const PRIiFAST64: &'static [u8; 3usize] = b"li\0";
pub const PRIo8: &'static [u8; 2usize] = b"o\0";
pub const PRIo16: &'static [u8; 2usize] = b"o\0";
pub const PRIo32: &'static [u8; 2usize] = b"o\0";
pub const PRIo64: &'static [u8; 3usize] = b"lo\0";
pub const PRIoLEAST8: &'static [u8; 2usize] = b"o\0";
pub const PRIoLEAST16: &'static [u8; 2usize] = b"o\0";
pub const PRIoLEAST32: &'static [u8; 2usize] = b"o\0";
pub const PRIoLEAST64: &'static [u8; 3usize] = b"lo\0";
pub const PRIoFAST8: &'static [u8; 2usize] = b"o\0";
pub const PRIoFAST16: &'static [u8; 3usize] = b"lo\0";
pub const PRIoFAST32: &'static [u8; 3usize] = b"lo\0";
pub const PRIoFAST64: &'static [u8; 3usize] = b"lo\0";
pub const PRIu8: &'static [u8; 2usize] = b"u\0";
pub const PRIu16: &'static [u8; 2usize] = b"u\0";
pub const PRIu32: &'static [u8; 2usize] = b"u\0";
pub const PRIu64: &'static [u8; 3usize] = b"lu\0";
pub const PRIuLEAST8: &'static [u8; 2usize] = b"u\0";
pub const PRIuLEAST16: &'static [u8; 2usize] = b"u\0";
pub const PRIuLEAST32: &'static [u8; 2usize] = b"u\0";
pub const PRIuLEAST64: &'static [u8; 3usize] = b"lu\0";
pub const PRIuFAST8: &'static [u8; 2usize] = b"u\0";
pub const PRIuFAST16: &'static [u8; 3usize] = b"lu\0";
pub const PRIuFAST32: &'static [u8; 3usize] = b"lu\0";
pub const PRIuFAST64: &'static [u8; 3usize] = b"lu\0";
pub const PRIx8: &'static [u8; 2usize] = b"x\0";
pub const PRIx16: &'static [u8; 2usize] = b"x\0";
pub const PRIx32: &'static [u8; 2usize] = b"x\0";
pub const PRIx64: &'static [u8; 3usize] = b"lx\0";
pub const PRIxLEAST8: &'static [u8; 2usize] = b"x\0";
pub const PRIxLEAST16: &'static [u8; 2usize] = b"x\0";
pub const PRIxLEAST32: &'static [u8; 2usize] = b"x\0";
pub const PRIxLEAST64: &'static [u8; 3usize] = b"lx\0";
pub const PRIxFAST8: &'static [u8; 2usize] = b"x\0";
pub const PRIxFAST16: &'static [u8; 3usize] = b"lx\0";
pub const PRIxFAST32: &'static [u8; 3usize] = b"lx\0";
pub const PRIxFAST64: &'static [u8; 3usize] = b"lx\0";
pub const PRIX8: &'static [u8; 2usize] = b"X\0";
pub const PRIX16: &'static [u8; 2usize] = b"X\0";
pub const PRIX32: &'static [u8; 2usize] = b"X\0";
pub const PRIX64: &'static [u8; 3usize] = b"lX\0";
pub const PRIXLEAST8: &'static [u8; 2usize] = b"X\0";
pub const PRIXLEAST16: &'static [u8; 2usize] = b"X\0";
pub const PRIXLEAST32: &'static [u8; 2usize] = b"X\0";
pub const PRIXLEAST64: &'static [u8; 3usize] = b"lX\0";
pub const PRIXFAST8: &'static [u8; 2usize] = b"X\0";
pub const PRIXFAST16: &'static [u8; 3usize] = b"lX\0";
pub const PRIXFAST32: &'static [u8; 3usize] = b"lX\0";
pub const PRIXFAST64: &'static [u8; 3usize] = b"lX\0";
pub const PRIdMAX: &'static [u8; 3usize] = b"ld\0";
pub const PRIiMAX: &'static [u8; 3usize] = b"li\0";
pub const PRIoMAX: &'static [u8; 3usize] = b"lo\0";
pub const PRIuMAX: &'static [u8; 3usize] = b"lu\0";
pub const PRIxMAX: &'static [u8; 3usize] = b"lx\0";
pub const PRIXMAX: &'static [u8; 3usize] = b"lX\0";
pub const PRIdPTR: &'static [u8; 3usize] = b"ld\0";
pub const PRIiPTR: &'static [u8; 3usize] = b"li\0";
pub const PRIoPTR: &'static [u8; 3usize] = b"lo\0";
pub const PRIuPTR: &'static [u8; 3usize] = b"lu\0";
pub const PRIxPTR: &'static [u8; 3usize] = b"lx\0";
pub const PRIXPTR: &'static [u8; 3usize] = b"lX\0";
pub const SCNd8: &'static [u8; 4usize] = b"hhd\0";
pub const SCNd16: &'static [u8; 3usize] = b"hd\0";
pub const SCNd32: &'static [u8; 2usize] = b"d\0";
pub const SCNd64: &'static [u8; 3usize] = b"ld\0";
pub const SCNdLEAST8: &'static [u8; 4usize] = b"hhd\0";
pub const SCNdLEAST16: &'static [u8; 3usize] = b"hd\0";
pub const SCNdLEAST32: &'static [u8; 2usize] = b"d\0";
pub const SCNdLEAST64: &'static [u8; 3usize] = b"ld\0";
pub const SCNdFAST8: &'static [u8; 4usize] = b"hhd\0";
pub const SCNdFAST16: &'static [u8; 3usize] = b"ld\0";
pub const SCNdFAST32: &'static [u8; 3usize] = b"ld\0";
pub const SCNdFAST64: &'static [u8; 3usize] = b"ld\0";
pub const SCNi8: &'static [u8; 4usize] = b"hhi\0";
pub const SCNi16: &'static [u8; 3usize] = b"hi\0";
pub const SCNi32: &'static [u8; 2usize] = b"i\0";
pub const SCNi64: &'static [u8; 3usize] = b"li\0";
pub const SCNiLEAST8: &'static [u8; 4usize] = b"hhi\0";
pub const SCNiLEAST16: &'static [u8; 3usize] = b"hi\0";
pub const SCNiLEAST32: &'static [u8; 2usize] = b"i\0";
pub const SCNiLEAST64: &'static [u8; 3usize] = b"li\0";
pub const SCNiFAST8: &'static [u8; 4usize] = b"hhi\0";
pub const SCNiFAST16: &'static [u8; 3usize] = b"li\0";
pub const SCNiFAST32: &'static [u8; 3usize] = b"li\0";
pub const SCNiFAST64: &'static [u8; 3usize] = b"li\0";
pub const SCNu8: &'static [u8; 4usize] = b"hhu\0";
pub const SCNu16: &'static [u8; 3usize] = b"hu\0";
pub const SCNu32: &'static [u8; 2usize] = b"u\0";
pub const SCNu64: &'static [u8; 3usize] = b"lu\0";
pub const SCNuLEAST8: &'static [u8; 4usize] = b"hhu\0";
pub const SCNuLEAST16: &'static [u8; 3usize] = b"hu\0";
pub const SCNuLEAST32: &'static [u8; 2usize] = b"u\0";
pub const SCNuLEAST64: &'static [u8; 3usize] = b"lu\0";
pub const SCNuFAST8: &'static [u8; 4usize] = b"hhu\0";
pub const SCNuFAST16: &'static [u8; 3usize] = b"lu\0";
pub const SCNuFAST32: &'static [u8; 3usize] = b"lu\0";
pub const SCNuFAST64: &'static [u8; 3usize] = b"lu\0";
pub const SCNo8: &'static [u8; 4usize] = b"hho\0";
pub const SCNo16: &'static [u8; 3usize] = b"ho\0";
pub const SCNo32: &'static [u8; 2usize] = b"o\0";
pub const SCNo64: &'static [u8; 3usize] = b"lo\0";
pub const SCNoLEAST8: &'static [u8; 4usize] = b"hho\0";
pub const SCNoLEAST16: &'static [u8; 3usize] = b"ho\0";
pub const SCNoLEAST32: &'static [u8; 2usize] = b"o\0";
pub const SCNoLEAST64: &'static [u8; 3usize] = b"lo\0";
pub const SCNoFAST8: &'static [u8; 4usize] = b"hho\0";
pub const SCNoFAST16: &'static [u8; 3usize] = b"lo\0";
pub const SCNoFAST32: &'static [u8; 3usize] = b"lo\0";
pub const SCNoFAST64: &'static [u8; 3usize] = b"lo\0";
pub const SCNx8: &'static [u8; 4usize] = b"hhx\0";
pub const SCNx16: &'static [u8; 3usize] = b"hx\0";
pub const SCNx32: &'static [u8; 2usize] = b"x\0";
pub const SCNx64: &'static [u8; 3usize] = b"lx\0";
pub const SCNxLEAST8: &'static [u8; 4usize] = b"hhx\0";
pub const SCNxLEAST16: &'static [u8; 3usize] = b"hx\0";
pub const SCNxLEAST32: &'static [u8; 2usize] = b"x\0";
pub const SCNxLEAST64: &'static [u8; 3usize] = b"lx\0";
pub const SCNxFAST8: &'static [u8; 4usize] = b"hhx\0";
pub const SCNxFAST16: &'static [u8; 3usize] = b"lx\0";
pub const SCNxFAST32: &'static [u8; 3usize] = b"lx\0";
pub const SCNxFAST64: &'static [u8; 3usize] = b"lx\0";
pub const SCNdMAX: &'static [u8; 3usize] = b"ld\0";
pub const SCNiMAX: &'static [u8; 3usize] = b"li\0";
pub const SCNoMAX: &'static [u8; 3usize] = b"lo\0";
pub const SCNuMAX: &'static [u8; 3usize] = b"lu\0";
pub const SCNxMAX: &'static [u8; 3usize] = b"lx\0";
pub const SCNdPTR: &'static [u8; 3usize] = b"ld\0";
pub const SCNiPTR: &'static [u8; 3usize] = b"li\0";
pub const SCNoPTR: &'static [u8; 3usize] = b"lo\0";
pub const SCNuPTR: &'static [u8; 3usize] = b"lu\0";
pub const SCNxPTR: &'static [u8; 3usize] = b"lx\0";
pub const MyCORE_VERSION_MAJOR: u32 = 0;
pub const MyCORE_VERSION_MINOR: u32 = 1;
pub const MyCORE_VERSION_PATCH: u32 = 0;
pub const MyCORE_FORMAT_Z: &'static [u8; 4usize] = b"%zu\0";
pub const MyENCODING_VERSION_MAJOR: u32 = 0;
pub const MyENCODING_VERSION_MINOR: u32 = 1;
pub const MyENCODING_VERSION_PATCH: u32 = 0;
pub type wchar_t = ::std::os::raw::c_int;
#[repr(C)]
#[repr(align(16))]
#[derive(Debug, Copy, Clone)]
pub struct max_align_t {
    pub __clang_max_align_nonce1: ::std::os::raw::c_longlong,
    pub __bindgen_padding_0: u64,
    pub __clang_max_align_nonce2: u128,
}
#[test]
fn bindgen_test_layout_max_align_t() {
    assert_eq!(
        ::std::mem::size_of::<max_align_t>(),
        32usize,
        concat!("Size of: ", stringify!(max_align_t))
    );
    assert_eq!(
        ::std::mem::align_of::<max_align_t>(),
        16usize,
        concat!("Alignment of ", stringify!(max_align_t))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<max_align_t>())).__clang_max_align_nonce1 as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(max_align_t),
            "::",
            stringify!(__clang_max_align_nonce1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<max_align_t>())).__clang_max_align_nonce2 as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(max_align_t),
            "::",
            stringify!(__clang_max_align_nonce2)
        )
    );
}
pub type __u_char = ::std::os::raw::c_uchar;
pub type __u_short = ::std::os::raw::c_ushort;
pub type __u_int = ::std::os::raw::c_uint;
pub type __u_long = ::std::os::raw::c_ulong;
pub type __int8_t = ::std::os::raw::c_schar;
pub type __uint8_t = ::std::os::raw::c_uchar;
pub type __int16_t = ::std::os::raw::c_short;
pub type __uint16_t = ::std::os::raw::c_ushort;
pub type __int32_t = ::std::os::raw::c_int;
pub type __uint32_t = ::std::os::raw::c_uint;
pub type __int64_t = ::std::os::raw::c_long;
pub type __uint64_t = ::std::os::raw::c_ulong;
pub type __quad_t = ::std::os::raw::c_long;
pub type __u_quad_t = ::std::os::raw::c_ulong;
pub type __intmax_t = ::std::os::raw::c_long;
pub type __uintmax_t = ::std::os::raw::c_ulong;
pub type __dev_t = ::std::os::raw::c_ulong;
pub type __uid_t = ::std::os::raw::c_uint;
pub type __gid_t = ::std::os::raw::c_uint;
pub type __ino_t = ::std::os::raw::c_ulong;
pub type __ino64_t = ::std::os::raw::c_ulong;
pub type __mode_t = ::std::os::raw::c_uint;
pub type __nlink_t = ::std::os::raw::c_ulong;
pub type __off_t = ::std::os::raw::c_long;
pub type __off64_t = ::std::os::raw::c_long;
pub type __pid_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __fsid_t {
    pub __val: [::std::os::raw::c_int; 2usize],
}
#[test]
fn bindgen_test_layout___fsid_t() {
    assert_eq!(
        ::std::mem::size_of::<__fsid_t>(),
        8usize,
        concat!("Size of: ", stringify!(__fsid_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__fsid_t>(),
        4usize,
        concat!("Alignment of ", stringify!(__fsid_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__fsid_t>())).__val as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__fsid_t),
            "::",
            stringify!(__val)
        )
    );
}
pub type __clock_t = ::std::os::raw::c_long;
pub type __rlim_t = ::std::os::raw::c_ulong;
pub type __rlim64_t = ::std::os::raw::c_ulong;
pub type __id_t = ::std::os::raw::c_uint;
pub type __time_t = ::std::os::raw::c_long;
pub type __useconds_t = ::std::os::raw::c_uint;
pub type __suseconds_t = ::std::os::raw::c_long;
pub type __daddr_t = ::std::os::raw::c_int;
pub type __key_t = ::std::os::raw::c_int;
pub type __clockid_t = ::std::os::raw::c_int;
pub type __timer_t = *mut ::std::os::raw::c_void;
pub type __blksize_t = ::std::os::raw::c_long;
pub type __blkcnt_t = ::std::os::raw::c_long;
pub type __blkcnt64_t = ::std::os::raw::c_long;
pub type __fsblkcnt_t = ::std::os::raw::c_ulong;
pub type __fsblkcnt64_t = ::std::os::raw::c_ulong;
pub type __fsfilcnt_t = ::std::os::raw::c_ulong;
pub type __fsfilcnt64_t = ::std::os::raw::c_ulong;
pub type __fsword_t = ::std::os::raw::c_long;
pub type __ssize_t = ::std::os::raw::c_long;
pub type __syscall_slong_t = ::std::os::raw::c_long;
pub type __syscall_ulong_t = ::std::os::raw::c_ulong;
pub type __loff_t = __off64_t;
pub type __caddr_t = *mut ::std::os::raw::c_char;
pub type __intptr_t = ::std::os::raw::c_long;
pub type __socklen_t = ::std::os::raw::c_uint;
pub type __sig_atomic_t = ::std::os::raw::c_int;
pub type __FILE = _IO_FILE;
pub type FILE = _IO_FILE;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct __mbstate_t {
    pub __count: ::std::os::raw::c_int,
    pub __value: __mbstate_t__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __mbstate_t__bindgen_ty_1 {
    pub __wch: ::std::os::raw::c_uint,
    pub __wchb: [::std::os::raw::c_char; 4usize],
    _bindgen_union_align: u32,
}
#[test]
fn bindgen_test_layout___mbstate_t__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<__mbstate_t__bindgen_ty_1>(),
        4usize,
        concat!("Size of: ", stringify!(__mbstate_t__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<__mbstate_t__bindgen_ty_1>(),
        4usize,
        concat!("Alignment of ", stringify!(__mbstate_t__bindgen_ty_1))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__mbstate_t__bindgen_ty_1>())).__wch as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__mbstate_t__bindgen_ty_1),
            "::",
            stringify!(__wch)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__mbstate_t__bindgen_ty_1>())).__wchb as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__mbstate_t__bindgen_ty_1),
            "::",
            stringify!(__wchb)
        )
    );
}
#[test]
fn bindgen_test_layout___mbstate_t() {
    assert_eq!(
        ::std::mem::size_of::<__mbstate_t>(),
        8usize,
        concat!("Size of: ", stringify!(__mbstate_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__mbstate_t>(),
        4usize,
        concat!("Alignment of ", stringify!(__mbstate_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__mbstate_t>())).__count as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__mbstate_t),
            "::",
            stringify!(__count)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__mbstate_t>())).__value as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(__mbstate_t),
            "::",
            stringify!(__value)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _G_fpos_t {
    pub __pos: __off_t,
    pub __state: __mbstate_t,
}
#[test]
fn bindgen_test_layout__G_fpos_t() {
    assert_eq!(
        ::std::mem::size_of::<_G_fpos_t>(),
        16usize,
        concat!("Size of: ", stringify!(_G_fpos_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_G_fpos_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_G_fpos_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_G_fpos_t>())).__pos as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_G_fpos_t),
            "::",
            stringify!(__pos)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_G_fpos_t>())).__state as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_G_fpos_t),
            "::",
            stringify!(__state)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _G_fpos64_t {
    pub __pos: __off64_t,
    pub __state: __mbstate_t,
}
#[test]
fn bindgen_test_layout__G_fpos64_t() {
    assert_eq!(
        ::std::mem::size_of::<_G_fpos64_t>(),
        16usize,
        concat!("Size of: ", stringify!(_G_fpos64_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_G_fpos64_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_G_fpos64_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_G_fpos64_t>())).__pos as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_G_fpos64_t),
            "::",
            stringify!(__pos)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_G_fpos64_t>())).__state as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_G_fpos64_t),
            "::",
            stringify!(__state)
        )
    );
}
pub type va_list = __builtin_va_list;
pub type __gnuc_va_list = __builtin_va_list;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _IO_jump_t {
    _unused: [u8; 0],
}
pub type _IO_lock_t = ::std::os::raw::c_void;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _IO_marker {
    pub _next: *mut _IO_marker,
    pub _sbuf: *mut _IO_FILE,
    pub _pos: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout__IO_marker() {
    assert_eq!(
        ::std::mem::size_of::<_IO_marker>(),
        24usize,
        concat!("Size of: ", stringify!(_IO_marker))
    );
    assert_eq!(
        ::std::mem::align_of::<_IO_marker>(),
        8usize,
        concat!("Alignment of ", stringify!(_IO_marker))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_marker>()))._next as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_marker),
            "::",
            stringify!(_next)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_marker>()))._sbuf as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_marker),
            "::",
            stringify!(_sbuf)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_marker>()))._pos as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_marker),
            "::",
            stringify!(_pos)
        )
    );
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum __codecvt_result {
    __codecvt_ok = 0,
    __codecvt_partial = 1,
    __codecvt_error = 2,
    __codecvt_noconv = 3,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _IO_FILE {
    pub _flags: ::std::os::raw::c_int,
    pub _IO_read_ptr: *mut ::std::os::raw::c_char,
    pub _IO_read_end: *mut ::std::os::raw::c_char,
    pub _IO_read_base: *mut ::std::os::raw::c_char,
    pub _IO_write_base: *mut ::std::os::raw::c_char,
    pub _IO_write_ptr: *mut ::std::os::raw::c_char,
    pub _IO_write_end: *mut ::std::os::raw::c_char,
    pub _IO_buf_base: *mut ::std::os::raw::c_char,
    pub _IO_buf_end: *mut ::std::os::raw::c_char,
    pub _IO_save_base: *mut ::std::os::raw::c_char,
    pub _IO_backup_base: *mut ::std::os::raw::c_char,
    pub _IO_save_end: *mut ::std::os::raw::c_char,
    pub _markers: *mut _IO_marker,
    pub _chain: *mut _IO_FILE,
    pub _fileno: ::std::os::raw::c_int,
    pub _flags2: ::std::os::raw::c_int,
    pub _old_offset: __off_t,
    pub _cur_column: ::std::os::raw::c_ushort,
    pub _vtable_offset: ::std::os::raw::c_schar,
    pub _shortbuf: [::std::os::raw::c_char; 1usize],
    pub _lock: *mut _IO_lock_t,
    pub _offset: __off64_t,
    pub __pad1: *mut ::std::os::raw::c_void,
    pub __pad2: *mut ::std::os::raw::c_void,
    pub __pad3: *mut ::std::os::raw::c_void,
    pub __pad4: *mut ::std::os::raw::c_void,
    pub __pad5: usize,
    pub _mode: ::std::os::raw::c_int,
    pub _unused2: [::std::os::raw::c_char; 20usize],
}
#[test]
fn bindgen_test_layout__IO_FILE() {
    assert_eq!(
        ::std::mem::size_of::<_IO_FILE>(),
        216usize,
        concat!("Size of: ", stringify!(_IO_FILE))
    );
    assert_eq!(
        ::std::mem::align_of::<_IO_FILE>(),
        8usize,
        concat!("Alignment of ", stringify!(_IO_FILE))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._flags as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_flags)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._IO_read_ptr as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_read_ptr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._IO_read_end as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_read_end)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._IO_read_base as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_read_base)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._IO_write_base as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_write_base)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._IO_write_ptr as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_write_ptr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._IO_write_end as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_write_end)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._IO_buf_base as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_buf_base)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._IO_buf_end as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_buf_end)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._IO_save_base as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_save_base)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._IO_backup_base as *const _ as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_backup_base)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._IO_save_end as *const _ as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_save_end)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._markers as *const _ as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_markers)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._chain as *const _ as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_chain)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._fileno as *const _ as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_fileno)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._flags2 as *const _ as usize },
        116usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_flags2)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._old_offset as *const _ as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_old_offset)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._cur_column as *const _ as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_cur_column)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._vtable_offset as *const _ as usize },
        130usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_vtable_offset)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._shortbuf as *const _ as usize },
        131usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_shortbuf)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._lock as *const _ as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_lock)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._offset as *const _ as usize },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_offset)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>())).__pad1 as *const _ as usize },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(__pad1)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>())).__pad2 as *const _ as usize },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(__pad2)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>())).__pad3 as *const _ as usize },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(__pad3)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>())).__pad4 as *const _ as usize },
        176usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(__pad4)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>())).__pad5 as *const _ as usize },
        184usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(__pad5)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._mode as *const _ as usize },
        192usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_mode)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._unused2 as *const _ as usize },
        196usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_unused2)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _IO_FILE_plus {
    _unused: [u8; 0],
}
extern "C" {
    pub static mut _IO_2_1_stdin_: _IO_FILE_plus;
}
extern "C" {
    pub static mut _IO_2_1_stdout_: _IO_FILE_plus;
}
extern "C" {
    pub static mut _IO_2_1_stderr_: _IO_FILE_plus;
}
pub type __io_read_fn = ::std::option::Option<
    unsafe extern "C" fn(
        __cookie: *mut ::std::os::raw::c_void,
        __buf: *mut ::std::os::raw::c_char,
        __nbytes: usize,
    ) -> __ssize_t,
>;
pub type __io_write_fn = ::std::option::Option<
    unsafe extern "C" fn(
        __cookie: *mut ::std::os::raw::c_void,
        __buf: *const ::std::os::raw::c_char,
        __n: usize,
    ) -> __ssize_t,
>;
pub type __io_seek_fn = ::std::option::Option<
    unsafe extern "C" fn(
        __cookie: *mut ::std::os::raw::c_void,
        __pos: *mut __off64_t,
        __w: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int,
>;
pub type __io_close_fn = ::std::option::Option<
    unsafe extern "C" fn(__cookie: *mut ::std::os::raw::c_void) -> ::std::os::raw::c_int,
>;
extern "C" {
    pub fn __underflow(arg1: *mut _IO_FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __uflow(arg1: *mut _IO_FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __overflow(arg1: *mut _IO_FILE, arg2: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _IO_getc(__fp: *mut _IO_FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _IO_putc(__c: ::std::os::raw::c_int, __fp: *mut _IO_FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _IO_feof(__fp: *mut _IO_FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _IO_ferror(__fp: *mut _IO_FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _IO_peekc_locked(__fp: *mut _IO_FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _IO_flockfile(arg1: *mut _IO_FILE);
}
extern "C" {
    pub fn _IO_funlockfile(arg1: *mut _IO_FILE);
}
extern "C" {
    pub fn _IO_ftrylockfile(arg1: *mut _IO_FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _IO_vfscanf(
        arg1: *mut _IO_FILE,
        arg2: *const ::std::os::raw::c_char,
        arg3: *mut __va_list_tag,
        arg4: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _IO_vfprintf(
        arg1: *mut _IO_FILE,
        arg2: *const ::std::os::raw::c_char,
        arg3: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _IO_padn(arg1: *mut _IO_FILE, arg2: ::std::os::raw::c_int, arg3: __ssize_t)
        -> __ssize_t;
}
extern "C" {
    pub fn _IO_sgetn(arg1: *mut _IO_FILE, arg2: *mut ::std::os::raw::c_void, arg3: usize) -> usize;
}
extern "C" {
    pub fn _IO_seekoff(
        arg1: *mut _IO_FILE,
        arg2: __off64_t,
        arg3: ::std::os::raw::c_int,
        arg4: ::std::os::raw::c_int,
    ) -> __off64_t;
}
extern "C" {
    pub fn _IO_seekpos(
        arg1: *mut _IO_FILE,
        arg2: __off64_t,
        arg3: ::std::os::raw::c_int,
    ) -> __off64_t;
}
extern "C" {
    pub fn _IO_free_backup_area(arg1: *mut _IO_FILE);
}
pub type off_t = __off_t;
pub type fpos_t = _G_fpos_t;
extern "C" {
    pub static mut stdin: *mut _IO_FILE;
}
extern "C" {
    pub static mut stdout: *mut _IO_FILE;
}
extern "C" {
    pub static mut stderr: *mut _IO_FILE;
}
extern "C" {
    pub fn remove(__filename: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rename(
        __old: *const ::std::os::raw::c_char,
        __new: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn renameat(
        __oldfd: ::std::os::raw::c_int,
        __old: *const ::std::os::raw::c_char,
        __newfd: ::std::os::raw::c_int,
        __new: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn tmpfile() -> *mut FILE;
}
extern "C" {
    pub fn tmpnam(__s: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn tmpnam_r(__s: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn tempnam(
        __dir: *const ::std::os::raw::c_char,
        __pfx: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn fclose(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fflush(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fflush_unlocked(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fopen(
        __filename: *const ::std::os::raw::c_char,
        __modes: *const ::std::os::raw::c_char,
    ) -> *mut FILE;
}
extern "C" {
    pub fn freopen(
        __filename: *const ::std::os::raw::c_char,
        __modes: *const ::std::os::raw::c_char,
        __stream: *mut FILE,
    ) -> *mut FILE;
}
extern "C" {
    pub fn fdopen(__fd: ::std::os::raw::c_int, __modes: *const ::std::os::raw::c_char)
        -> *mut FILE;
}
extern "C" {
    pub fn fmemopen(
        __s: *mut ::std::os::raw::c_void,
        __len: usize,
        __modes: *const ::std::os::raw::c_char,
    ) -> *mut FILE;
}
extern "C" {
    pub fn open_memstream(
        __bufloc: *mut *mut ::std::os::raw::c_char,
        __sizeloc: *mut usize,
    ) -> *mut FILE;
}
extern "C" {
    pub fn setbuf(__stream: *mut FILE, __buf: *mut ::std::os::raw::c_char);
}
extern "C" {
    pub fn setvbuf(
        __stream: *mut FILE,
        __buf: *mut ::std::os::raw::c_char,
        __modes: ::std::os::raw::c_int,
        __n: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setbuffer(__stream: *mut FILE, __buf: *mut ::std::os::raw::c_char, __size: usize);
}
extern "C" {
    pub fn setlinebuf(__stream: *mut FILE);
}
extern "C" {
    pub fn fprintf(
        __stream: *mut FILE,
        __format: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn printf(__format: *const ::std::os::raw::c_char, ...) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sprintf(
        __s: *mut ::std::os::raw::c_char,
        __format: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vfprintf(
        __s: *mut FILE,
        __format: *const ::std::os::raw::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vprintf(
        __format: *const ::std::os::raw::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vsprintf(
        __s: *mut ::std::os::raw::c_char,
        __format: *const ::std::os::raw::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn snprintf(
        __s: *mut ::std::os::raw::c_char,
        __maxlen: ::std::os::raw::c_ulong,
        __format: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vsnprintf(
        __s: *mut ::std::os::raw::c_char,
        __maxlen: ::std::os::raw::c_ulong,
        __format: *const ::std::os::raw::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vdprintf(
        __fd: ::std::os::raw::c_int,
        __fmt: *const ::std::os::raw::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dprintf(
        __fd: ::std::os::raw::c_int,
        __fmt: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fscanf(
        __stream: *mut FILE,
        __format: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn scanf(__format: *const ::std::os::raw::c_char, ...) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sscanf(
        __s: *const ::std::os::raw::c_char,
        __format: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}__isoc99_fscanf"]
    pub fn fscanf1(
        __stream: *mut FILE,
        __format: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}__isoc99_scanf"]
    pub fn scanf1(__format: *const ::std::os::raw::c_char, ...) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}__isoc99_sscanf"]
    pub fn sscanf1(
        __s: *const ::std::os::raw::c_char,
        __format: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vfscanf(
        __s: *mut FILE,
        __format: *const ::std::os::raw::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vscanf(
        __format: *const ::std::os::raw::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vsscanf(
        __s: *const ::std::os::raw::c_char,
        __format: *const ::std::os::raw::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}__isoc99_vfscanf"]
    pub fn vfscanf1(
        __s: *mut FILE,
        __format: *const ::std::os::raw::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}__isoc99_vscanf"]
    pub fn vscanf1(
        __format: *const ::std::os::raw::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}__isoc99_vsscanf"]
    pub fn vsscanf1(
        __s: *const ::std::os::raw::c_char,
        __format: *const ::std::os::raw::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fgetc(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getc(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getchar() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getc_unlocked(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getchar_unlocked() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fgetc_unlocked(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fputc(__c: ::std::os::raw::c_int, __stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn putc(__c: ::std::os::raw::c_int, __stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn putchar(__c: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fputc_unlocked(__c: ::std::os::raw::c_int, __stream: *mut FILE)
        -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn putc_unlocked(__c: ::std::os::raw::c_int, __stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn putchar_unlocked(__c: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getw(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn putw(__w: ::std::os::raw::c_int, __stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fgets(
        __s: *mut ::std::os::raw::c_char,
        __n: ::std::os::raw::c_int,
        __stream: *mut FILE,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn __getdelim(
        __lineptr: *mut *mut ::std::os::raw::c_char,
        __n: *mut usize,
        __delimiter: ::std::os::raw::c_int,
        __stream: *mut FILE,
    ) -> __ssize_t;
}
extern "C" {
    pub fn getdelim(
        __lineptr: *mut *mut ::std::os::raw::c_char,
        __n: *mut usize,
        __delimiter: ::std::os::raw::c_int,
        __stream: *mut FILE,
    ) -> __ssize_t;
}
extern "C" {
    pub fn getline(
        __lineptr: *mut *mut ::std::os::raw::c_char,
        __n: *mut usize,
        __stream: *mut FILE,
    ) -> __ssize_t;
}
extern "C" {
    pub fn fputs(__s: *const ::std::os::raw::c_char, __stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn puts(__s: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ungetc(__c: ::std::os::raw::c_int, __stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fread(
        __ptr: *mut ::std::os::raw::c_void,
        __size: usize,
        __n: usize,
        __stream: *mut FILE,
    ) -> usize;
}
extern "C" {
    pub fn fwrite(
        __ptr: *const ::std::os::raw::c_void,
        __size: usize,
        __n: usize,
        __s: *mut FILE,
    ) -> usize;
}
extern "C" {
    pub fn fread_unlocked(
        __ptr: *mut ::std::os::raw::c_void,
        __size: usize,
        __n: usize,
        __stream: *mut FILE,
    ) -> usize;
}
extern "C" {
    pub fn fwrite_unlocked(
        __ptr: *const ::std::os::raw::c_void,
        __size: usize,
        __n: usize,
        __stream: *mut FILE,
    ) -> usize;
}
extern "C" {
    pub fn fseek(
        __stream: *mut FILE,
        __off: ::std::os::raw::c_long,
        __whence: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ftell(__stream: *mut FILE) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn rewind(__stream: *mut FILE);
}
extern "C" {
    pub fn fseeko(
        __stream: *mut FILE,
        __off: __off_t,
        __whence: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ftello(__stream: *mut FILE) -> __off_t;
}
extern "C" {
    pub fn fgetpos(__stream: *mut FILE, __pos: *mut fpos_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fsetpos(__stream: *mut FILE, __pos: *const fpos_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn clearerr(__stream: *mut FILE);
}
extern "C" {
    pub fn feof(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ferror(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn clearerr_unlocked(__stream: *mut FILE);
}
extern "C" {
    pub fn feof_unlocked(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ferror_unlocked(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn perror(__s: *const ::std::os::raw::c_char);
}
extern "C" {
    pub static mut sys_nerr: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut sys_errlist: [*const ::std::os::raw::c_char; 0usize];
}
extern "C" {
    pub fn fileno(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fileno_unlocked(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn popen(
        __command: *const ::std::os::raw::c_char,
        __modes: *const ::std::os::raw::c_char,
    ) -> *mut FILE;
}
extern "C" {
    pub fn pclose(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ctermid(__s: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn flockfile(__stream: *mut FILE);
}
extern "C" {
    pub fn ftrylockfile(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn funlockfile(__stream: *mut FILE);
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum idtype_t {
    P_ALL = 0,
    P_PID = 1,
    P_PGID = 2,
}
pub type _Float32 = f32;
pub type _Float64 = f64;
pub type _Float32x = f64;
pub type _Float64x = u128;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct div_t {
    pub quot: ::std::os::raw::c_int,
    pub rem: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_div_t() {
    assert_eq!(
        ::std::mem::size_of::<div_t>(),
        8usize,
        concat!("Size of: ", stringify!(div_t))
    );
    assert_eq!(
        ::std::mem::align_of::<div_t>(),
        4usize,
        concat!("Alignment of ", stringify!(div_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<div_t>())).quot as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(div_t),
            "::",
            stringify!(quot)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<div_t>())).rem as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(div_t),
            "::",
            stringify!(rem)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ldiv_t {
    pub quot: ::std::os::raw::c_long,
    pub rem: ::std::os::raw::c_long,
}
#[test]
fn bindgen_test_layout_ldiv_t() {
    assert_eq!(
        ::std::mem::size_of::<ldiv_t>(),
        16usize,
        concat!("Size of: ", stringify!(ldiv_t))
    );
    assert_eq!(
        ::std::mem::align_of::<ldiv_t>(),
        8usize,
        concat!("Alignment of ", stringify!(ldiv_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ldiv_t>())).quot as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ldiv_t),
            "::",
            stringify!(quot)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ldiv_t>())).rem as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ldiv_t),
            "::",
            stringify!(rem)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct lldiv_t {
    pub quot: ::std::os::raw::c_longlong,
    pub rem: ::std::os::raw::c_longlong,
}
#[test]
fn bindgen_test_layout_lldiv_t() {
    assert_eq!(
        ::std::mem::size_of::<lldiv_t>(),
        16usize,
        concat!("Size of: ", stringify!(lldiv_t))
    );
    assert_eq!(
        ::std::mem::align_of::<lldiv_t>(),
        8usize,
        concat!("Alignment of ", stringify!(lldiv_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<lldiv_t>())).quot as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(lldiv_t),
            "::",
            stringify!(quot)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<lldiv_t>())).rem as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(lldiv_t),
            "::",
            stringify!(rem)
        )
    );
}
extern "C" {
    pub fn __ctype_get_mb_cur_max() -> usize;
}
extern "C" {
    pub fn atof(__nptr: *const ::std::os::raw::c_char) -> f64;
}
extern "C" {
    pub fn atoi(__nptr: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn atol(__nptr: *const ::std::os::raw::c_char) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn atoll(__nptr: *const ::std::os::raw::c_char) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn strtod(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
    ) -> f64;
}
extern "C" {
    pub fn strtof(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
    ) -> f32;
}
extern "C" {
    pub fn strtold(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
    ) -> u128;
}
extern "C" {
    pub fn strtol(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
        __base: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn strtoul(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
        __base: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn strtoq(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
        __base: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn strtouq(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
        __base: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_ulonglong;
}
extern "C" {
    pub fn strtoll(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
        __base: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn strtoull(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
        __base: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_ulonglong;
}
extern "C" {
    pub fn l64a(__n: ::std::os::raw::c_long) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn a64l(__s: *const ::std::os::raw::c_char) -> ::std::os::raw::c_long;
}
pub type u_char = __u_char;
pub type u_short = __u_short;
pub type u_int = __u_int;
pub type u_long = __u_long;
pub type quad_t = __quad_t;
pub type u_quad_t = __u_quad_t;
pub type fsid_t = __fsid_t;
pub type loff_t = __loff_t;
pub type ino_t = __ino_t;
pub type dev_t = __dev_t;
pub type gid_t = __gid_t;
pub type mode_t = __mode_t;
pub type nlink_t = __nlink_t;
pub type uid_t = __uid_t;
pub type pid_t = __pid_t;
pub type id_t = __id_t;
pub type daddr_t = __daddr_t;
pub type caddr_t = __caddr_t;
pub type key_t = __key_t;
pub type clock_t = __clock_t;
pub type clockid_t = __clockid_t;
pub type time_t = __time_t;
pub type timer_t = __timer_t;
pub type ulong = ::std::os::raw::c_ulong;
pub type ushort = ::std::os::raw::c_ushort;
pub type uint = ::std::os::raw::c_uint;
pub type u_int8_t = ::std::os::raw::c_uchar;
pub type u_int16_t = ::std::os::raw::c_ushort;
pub type u_int32_t = ::std::os::raw::c_uint;
pub type u_int64_t = ::std::os::raw::c_ulong;
pub type register_t = ::std::os::raw::c_long;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __sigset_t {
    pub __val: [::std::os::raw::c_ulong; 16usize],
}
#[test]
fn bindgen_test_layout___sigset_t() {
    assert_eq!(
        ::std::mem::size_of::<__sigset_t>(),
        128usize,
        concat!("Size of: ", stringify!(__sigset_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__sigset_t>(),
        8usize,
        concat!("Alignment of ", stringify!(__sigset_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__sigset_t>())).__val as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__sigset_t),
            "::",
            stringify!(__val)
        )
    );
}
pub type sigset_t = __sigset_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct timeval {
    pub tv_sec: __time_t,
    pub tv_usec: __suseconds_t,
}
#[test]
fn bindgen_test_layout_timeval() {
    assert_eq!(
        ::std::mem::size_of::<timeval>(),
        16usize,
        concat!("Size of: ", stringify!(timeval))
    );
    assert_eq!(
        ::std::mem::align_of::<timeval>(),
        8usize,
        concat!("Alignment of ", stringify!(timeval))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<timeval>())).tv_sec as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(timeval),
            "::",
            stringify!(tv_sec)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<timeval>())).tv_usec as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(timeval),
            "::",
            stringify!(tv_usec)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct timespec {
    pub tv_sec: __time_t,
    pub tv_nsec: __syscall_slong_t,
}
#[test]
fn bindgen_test_layout_timespec() {
    assert_eq!(
        ::std::mem::size_of::<timespec>(),
        16usize,
        concat!("Size of: ", stringify!(timespec))
    );
    assert_eq!(
        ::std::mem::align_of::<timespec>(),
        8usize,
        concat!("Alignment of ", stringify!(timespec))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<timespec>())).tv_sec as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(timespec),
            "::",
            stringify!(tv_sec)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<timespec>())).tv_nsec as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(timespec),
            "::",
            stringify!(tv_nsec)
        )
    );
}
pub type suseconds_t = __suseconds_t;
pub type __fd_mask = ::std::os::raw::c_long;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct fd_set {
    pub __fds_bits: [__fd_mask; 16usize],
}
#[test]
fn bindgen_test_layout_fd_set() {
    assert_eq!(
        ::std::mem::size_of::<fd_set>(),
        128usize,
        concat!("Size of: ", stringify!(fd_set))
    );
    assert_eq!(
        ::std::mem::align_of::<fd_set>(),
        8usize,
        concat!("Alignment of ", stringify!(fd_set))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<fd_set>())).__fds_bits as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(fd_set),
            "::",
            stringify!(__fds_bits)
        )
    );
}
pub type fd_mask = __fd_mask;
extern "C" {
    pub fn select(
        __nfds: ::std::os::raw::c_int,
        __readfds: *mut fd_set,
        __writefds: *mut fd_set,
        __exceptfds: *mut fd_set,
        __timeout: *mut timeval,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pselect(
        __nfds: ::std::os::raw::c_int,
        __readfds: *mut fd_set,
        __writefds: *mut fd_set,
        __exceptfds: *mut fd_set,
        __timeout: *const timespec,
        __sigmask: *const __sigset_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn gnu_dev_major(__dev: __dev_t) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn gnu_dev_minor(__dev: __dev_t) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn gnu_dev_makedev(
        __major: ::std::os::raw::c_uint,
        __minor: ::std::os::raw::c_uint,
    ) -> __dev_t;
}
pub type blksize_t = __blksize_t;
pub type blkcnt_t = __blkcnt_t;
pub type fsblkcnt_t = __fsblkcnt_t;
pub type fsfilcnt_t = __fsfilcnt_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __pthread_rwlock_arch_t {
    pub __readers: ::std::os::raw::c_uint,
    pub __writers: ::std::os::raw::c_uint,
    pub __wrphase_futex: ::std::os::raw::c_uint,
    pub __writers_futex: ::std::os::raw::c_uint,
    pub __pad3: ::std::os::raw::c_uint,
    pub __pad4: ::std::os::raw::c_uint,
    pub __cur_writer: ::std::os::raw::c_int,
    pub __shared: ::std::os::raw::c_int,
    pub __rwelision: ::std::os::raw::c_schar,
    pub __pad1: [::std::os::raw::c_uchar; 7usize],
    pub __pad2: ::std::os::raw::c_ulong,
    pub __flags: ::std::os::raw::c_uint,
}
#[test]
fn bindgen_test_layout___pthread_rwlock_arch_t() {
    assert_eq!(
        ::std::mem::size_of::<__pthread_rwlock_arch_t>(),
        56usize,
        concat!("Size of: ", stringify!(__pthread_rwlock_arch_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__pthread_rwlock_arch_t>(),
        8usize,
        concat!("Alignment of ", stringify!(__pthread_rwlock_arch_t))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__pthread_rwlock_arch_t>())).__readers as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_rwlock_arch_t),
            "::",
            stringify!(__readers)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__pthread_rwlock_arch_t>())).__writers as *const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_rwlock_arch_t),
            "::",
            stringify!(__writers)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__pthread_rwlock_arch_t>())).__wrphase_futex as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_rwlock_arch_t),
            "::",
            stringify!(__wrphase_futex)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__pthread_rwlock_arch_t>())).__writers_futex as *const _ as usize
        },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_rwlock_arch_t),
            "::",
            stringify!(__writers_futex)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_rwlock_arch_t>())).__pad3 as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_rwlock_arch_t),
            "::",
            stringify!(__pad3)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_rwlock_arch_t>())).__pad4 as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_rwlock_arch_t),
            "::",
            stringify!(__pad4)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__pthread_rwlock_arch_t>())).__cur_writer as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_rwlock_arch_t),
            "::",
            stringify!(__cur_writer)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__pthread_rwlock_arch_t>())).__shared as *const _ as usize
        },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_rwlock_arch_t),
            "::",
            stringify!(__shared)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__pthread_rwlock_arch_t>())).__rwelision as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_rwlock_arch_t),
            "::",
            stringify!(__rwelision)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_rwlock_arch_t>())).__pad1 as *const _ as usize },
        33usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_rwlock_arch_t),
            "::",
            stringify!(__pad1)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_rwlock_arch_t>())).__pad2 as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_rwlock_arch_t),
            "::",
            stringify!(__pad2)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_rwlock_arch_t>())).__flags as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_rwlock_arch_t),
            "::",
            stringify!(__flags)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __pthread_internal_list {
    pub __prev: *mut __pthread_internal_list,
    pub __next: *mut __pthread_internal_list,
}
#[test]
fn bindgen_test_layout___pthread_internal_list() {
    assert_eq!(
        ::std::mem::size_of::<__pthread_internal_list>(),
        16usize,
        concat!("Size of: ", stringify!(__pthread_internal_list))
    );
    assert_eq!(
        ::std::mem::align_of::<__pthread_internal_list>(),
        8usize,
        concat!("Alignment of ", stringify!(__pthread_internal_list))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_internal_list>())).__prev as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_internal_list),
            "::",
            stringify!(__prev)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_internal_list>())).__next as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_internal_list),
            "::",
            stringify!(__next)
        )
    );
}
pub type __pthread_list_t = __pthread_internal_list;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __pthread_mutex_s {
    pub __lock: ::std::os::raw::c_int,
    pub __count: ::std::os::raw::c_uint,
    pub __owner: ::std::os::raw::c_int,
    pub __nusers: ::std::os::raw::c_uint,
    pub __kind: ::std::os::raw::c_int,
    pub __spins: ::std::os::raw::c_short,
    pub __elision: ::std::os::raw::c_short,
    pub __list: __pthread_list_t,
}
#[test]
fn bindgen_test_layout___pthread_mutex_s() {
    assert_eq!(
        ::std::mem::size_of::<__pthread_mutex_s>(),
        40usize,
        concat!("Size of: ", stringify!(__pthread_mutex_s))
    );
    assert_eq!(
        ::std::mem::align_of::<__pthread_mutex_s>(),
        8usize,
        concat!("Alignment of ", stringify!(__pthread_mutex_s))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_mutex_s>())).__lock as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_mutex_s),
            "::",
            stringify!(__lock)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_mutex_s>())).__count as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_mutex_s),
            "::",
            stringify!(__count)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_mutex_s>())).__owner as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_mutex_s),
            "::",
            stringify!(__owner)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_mutex_s>())).__nusers as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_mutex_s),
            "::",
            stringify!(__nusers)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_mutex_s>())).__kind as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_mutex_s),
            "::",
            stringify!(__kind)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_mutex_s>())).__spins as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_mutex_s),
            "::",
            stringify!(__spins)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_mutex_s>())).__elision as *const _ as usize },
        22usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_mutex_s),
            "::",
            stringify!(__elision)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_mutex_s>())).__list as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_mutex_s),
            "::",
            stringify!(__list)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct __pthread_cond_s {
    pub __bindgen_anon_1: __pthread_cond_s__bindgen_ty_1,
    pub __bindgen_anon_2: __pthread_cond_s__bindgen_ty_2,
    pub __g_refs: [::std::os::raw::c_uint; 2usize],
    pub __g_size: [::std::os::raw::c_uint; 2usize],
    pub __g1_orig_size: ::std::os::raw::c_uint,
    pub __wrefs: ::std::os::raw::c_uint,
    pub __g_signals: [::std::os::raw::c_uint; 2usize],
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __pthread_cond_s__bindgen_ty_1 {
    pub __wseq: ::std::os::raw::c_ulonglong,
    pub __wseq32: __pthread_cond_s__bindgen_ty_1__bindgen_ty_1,
    _bindgen_union_align: u64,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __pthread_cond_s__bindgen_ty_1__bindgen_ty_1 {
    pub __low: ::std::os::raw::c_uint,
    pub __high: ::std::os::raw::c_uint,
}
#[test]
fn bindgen_test_layout___pthread_cond_s__bindgen_ty_1__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<__pthread_cond_s__bindgen_ty_1__bindgen_ty_1>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(__pthread_cond_s__bindgen_ty_1__bindgen_ty_1)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__pthread_cond_s__bindgen_ty_1__bindgen_ty_1>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(__pthread_cond_s__bindgen_ty_1__bindgen_ty_1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__pthread_cond_s__bindgen_ty_1__bindgen_ty_1>())).__low
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cond_s__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(__low)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__pthread_cond_s__bindgen_ty_1__bindgen_ty_1>())).__high
                as *const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cond_s__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(__high)
        )
    );
}
#[test]
fn bindgen_test_layout___pthread_cond_s__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<__pthread_cond_s__bindgen_ty_1>(),
        8usize,
        concat!("Size of: ", stringify!(__pthread_cond_s__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<__pthread_cond_s__bindgen_ty_1>(),
        8usize,
        concat!("Alignment of ", stringify!(__pthread_cond_s__bindgen_ty_1))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__pthread_cond_s__bindgen_ty_1>())).__wseq as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cond_s__bindgen_ty_1),
            "::",
            stringify!(__wseq)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__pthread_cond_s__bindgen_ty_1>())).__wseq32 as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cond_s__bindgen_ty_1),
            "::",
            stringify!(__wseq32)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __pthread_cond_s__bindgen_ty_2 {
    pub __g1_start: ::std::os::raw::c_ulonglong,
    pub __g1_start32: __pthread_cond_s__bindgen_ty_2__bindgen_ty_1,
    _bindgen_union_align: u64,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __pthread_cond_s__bindgen_ty_2__bindgen_ty_1 {
    pub __low: ::std::os::raw::c_uint,
    pub __high: ::std::os::raw::c_uint,
}
#[test]
fn bindgen_test_layout___pthread_cond_s__bindgen_ty_2__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<__pthread_cond_s__bindgen_ty_2__bindgen_ty_1>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(__pthread_cond_s__bindgen_ty_2__bindgen_ty_1)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__pthread_cond_s__bindgen_ty_2__bindgen_ty_1>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(__pthread_cond_s__bindgen_ty_2__bindgen_ty_1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__pthread_cond_s__bindgen_ty_2__bindgen_ty_1>())).__low
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cond_s__bindgen_ty_2__bindgen_ty_1),
            "::",
            stringify!(__low)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__pthread_cond_s__bindgen_ty_2__bindgen_ty_1>())).__high
                as *const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cond_s__bindgen_ty_2__bindgen_ty_1),
            "::",
            stringify!(__high)
        )
    );
}
#[test]
fn bindgen_test_layout___pthread_cond_s__bindgen_ty_2() {
    assert_eq!(
        ::std::mem::size_of::<__pthread_cond_s__bindgen_ty_2>(),
        8usize,
        concat!("Size of: ", stringify!(__pthread_cond_s__bindgen_ty_2))
    );
    assert_eq!(
        ::std::mem::align_of::<__pthread_cond_s__bindgen_ty_2>(),
        8usize,
        concat!("Alignment of ", stringify!(__pthread_cond_s__bindgen_ty_2))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__pthread_cond_s__bindgen_ty_2>())).__g1_start as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cond_s__bindgen_ty_2),
            "::",
            stringify!(__g1_start)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__pthread_cond_s__bindgen_ty_2>())).__g1_start32 as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cond_s__bindgen_ty_2),
            "::",
            stringify!(__g1_start32)
        )
    );
}
#[test]
fn bindgen_test_layout___pthread_cond_s() {
    assert_eq!(
        ::std::mem::size_of::<__pthread_cond_s>(),
        48usize,
        concat!("Size of: ", stringify!(__pthread_cond_s))
    );
    assert_eq!(
        ::std::mem::align_of::<__pthread_cond_s>(),
        8usize,
        concat!("Alignment of ", stringify!(__pthread_cond_s))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_cond_s>())).__g_refs as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cond_s),
            "::",
            stringify!(__g_refs)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_cond_s>())).__g_size as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cond_s),
            "::",
            stringify!(__g_size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_cond_s>())).__g1_orig_size as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cond_s),
            "::",
            stringify!(__g1_orig_size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_cond_s>())).__wrefs as *const _ as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cond_s),
            "::",
            stringify!(__wrefs)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_cond_s>())).__g_signals as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cond_s),
            "::",
            stringify!(__g_signals)
        )
    );
}
pub type pthread_t = ::std::os::raw::c_ulong;
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_mutexattr_t {
    pub __size: [::std::os::raw::c_char; 4usize],
    pub __align: ::std::os::raw::c_int,
    _bindgen_union_align: u32,
}
#[test]
fn bindgen_test_layout_pthread_mutexattr_t() {
    assert_eq!(
        ::std::mem::size_of::<pthread_mutexattr_t>(),
        4usize,
        concat!("Size of: ", stringify!(pthread_mutexattr_t))
    );
    assert_eq!(
        ::std::mem::align_of::<pthread_mutexattr_t>(),
        4usize,
        concat!("Alignment of ", stringify!(pthread_mutexattr_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_mutexattr_t>())).__size as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_mutexattr_t),
            "::",
            stringify!(__size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_mutexattr_t>())).__align as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_mutexattr_t),
            "::",
            stringify!(__align)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_condattr_t {
    pub __size: [::std::os::raw::c_char; 4usize],
    pub __align: ::std::os::raw::c_int,
    _bindgen_union_align: u32,
}
#[test]
fn bindgen_test_layout_pthread_condattr_t() {
    assert_eq!(
        ::std::mem::size_of::<pthread_condattr_t>(),
        4usize,
        concat!("Size of: ", stringify!(pthread_condattr_t))
    );
    assert_eq!(
        ::std::mem::align_of::<pthread_condattr_t>(),
        4usize,
        concat!("Alignment of ", stringify!(pthread_condattr_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_condattr_t>())).__size as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_condattr_t),
            "::",
            stringify!(__size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_condattr_t>())).__align as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_condattr_t),
            "::",
            stringify!(__align)
        )
    );
}
pub type pthread_key_t = ::std::os::raw::c_uint;
pub type pthread_once_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_attr_t {
    pub __size: [::std::os::raw::c_char; 56usize],
    pub __align: ::std::os::raw::c_long,
    _bindgen_union_align: [u64; 7usize],
}
#[test]
fn bindgen_test_layout_pthread_attr_t() {
    assert_eq!(
        ::std::mem::size_of::<pthread_attr_t>(),
        56usize,
        concat!("Size of: ", stringify!(pthread_attr_t))
    );
    assert_eq!(
        ::std::mem::align_of::<pthread_attr_t>(),
        8usize,
        concat!("Alignment of ", stringify!(pthread_attr_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_attr_t>())).__size as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_attr_t),
            "::",
            stringify!(__size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_attr_t>())).__align as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_attr_t),
            "::",
            stringify!(__align)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_mutex_t {
    pub __data: __pthread_mutex_s,
    pub __size: [::std::os::raw::c_char; 40usize],
    pub __align: ::std::os::raw::c_long,
    _bindgen_union_align: [u64; 5usize],
}
#[test]
fn bindgen_test_layout_pthread_mutex_t() {
    assert_eq!(
        ::std::mem::size_of::<pthread_mutex_t>(),
        40usize,
        concat!("Size of: ", stringify!(pthread_mutex_t))
    );
    assert_eq!(
        ::std::mem::align_of::<pthread_mutex_t>(),
        8usize,
        concat!("Alignment of ", stringify!(pthread_mutex_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_mutex_t>())).__data as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_mutex_t),
            "::",
            stringify!(__data)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_mutex_t>())).__size as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_mutex_t),
            "::",
            stringify!(__size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_mutex_t>())).__align as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_mutex_t),
            "::",
            stringify!(__align)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_cond_t {
    pub __data: __pthread_cond_s,
    pub __size: [::std::os::raw::c_char; 48usize],
    pub __align: ::std::os::raw::c_longlong,
    _bindgen_union_align: [u64; 6usize],
}
#[test]
fn bindgen_test_layout_pthread_cond_t() {
    assert_eq!(
        ::std::mem::size_of::<pthread_cond_t>(),
        48usize,
        concat!("Size of: ", stringify!(pthread_cond_t))
    );
    assert_eq!(
        ::std::mem::align_of::<pthread_cond_t>(),
        8usize,
        concat!("Alignment of ", stringify!(pthread_cond_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_cond_t>())).__data as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_cond_t),
            "::",
            stringify!(__data)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_cond_t>())).__size as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_cond_t),
            "::",
            stringify!(__size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_cond_t>())).__align as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_cond_t),
            "::",
            stringify!(__align)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_rwlock_t {
    pub __data: __pthread_rwlock_arch_t,
    pub __size: [::std::os::raw::c_char; 56usize],
    pub __align: ::std::os::raw::c_long,
    _bindgen_union_align: [u64; 7usize],
}
#[test]
fn bindgen_test_layout_pthread_rwlock_t() {
    assert_eq!(
        ::std::mem::size_of::<pthread_rwlock_t>(),
        56usize,
        concat!("Size of: ", stringify!(pthread_rwlock_t))
    );
    assert_eq!(
        ::std::mem::align_of::<pthread_rwlock_t>(),
        8usize,
        concat!("Alignment of ", stringify!(pthread_rwlock_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_rwlock_t>())).__data as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_rwlock_t),
            "::",
            stringify!(__data)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_rwlock_t>())).__size as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_rwlock_t),
            "::",
            stringify!(__size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_rwlock_t>())).__align as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_rwlock_t),
            "::",
            stringify!(__align)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_rwlockattr_t {
    pub __size: [::std::os::raw::c_char; 8usize],
    pub __align: ::std::os::raw::c_long,
    _bindgen_union_align: u64,
}
#[test]
fn bindgen_test_layout_pthread_rwlockattr_t() {
    assert_eq!(
        ::std::mem::size_of::<pthread_rwlockattr_t>(),
        8usize,
        concat!("Size of: ", stringify!(pthread_rwlockattr_t))
    );
    assert_eq!(
        ::std::mem::align_of::<pthread_rwlockattr_t>(),
        8usize,
        concat!("Alignment of ", stringify!(pthread_rwlockattr_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_rwlockattr_t>())).__size as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_rwlockattr_t),
            "::",
            stringify!(__size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_rwlockattr_t>())).__align as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_rwlockattr_t),
            "::",
            stringify!(__align)
        )
    );
}
pub type pthread_spinlock_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_barrier_t {
    pub __size: [::std::os::raw::c_char; 32usize],
    pub __align: ::std::os::raw::c_long,
    _bindgen_union_align: [u64; 4usize],
}
#[test]
fn bindgen_test_layout_pthread_barrier_t() {
    assert_eq!(
        ::std::mem::size_of::<pthread_barrier_t>(),
        32usize,
        concat!("Size of: ", stringify!(pthread_barrier_t))
    );
    assert_eq!(
        ::std::mem::align_of::<pthread_barrier_t>(),
        8usize,
        concat!("Alignment of ", stringify!(pthread_barrier_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_barrier_t>())).__size as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_barrier_t),
            "::",
            stringify!(__size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_barrier_t>())).__align as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_barrier_t),
            "::",
            stringify!(__align)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_barrierattr_t {
    pub __size: [::std::os::raw::c_char; 4usize],
    pub __align: ::std::os::raw::c_int,
    _bindgen_union_align: u32,
}
#[test]
fn bindgen_test_layout_pthread_barrierattr_t() {
    assert_eq!(
        ::std::mem::size_of::<pthread_barrierattr_t>(),
        4usize,
        concat!("Size of: ", stringify!(pthread_barrierattr_t))
    );
    assert_eq!(
        ::std::mem::align_of::<pthread_barrierattr_t>(),
        4usize,
        concat!("Alignment of ", stringify!(pthread_barrierattr_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_barrierattr_t>())).__size as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_barrierattr_t),
            "::",
            stringify!(__size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_barrierattr_t>())).__align as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_barrierattr_t),
            "::",
            stringify!(__align)
        )
    );
}
extern "C" {
    pub fn random() -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn srandom(__seed: ::std::os::raw::c_uint);
}
extern "C" {
    pub fn initstate(
        __seed: ::std::os::raw::c_uint,
        __statebuf: *mut ::std::os::raw::c_char,
        __statelen: usize,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn setstate(__statebuf: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct random_data {
    pub fptr: *mut i32,
    pub rptr: *mut i32,
    pub state: *mut i32,
    pub rand_type: ::std::os::raw::c_int,
    pub rand_deg: ::std::os::raw::c_int,
    pub rand_sep: ::std::os::raw::c_int,
    pub end_ptr: *mut i32,
}
#[test]
fn bindgen_test_layout_random_data() {
    assert_eq!(
        ::std::mem::size_of::<random_data>(),
        48usize,
        concat!("Size of: ", stringify!(random_data))
    );
    assert_eq!(
        ::std::mem::align_of::<random_data>(),
        8usize,
        concat!("Alignment of ", stringify!(random_data))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<random_data>())).fptr as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(random_data),
            "::",
            stringify!(fptr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<random_data>())).rptr as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(random_data),
            "::",
            stringify!(rptr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<random_data>())).state as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(random_data),
            "::",
            stringify!(state)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<random_data>())).rand_type as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(random_data),
            "::",
            stringify!(rand_type)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<random_data>())).rand_deg as *const _ as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(random_data),
            "::",
            stringify!(rand_deg)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<random_data>())).rand_sep as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(random_data),
            "::",
            stringify!(rand_sep)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<random_data>())).end_ptr as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(random_data),
            "::",
            stringify!(end_ptr)
        )
    );
}
extern "C" {
    pub fn random_r(__buf: *mut random_data, __result: *mut i32) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn srandom_r(
        __seed: ::std::os::raw::c_uint,
        __buf: *mut random_data,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn initstate_r(
        __seed: ::std::os::raw::c_uint,
        __statebuf: *mut ::std::os::raw::c_char,
        __statelen: usize,
        __buf: *mut random_data,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setstate_r(
        __statebuf: *mut ::std::os::raw::c_char,
        __buf: *mut random_data,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rand() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn srand(__seed: ::std::os::raw::c_uint);
}
extern "C" {
    pub fn rand_r(__seed: *mut ::std::os::raw::c_uint) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn drand48() -> f64;
}
extern "C" {
    pub fn erand48(__xsubi: *mut ::std::os::raw::c_ushort) -> f64;
}
extern "C" {
    pub fn lrand48() -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn nrand48(__xsubi: *mut ::std::os::raw::c_ushort) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn mrand48() -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn jrand48(__xsubi: *mut ::std::os::raw::c_ushort) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn srand48(__seedval: ::std::os::raw::c_long);
}
extern "C" {
    pub fn seed48(__seed16v: *mut ::std::os::raw::c_ushort) -> *mut ::std::os::raw::c_ushort;
}
extern "C" {
    pub fn lcong48(__param: *mut ::std::os::raw::c_ushort);
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct drand48_data {
    pub __x: [::std::os::raw::c_ushort; 3usize],
    pub __old_x: [::std::os::raw::c_ushort; 3usize],
    pub __c: ::std::os::raw::c_ushort,
    pub __init: ::std::os::raw::c_ushort,
    pub __a: ::std::os::raw::c_ulonglong,
}
#[test]
fn bindgen_test_layout_drand48_data() {
    assert_eq!(
        ::std::mem::size_of::<drand48_data>(),
        24usize,
        concat!("Size of: ", stringify!(drand48_data))
    );
    assert_eq!(
        ::std::mem::align_of::<drand48_data>(),
        8usize,
        concat!("Alignment of ", stringify!(drand48_data))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<drand48_data>())).__x as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(drand48_data),
            "::",
            stringify!(__x)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<drand48_data>())).__old_x as *const _ as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(drand48_data),
            "::",
            stringify!(__old_x)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<drand48_data>())).__c as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(drand48_data),
            "::",
            stringify!(__c)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<drand48_data>())).__init as *const _ as usize },
        14usize,
        concat!(
            "Offset of field: ",
            stringify!(drand48_data),
            "::",
            stringify!(__init)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<drand48_data>())).__a as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(drand48_data),
            "::",
            stringify!(__a)
        )
    );
}
extern "C" {
    pub fn drand48_r(__buffer: *mut drand48_data, __result: *mut f64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn erand48_r(
        __xsubi: *mut ::std::os::raw::c_ushort,
        __buffer: *mut drand48_data,
        __result: *mut f64,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn lrand48_r(
        __buffer: *mut drand48_data,
        __result: *mut ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn nrand48_r(
        __xsubi: *mut ::std::os::raw::c_ushort,
        __buffer: *mut drand48_data,
        __result: *mut ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mrand48_r(
        __buffer: *mut drand48_data,
        __result: *mut ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn jrand48_r(
        __xsubi: *mut ::std::os::raw::c_ushort,
        __buffer: *mut drand48_data,
        __result: *mut ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn srand48_r(
        __seedval: ::std::os::raw::c_long,
        __buffer: *mut drand48_data,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn seed48_r(
        __seed16v: *mut ::std::os::raw::c_ushort,
        __buffer: *mut drand48_data,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn lcong48_r(
        __param: *mut ::std::os::raw::c_ushort,
        __buffer: *mut drand48_data,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn malloc(__size: ::std::os::raw::c_ulong) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn calloc(
        __nmemb: ::std::os::raw::c_ulong,
        __size: ::std::os::raw::c_ulong,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn realloc(
        __ptr: *mut ::std::os::raw::c_void,
        __size: ::std::os::raw::c_ulong,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn free(__ptr: *mut ::std::os::raw::c_void);
}
extern "C" {
    pub fn alloca(__size: ::std::os::raw::c_ulong) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn valloc(__size: usize) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn posix_memalign(
        __memptr: *mut *mut ::std::os::raw::c_void,
        __alignment: usize,
        __size: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn aligned_alloc(__alignment: usize, __size: usize) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn abort();
}
extern "C" {
    pub fn atexit(__func: ::std::option::Option<unsafe extern "C" fn()>) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn at_quick_exit(
        __func: ::std::option::Option<unsafe extern "C" fn()>,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn on_exit(
        __func: ::std::option::Option<
            unsafe extern "C" fn(
                __status: ::std::os::raw::c_int,
                __arg: *mut ::std::os::raw::c_void,
            ),
        >,
        __arg: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn exit(__status: ::std::os::raw::c_int);
}
extern "C" {
    pub fn quick_exit(__status: ::std::os::raw::c_int);
}
extern "C" {
    pub fn _Exit(__status: ::std::os::raw::c_int);
}
extern "C" {
    pub fn getenv(__name: *const ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn putenv(__string: *mut ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setenv(
        __name: *const ::std::os::raw::c_char,
        __value: *const ::std::os::raw::c_char,
        __replace: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn unsetenv(__name: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn clearenv() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mktemp(__template: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn mkstemp(__template: *mut ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mkstemps(
        __template: *mut ::std::os::raw::c_char,
        __suffixlen: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mkdtemp(__template: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn system(__command: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn realpath(
        __name: *const ::std::os::raw::c_char,
        __resolved: *mut ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
pub type __compar_fn_t = ::std::option::Option<
    unsafe extern "C" fn(
        arg1: *const ::std::os::raw::c_void,
        arg2: *const ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int,
>;
extern "C" {
    pub fn bsearch(
        __key: *const ::std::os::raw::c_void,
        __base: *const ::std::os::raw::c_void,
        __nmemb: usize,
        __size: usize,
        __compar: __compar_fn_t,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn qsort(
        __base: *mut ::std::os::raw::c_void,
        __nmemb: usize,
        __size: usize,
        __compar: __compar_fn_t,
    );
}
extern "C" {
    pub fn abs(__x: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn labs(__x: ::std::os::raw::c_long) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn llabs(__x: ::std::os::raw::c_longlong) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn div(__numer: ::std::os::raw::c_int, __denom: ::std::os::raw::c_int) -> div_t;
}
extern "C" {
    pub fn ldiv(__numer: ::std::os::raw::c_long, __denom: ::std::os::raw::c_long) -> ldiv_t;
}
extern "C" {
    pub fn lldiv(
        __numer: ::std::os::raw::c_longlong,
        __denom: ::std::os::raw::c_longlong,
    ) -> lldiv_t;
}
extern "C" {
    pub fn ecvt(
        __value: f64,
        __ndigit: ::std::os::raw::c_int,
        __decpt: *mut ::std::os::raw::c_int,
        __sign: *mut ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn fcvt(
        __value: f64,
        __ndigit: ::std::os::raw::c_int,
        __decpt: *mut ::std::os::raw::c_int,
        __sign: *mut ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn gcvt(
        __value: f64,
        __ndigit: ::std::os::raw::c_int,
        __buf: *mut ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn qecvt(
        __value: u128,
        __ndigit: ::std::os::raw::c_int,
        __decpt: *mut ::std::os::raw::c_int,
        __sign: *mut ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn qfcvt(
        __value: u128,
        __ndigit: ::std::os::raw::c_int,
        __decpt: *mut ::std::os::raw::c_int,
        __sign: *mut ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn qgcvt(
        __value: u128,
        __ndigit: ::std::os::raw::c_int,
        __buf: *mut ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn ecvt_r(
        __value: f64,
        __ndigit: ::std::os::raw::c_int,
        __decpt: *mut ::std::os::raw::c_int,
        __sign: *mut ::std::os::raw::c_int,
        __buf: *mut ::std::os::raw::c_char,
        __len: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fcvt_r(
        __value: f64,
        __ndigit: ::std::os::raw::c_int,
        __decpt: *mut ::std::os::raw::c_int,
        __sign: *mut ::std::os::raw::c_int,
        __buf: *mut ::std::os::raw::c_char,
        __len: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn qecvt_r(
        __value: u128,
        __ndigit: ::std::os::raw::c_int,
        __decpt: *mut ::std::os::raw::c_int,
        __sign: *mut ::std::os::raw::c_int,
        __buf: *mut ::std::os::raw::c_char,
        __len: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn qfcvt_r(
        __value: u128,
        __ndigit: ::std::os::raw::c_int,
        __decpt: *mut ::std::os::raw::c_int,
        __sign: *mut ::std::os::raw::c_int,
        __buf: *mut ::std::os::raw::c_char,
        __len: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mblen(__s: *const ::std::os::raw::c_char, __n: usize) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mbtowc(
        __pwc: *mut wchar_t,
        __s: *const ::std::os::raw::c_char,
        __n: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wctomb(__s: *mut ::std::os::raw::c_char, __wchar: wchar_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mbstowcs(__pwcs: *mut wchar_t, __s: *const ::std::os::raw::c_char, __n: usize) -> usize;
}
extern "C" {
    pub fn wcstombs(__s: *mut ::std::os::raw::c_char, __pwcs: *const wchar_t, __n: usize) -> usize;
}
extern "C" {
    pub fn rpmatch(__response: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getsubopt(
        __optionp: *mut *mut ::std::os::raw::c_char,
        __tokens: *const *mut ::std::os::raw::c_char,
        __valuep: *mut *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getloadavg(__loadavg: *mut f64, __nelem: ::std::os::raw::c_int)
        -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn memcpy(
        __dest: *mut ::std::os::raw::c_void,
        __src: *const ::std::os::raw::c_void,
        __n: ::std::os::raw::c_ulong,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn memmove(
        __dest: *mut ::std::os::raw::c_void,
        __src: *const ::std::os::raw::c_void,
        __n: ::std::os::raw::c_ulong,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn memccpy(
        __dest: *mut ::std::os::raw::c_void,
        __src: *const ::std::os::raw::c_void,
        __c: ::std::os::raw::c_int,
        __n: usize,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn memset(
        __s: *mut ::std::os::raw::c_void,
        __c: ::std::os::raw::c_int,
        __n: ::std::os::raw::c_ulong,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn memcmp(
        __s1: *const ::std::os::raw::c_void,
        __s2: *const ::std::os::raw::c_void,
        __n: ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn memchr(
        __s: *const ::std::os::raw::c_void,
        __c: ::std::os::raw::c_int,
        __n: ::std::os::raw::c_ulong,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn strcpy(
        __dest: *mut ::std::os::raw::c_char,
        __src: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strncpy(
        __dest: *mut ::std::os::raw::c_char,
        __src: *const ::std::os::raw::c_char,
        __n: ::std::os::raw::c_ulong,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strcat(
        __dest: *mut ::std::os::raw::c_char,
        __src: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strncat(
        __dest: *mut ::std::os::raw::c_char,
        __src: *const ::std::os::raw::c_char,
        __n: ::std::os::raw::c_ulong,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strcmp(
        __s1: *const ::std::os::raw::c_char,
        __s2: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn strncmp(
        __s1: *const ::std::os::raw::c_char,
        __s2: *const ::std::os::raw::c_char,
        __n: ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn strcoll(
        __s1: *const ::std::os::raw::c_char,
        __s2: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn strxfrm(
        __dest: *mut ::std::os::raw::c_char,
        __src: *const ::std::os::raw::c_char,
        __n: ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_ulong;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __locale_struct {
    pub __locales: [*mut __locale_data; 13usize],
    pub __ctype_b: *const ::std::os::raw::c_ushort,
    pub __ctype_tolower: *const ::std::os::raw::c_int,
    pub __ctype_toupper: *const ::std::os::raw::c_int,
    pub __names: [*const ::std::os::raw::c_char; 13usize],
}
#[test]
fn bindgen_test_layout___locale_struct() {
    assert_eq!(
        ::std::mem::size_of::<__locale_struct>(),
        232usize,
        concat!("Size of: ", stringify!(__locale_struct))
    );
    assert_eq!(
        ::std::mem::align_of::<__locale_struct>(),
        8usize,
        concat!("Alignment of ", stringify!(__locale_struct))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__locale_struct>())).__locales as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__locale_struct),
            "::",
            stringify!(__locales)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__locale_struct>())).__ctype_b as *const _ as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(__locale_struct),
            "::",
            stringify!(__ctype_b)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__locale_struct>())).__ctype_tolower as *const _ as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(__locale_struct),
            "::",
            stringify!(__ctype_tolower)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__locale_struct>())).__ctype_toupper as *const _ as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(__locale_struct),
            "::",
            stringify!(__ctype_toupper)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__locale_struct>())).__names as *const _ as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(__locale_struct),
            "::",
            stringify!(__names)
        )
    );
}
pub type __locale_t = *mut __locale_struct;
pub type locale_t = __locale_t;
extern "C" {
    pub fn strcoll_l(
        __s1: *const ::std::os::raw::c_char,
        __s2: *const ::std::os::raw::c_char,
        __l: locale_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn strxfrm_l(
        __dest: *mut ::std::os::raw::c_char,
        __src: *const ::std::os::raw::c_char,
        __n: usize,
        __l: locale_t,
    ) -> usize;
}
extern "C" {
    pub fn strdup(__s: *const ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strndup(
        __string: *const ::std::os::raw::c_char,
        __n: ::std::os::raw::c_ulong,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strchr(
        __s: *const ::std::os::raw::c_char,
        __c: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strrchr(
        __s: *const ::std::os::raw::c_char,
        __c: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strcspn(
        __s: *const ::std::os::raw::c_char,
        __reject: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn strspn(
        __s: *const ::std::os::raw::c_char,
        __accept: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn strpbrk(
        __s: *const ::std::os::raw::c_char,
        __accept: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strstr(
        __haystack: *const ::std::os::raw::c_char,
        __needle: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strtok(
        __s: *mut ::std::os::raw::c_char,
        __delim: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn __strtok_r(
        __s: *mut ::std::os::raw::c_char,
        __delim: *const ::std::os::raw::c_char,
        __save_ptr: *mut *mut ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strtok_r(
        __s: *mut ::std::os::raw::c_char,
        __delim: *const ::std::os::raw::c_char,
        __save_ptr: *mut *mut ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strlen(__s: *const ::std::os::raw::c_char) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn strnlen(__string: *const ::std::os::raw::c_char, __maxlen: usize) -> usize;
}
extern "C" {
    pub fn strerror(__errnum: ::std::os::raw::c_int) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    #[link_name = "\u{1}__xpg_strerror_r"]
    pub fn strerror_r(
        __errnum: ::std::os::raw::c_int,
        __buf: *mut ::std::os::raw::c_char,
        __buflen: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn strerror_l(
        __errnum: ::std::os::raw::c_int,
        __l: locale_t,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn bcmp(
        __s1: *const ::std::os::raw::c_void,
        __s2: *const ::std::os::raw::c_void,
        __n: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn bcopy(
        __src: *const ::std::os::raw::c_void,
        __dest: *mut ::std::os::raw::c_void,
        __n: usize,
    );
}
extern "C" {
    pub fn bzero(__s: *mut ::std::os::raw::c_void, __n: ::std::os::raw::c_ulong);
}
extern "C" {
    pub fn index(
        __s: *const ::std::os::raw::c_char,
        __c: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn rindex(
        __s: *const ::std::os::raw::c_char,
        __c: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn ffs(__i: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ffsl(__l: ::std::os::raw::c_long) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ffsll(__ll: ::std::os::raw::c_longlong) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn strcasecmp(
        __s1: *const ::std::os::raw::c_char,
        __s2: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn strncasecmp(
        __s1: *const ::std::os::raw::c_char,
        __s2: *const ::std::os::raw::c_char,
        __n: ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn strcasecmp_l(
        __s1: *const ::std::os::raw::c_char,
        __s2: *const ::std::os::raw::c_char,
        __loc: locale_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn strncasecmp_l(
        __s1: *const ::std::os::raw::c_char,
        __s2: *const ::std::os::raw::c_char,
        __n: usize,
        __loc: locale_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn explicit_bzero(__s: *mut ::std::os::raw::c_void, __n: usize);
}
extern "C" {
    pub fn strsep(
        __stringp: *mut *mut ::std::os::raw::c_char,
        __delim: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strsignal(__sig: ::std::os::raw::c_int) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn __stpcpy(
        __dest: *mut ::std::os::raw::c_char,
        __src: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn stpcpy(
        __dest: *mut ::std::os::raw::c_char,
        __src: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn __stpncpy(
        __dest: *mut ::std::os::raw::c_char,
        __src: *const ::std::os::raw::c_char,
        __n: usize,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn stpncpy(
        __dest: *mut ::std::os::raw::c_char,
        __src: *const ::std::os::raw::c_char,
        __n: ::std::os::raw::c_ulong,
    ) -> *mut ::std::os::raw::c_char;
}
pub type int_least8_t = ::std::os::raw::c_schar;
pub type int_least16_t = ::std::os::raw::c_short;
pub type int_least32_t = ::std::os::raw::c_int;
pub type int_least64_t = ::std::os::raw::c_long;
pub type uint_least8_t = ::std::os::raw::c_uchar;
pub type uint_least16_t = ::std::os::raw::c_ushort;
pub type uint_least32_t = ::std::os::raw::c_uint;
pub type uint_least64_t = ::std::os::raw::c_ulong;
pub type int_fast8_t = ::std::os::raw::c_schar;
pub type int_fast16_t = ::std::os::raw::c_long;
pub type int_fast32_t = ::std::os::raw::c_long;
pub type int_fast64_t = ::std::os::raw::c_long;
pub type uint_fast8_t = ::std::os::raw::c_uchar;
pub type uint_fast16_t = ::std::os::raw::c_ulong;
pub type uint_fast32_t = ::std::os::raw::c_ulong;
pub type uint_fast64_t = ::std::os::raw::c_ulong;
pub type intmax_t = __intmax_t;
pub type uintmax_t = __uintmax_t;
pub type __gwchar_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct imaxdiv_t {
    pub quot: ::std::os::raw::c_long,
    pub rem: ::std::os::raw::c_long,
}
#[test]
fn bindgen_test_layout_imaxdiv_t() {
    assert_eq!(
        ::std::mem::size_of::<imaxdiv_t>(),
        16usize,
        concat!("Size of: ", stringify!(imaxdiv_t))
    );
    assert_eq!(
        ::std::mem::align_of::<imaxdiv_t>(),
        8usize,
        concat!("Alignment of ", stringify!(imaxdiv_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<imaxdiv_t>())).quot as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(imaxdiv_t),
            "::",
            stringify!(quot)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<imaxdiv_t>())).rem as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(imaxdiv_t),
            "::",
            stringify!(rem)
        )
    );
}
extern "C" {
    pub fn imaxabs(__n: intmax_t) -> intmax_t;
}
extern "C" {
    pub fn imaxdiv(__numer: intmax_t, __denom: intmax_t) -> imaxdiv_t;
}
extern "C" {
    pub fn strtoimax(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
        __base: ::std::os::raw::c_int,
    ) -> intmax_t;
}
extern "C" {
    pub fn strtoumax(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
        __base: ::std::os::raw::c_int,
    ) -> uintmax_t;
}
extern "C" {
    pub fn wcstoimax(
        __nptr: *const __gwchar_t,
        __endptr: *mut *mut __gwchar_t,
        __base: ::std::os::raw::c_int,
    ) -> intmax_t;
}
extern "C" {
    pub fn wcstoumax(
        __nptr: *const __gwchar_t,
        __endptr: *mut *mut __gwchar_t,
        __base: ::std::os::raw::c_int,
    ) -> uintmax_t;
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum mycore_status {
    MyCORE_STATUS_OK = 0,
    MyCORE_STATUS_ERROR = 1,
    MyCORE_STATUS_ERROR_MEMORY_ALLOCATION = 2,
    MyCORE_STATUS_THREAD_ERROR_MEMORY_ALLOCATION = 9,
    MyCORE_STATUS_THREAD_ERROR_LIST_INIT = 10,
    MyCORE_STATUS_THREAD_ERROR_ATTR_MALLOC = 11,
    MyCORE_STATUS_THREAD_ERROR_ATTR_INIT = 12,
    MyCORE_STATUS_THREAD_ERROR_ATTR_SET = 13,
    MyCORE_STATUS_THREAD_ERROR_ATTR_DESTROY = 14,
    MyCORE_STATUS_THREAD_ERROR_NO_SLOTS = 15,
    MyCORE_STATUS_THREAD_ERROR_BATCH_INIT = 16,
    MyCORE_STATUS_THREAD_ERROR_WORKER_MALLOC = 17,
    MyCORE_STATUS_THREAD_ERROR_WORKER_SEM_CREATE = 18,
    MyCORE_STATUS_THREAD_ERROR_WORKER_THREAD_CREATE = 19,
    MyCORE_STATUS_THREAD_ERROR_MASTER_THREAD_CREATE = 20,
    MyCORE_STATUS_THREAD_ERROR_SEM_PREFIX_MALLOC = 50,
    MyCORE_STATUS_THREAD_ERROR_SEM_CREATE = 51,
    MyCORE_STATUS_THREAD_ERROR_QUEUE_MALLOC = 60,
    MyCORE_STATUS_THREAD_ERROR_QUEUE_NODES_MALLOC = 61,
    MyCORE_STATUS_THREAD_ERROR_QUEUE_NODE_MALLOC = 62,
    MyCORE_STATUS_THREAD_ERROR_MUTEX_MALLOC = 70,
    MyCORE_STATUS_THREAD_ERROR_MUTEX_INIT = 71,
    MyCORE_STATUS_THREAD_ERROR_MUTEX_LOCK = 72,
    MyCORE_STATUS_THREAD_ERROR_MUTEX_UNLOCK = 73,
    MyCORE_STATUS_PERF_ERROR_COMPILED_WITHOUT_PERF = 80,
    MyCORE_STATUS_PERF_ERROR_FIND_CPU_CLOCK = 81,
    MyCORE_STATUS_MCOBJECT_ERROR_CACHE_CREATE = 85,
    MyCORE_STATUS_MCOBJECT_ERROR_CHUNK_CREATE = 86,
    MyCORE_STATUS_MCOBJECT_ERROR_CHUNK_INIT = 87,
    MyCORE_STATUS_MCOBJECT_ERROR_CACHE_REALLOC = 88,
    MyCORE_STATUS_ASYNC_ERROR_LOCK = 96,
    MyCORE_STATUS_ASYNC_ERROR_UNLOCK = 97,
    MyCORE_STATUS_ERROR_NO_FREE_SLOT = 98,
}
pub use self::mycore_status as mycore_status_t;
pub type mystatus_t = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mythread_queue_list_entry {
    _unused: [u8; 0],
}
pub type mythread_queue_list_entry_t = mythread_queue_list_entry;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mythread_queue_thread_param {
    _unused: [u8; 0],
}
pub type mythread_queue_thread_param_t = mythread_queue_thread_param;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mythread_queue_list {
    _unused: [u8; 0],
}
pub type mythread_queue_list_t = mythread_queue_list;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mythread_queue_node {
    _unused: [u8; 0],
}
pub type mythread_queue_node_t = mythread_queue_node;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mythread_queue {
    _unused: [u8; 0],
}
pub type mythread_queue_t = mythread_queue;
pub type mythread_id_t = usize;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mythread_context {
    _unused: [u8; 0],
}
pub type mythread_context_t = mythread_context;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mythread_entry {
    _unused: [u8; 0],
}
pub type mythread_entry_t = mythread_entry;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mythread {
    _unused: [u8; 0],
}
pub type mythread_t = mythread;
pub type mycore_string_raw_t = mycore_string_raw;
pub type mycore_string_t = mycore_string;
pub type mycore_incoming_buffer_t = mycore_incoming_buffer;
pub type mycore_callback_serialize_f = ::std::option::Option<
    unsafe extern "C" fn(
        buffer: *const ::std::os::raw::c_char,
        size: usize,
        ctx: *mut ::std::os::raw::c_void,
    ) -> mystatus_t,
>;
extern "C" {
    pub fn mycore_malloc(size: usize) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn mycore_realloc(
        dst: *mut ::std::os::raw::c_void,
        size: usize,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn mycore_calloc(num: usize, size: usize) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn mycore_free(dst: *mut ::std::os::raw::c_void) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn mycore_fopen(
        filename: *const ::std::os::raw::c_char,
        mode: *const ::std::os::raw::c_char,
    ) -> *mut FILE;
}
extern "C" {
    pub fn mycore_fclose(stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mycore_fread(
        buffer: *mut ::std::os::raw::c_void,
        size: usize,
        count: usize,
        stream: *mut FILE,
    ) -> usize;
}
extern "C" {
    pub fn mycore_fwrite(
        buffer: *const ::std::os::raw::c_void,
        size: usize,
        count: usize,
        stream: *mut FILE,
    ) -> usize;
}
extern "C" {
    pub fn mycore_fflush(stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mycore_fseek(
        stream: *mut FILE,
        offset: ::std::os::raw::c_long,
        origin: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mycore_ftell(stream: *mut FILE) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn mycore_ferror(stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mycore_setbuf(stream: *mut FILE, buffer: *mut ::std::os::raw::c_char);
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mcobject_chunk {
    pub begin: *mut ::std::os::raw::c_uchar,
    pub length: usize,
    pub size: usize,
    pub next: *mut mcobject_chunk,
    pub prev: *mut mcobject_chunk,
}
#[test]
fn bindgen_test_layout_mcobject_chunk() {
    assert_eq!(
        ::std::mem::size_of::<mcobject_chunk>(),
        40usize,
        concat!("Size of: ", stringify!(mcobject_chunk))
    );
    assert_eq!(
        ::std::mem::align_of::<mcobject_chunk>(),
        8usize,
        concat!("Alignment of ", stringify!(mcobject_chunk))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mcobject_chunk>())).begin as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(mcobject_chunk),
            "::",
            stringify!(begin)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mcobject_chunk>())).length as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(mcobject_chunk),
            "::",
            stringify!(length)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mcobject_chunk>())).size as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(mcobject_chunk),
            "::",
            stringify!(size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mcobject_chunk>())).next as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(mcobject_chunk),
            "::",
            stringify!(next)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mcobject_chunk>())).prev as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(mcobject_chunk),
            "::",
            stringify!(prev)
        )
    );
}
pub type mcobject_chunk_t = mcobject_chunk;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mcobject {
    pub chunk: *mut mcobject_chunk_t,
    pub cache: *mut *mut ::std::os::raw::c_void,
    pub cache_size: usize,
    pub cache_length: usize,
    pub struct_size: usize,
    pub chunk_size: usize,
}
#[test]
fn bindgen_test_layout_mcobject() {
    assert_eq!(
        ::std::mem::size_of::<mcobject>(),
        48usize,
        concat!("Size of: ", stringify!(mcobject))
    );
    assert_eq!(
        ::std::mem::align_of::<mcobject>(),
        8usize,
        concat!("Alignment of ", stringify!(mcobject))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mcobject>())).chunk as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(mcobject),
            "::",
            stringify!(chunk)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mcobject>())).cache as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(mcobject),
            "::",
            stringify!(cache)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mcobject>())).cache_size as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(mcobject),
            "::",
            stringify!(cache_size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mcobject>())).cache_length as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(mcobject),
            "::",
            stringify!(cache_length)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mcobject>())).struct_size as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(mcobject),
            "::",
            stringify!(struct_size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mcobject>())).chunk_size as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(mcobject),
            "::",
            stringify!(chunk_size)
        )
    );
}
pub type mcobject_t = mcobject;
extern "C" {
    pub fn mcobject_create() -> *mut mcobject_t;
}
extern "C" {
    pub fn mcobject_init(
        mcobject: *mut mcobject_t,
        chunk_size: usize,
        struct_size: usize,
    ) -> mystatus_t;
}
extern "C" {
    pub fn mcobject_clean(mcobject: *mut mcobject_t);
}
extern "C" {
    pub fn mcobject_destroy(mcobject: *mut mcobject_t, destroy_self: bool) -> *mut mcobject_t;
}
extern "C" {
    pub fn mcobject_chunk_malloc(mcobject: *mut mcobject_t, status: *mut mystatus_t);
}
extern "C" {
    pub fn mcobject_malloc(
        mcobject: *mut mcobject_t,
        status: *mut mystatus_t,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn mcobject_free(
        mcobject: *mut mcobject_t,
        entry: *mut ::std::os::raw::c_void,
    ) -> mystatus_t;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mycore_incoming_buffer {
    pub data: *const ::std::os::raw::c_char,
    pub length: usize,
    pub size: usize,
    pub offset: usize,
    pub prev: *mut mycore_incoming_buffer,
    pub next: *mut mycore_incoming_buffer,
}
#[test]
fn bindgen_test_layout_mycore_incoming_buffer() {
    assert_eq!(
        ::std::mem::size_of::<mycore_incoming_buffer>(),
        48usize,
        concat!("Size of: ", stringify!(mycore_incoming_buffer))
    );
    assert_eq!(
        ::std::mem::align_of::<mycore_incoming_buffer>(),
        8usize,
        concat!("Alignment of ", stringify!(mycore_incoming_buffer))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mycore_incoming_buffer>())).data as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(mycore_incoming_buffer),
            "::",
            stringify!(data)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mycore_incoming_buffer>())).length as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(mycore_incoming_buffer),
            "::",
            stringify!(length)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mycore_incoming_buffer>())).size as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(mycore_incoming_buffer),
            "::",
            stringify!(size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mycore_incoming_buffer>())).offset as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(mycore_incoming_buffer),
            "::",
            stringify!(offset)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mycore_incoming_buffer>())).prev as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(mycore_incoming_buffer),
            "::",
            stringify!(prev)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mycore_incoming_buffer>())).next as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(mycore_incoming_buffer),
            "::",
            stringify!(next)
        )
    );
}
extern "C" {
    pub fn mycore_incoming_buffer_add(
        current: *mut mycore_incoming_buffer_t,
        mcobject: *mut mcobject_t,
        html: *const ::std::os::raw::c_char,
        html_size: usize,
    ) -> *mut mycore_incoming_buffer_t;
}
extern "C" {
    pub fn mycore_incoming_buffer_clean(current: *mut mycore_incoming_buffer_t);
}
extern "C" {
    pub fn mycore_incoming_buffer_split(
        current: *mut mycore_incoming_buffer_t,
        mcobject: *mut mcobject_t,
        global_pos: usize,
    ) -> *mut mycore_incoming_buffer_t;
}
extern "C" {
    #[doc = " Get Incoming Buffer by position"]
    #[doc = ""]
    #[doc = " @param[in] current mycore_incoming_buffer_t*"]
    #[doc = " @param[in] begin position"]
    #[doc = ""]
    #[doc = " @return mycore_incoming_buffer_t if successful, otherwise a NULL value"]
    pub fn mycore_incoming_buffer_find_by_position(
        inc_buf: *mut mycore_incoming_buffer_t,
        begin: usize,
    ) -> *mut mycore_incoming_buffer_t;
}
extern "C" {
    #[doc = " Get data of Incoming Buffer"]
    #[doc = ""]
    #[doc = " @param[in] mycore_incoming_buffer_t*"]
    #[doc = ""]
    #[doc = " @return const char* if successful, otherwise a NULL value"]
    pub fn mycore_incoming_buffer_data(
        inc_buf: *mut mycore_incoming_buffer_t,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    #[doc = " Get data length of Incoming Buffer"]
    #[doc = ""]
    #[doc = " @param[in] mycore_incoming_buffer_t*"]
    #[doc = ""]
    #[doc = " @return size_t"]
    pub fn mycore_incoming_buffer_length(inc_buf: *mut mycore_incoming_buffer_t) -> usize;
}
extern "C" {
    #[doc = " Get data size of Incoming Buffer"]
    #[doc = ""]
    #[doc = " @param[in] mycore_incoming_buffer_t*"]
    #[doc = ""]
    #[doc = " @return size_t"]
    pub fn mycore_incoming_buffer_size(inc_buf: *mut mycore_incoming_buffer_t) -> usize;
}
extern "C" {
    #[doc = " Get data offset of Incoming Buffer. Global position of begin Incoming Buffer."]
    #[doc = " See description for MyHTML_INCOMING title"]
    #[doc = ""]
    #[doc = " @param[in] mycore_incoming_buffer_t*"]
    #[doc = ""]
    #[doc = " @return size_t"]
    pub fn mycore_incoming_buffer_offset(inc_buf: *mut mycore_incoming_buffer_t) -> usize;
}
extern "C" {
    #[doc = " Get Relative Position for Incoming Buffer."]
    #[doc = " Incoming Buffer should be prepared by mycore_incoming_buffer_find_by_position"]
    #[doc = ""]
    #[doc = " @param[in] mycore_incoming_buffer_t*"]
    #[doc = " @param[in] global begin"]
    #[doc = ""]
    #[doc = " @return size_t"]
    pub fn mycore_incoming_buffer_relative_begin(
        inc_buf: *mut mycore_incoming_buffer_t,
        begin: usize,
    ) -> usize;
}
extern "C" {
    #[doc = " This function returns number of available data by Incoming Buffer"]
    #[doc = " Incoming buffer may be incomplete. See mycore_incoming_buffer_next"]
    #[doc = ""]
    #[doc = " @param[in] mycore_incoming_buffer_t*"]
    #[doc = " @param[in] global begin"]
    #[doc = ""]
    #[doc = " @return size_t"]
    pub fn mycore_incoming_buffer_available_length(
        inc_buf: *mut mycore_incoming_buffer_t,
        relative_begin: usize,
        length: usize,
    ) -> usize;
}
extern "C" {
    #[doc = " Get next buffer"]
    #[doc = ""]
    #[doc = " @param[in] mycore_incoming_buffer_t*"]
    #[doc = ""]
    #[doc = " @return mycore_incoming_buffer_t*"]
    pub fn mycore_incoming_buffer_next(
        inc_buf: *mut mycore_incoming_buffer_t,
    ) -> *mut mycore_incoming_buffer_t;
}
extern "C" {
    #[doc = " Get prev buffer"]
    #[doc = ""]
    #[doc = " @param[in] mycore_incoming_buffer_t*"]
    #[doc = ""]
    #[doc = " @return mycore_incoming_buffer_t*"]
    pub fn mycore_incoming_buffer_prev(
        inc_buf: *mut mycore_incoming_buffer_t,
    ) -> *mut mycore_incoming_buffer_t;
}
extern "C" {
    pub fn mycore_incoming_buffer_convert_one_escaped_to_code_point(
        inc_buf: *mut *mut mycore_incoming_buffer_t,
        relative_pos: *mut usize,
    ) -> usize;
}
extern "C" {
    pub fn mycore_incoming_buffer_escaped_case_cmp(
        inc_buf: *mut *mut mycore_incoming_buffer_t,
        to: *const ::std::os::raw::c_char,
        to_size: usize,
        relative_pos: *mut usize,
    ) -> usize;
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum mcsync_status {
    MCSYNC_STATUS_OK = 0,
    MCSYNC_STATUS_NOT_OK = 1,
    MCSYNC_STATUS_ERROR_MEM_ALLOCATE = 2,
}
pub use self::mcsync_status as mcsync_status_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mcsync {
    pub spinlock: *mut ::std::os::raw::c_int,
    pub mutex: *mut ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout_mcsync() {
    assert_eq!(
        ::std::mem::size_of::<mcsync>(),
        16usize,
        concat!("Size of: ", stringify!(mcsync))
    );
    assert_eq!(
        ::std::mem::align_of::<mcsync>(),
        8usize,
        concat!("Alignment of ", stringify!(mcsync))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mcsync>())).spinlock as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(mcsync),
            "::",
            stringify!(spinlock)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mcsync>())).mutex as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(mcsync),
            "::",
            stringify!(mutex)
        )
    );
}
pub type mcsync_t = mcsync;
extern "C" {
    pub fn mcsync_create() -> *mut mcsync_t;
}
extern "C" {
    pub fn mcsync_init(mcsync: *mut mcsync_t) -> mcsync_status_t;
}
extern "C" {
    pub fn mcsync_clean(mcsync: *mut mcsync_t);
}
extern "C" {
    pub fn mcsync_destroy(
        mcsync: *mut mcsync_t,
        destroy_self: ::std::os::raw::c_int,
    ) -> *mut mcsync_t;
}
extern "C" {
    pub fn mcsync_lock(mcsync: *mut mcsync_t) -> mcsync_status_t;
}
extern "C" {
    pub fn mcsync_unlock(mcsync: *mut mcsync_t) -> mcsync_status_t;
}
extern "C" {
    pub fn mcsync_spin_lock(spinlock: *mut ::std::os::raw::c_void) -> mcsync_status_t;
}
extern "C" {
    pub fn mcsync_spin_unlock(spinlock: *mut ::std::os::raw::c_void) -> mcsync_status_t;
}
extern "C" {
    pub fn mcsync_mutex_lock(mutex: *mut ::std::os::raw::c_void) -> mcsync_status_t;
}
extern "C" {
    pub fn mcsync_mutex_try_lock(mutex: *mut ::std::os::raw::c_void) -> mcsync_status_t;
}
extern "C" {
    pub fn mcsync_mutex_unlock(mutex: *mut ::std::os::raw::c_void) -> mcsync_status_t;
}
extern "C" {
    pub fn mcsync_spin_create() -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn mcsync_spin_init(spinlock: *mut ::std::os::raw::c_void) -> mcsync_status_t;
}
extern "C" {
    pub fn mcsync_spin_clean(spinlock: *mut ::std::os::raw::c_void);
}
extern "C" {
    pub fn mcsync_spin_destroy(spinlock: *mut ::std::os::raw::c_void);
}
extern "C" {
    pub fn mcsync_mutex_create() -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn mcsync_mutex_init(mutex: *mut ::std::os::raw::c_void) -> mcsync_status_t;
}
extern "C" {
    pub fn mcsync_mutex_clean(mutex: *mut ::std::os::raw::c_void);
}
extern "C" {
    pub fn mcsync_mutex_destroy(mutex: *mut ::std::os::raw::c_void);
}
pub type mchar_async_node_t = mchar_async_node;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mchar_async_cache_node {
    pub value: *mut ::std::os::raw::c_void,
    pub size: usize,
    pub left: usize,
    pub right: usize,
    pub parent: usize,
}
#[test]
fn bindgen_test_layout_mchar_async_cache_node() {
    assert_eq!(
        ::std::mem::size_of::<mchar_async_cache_node>(),
        40usize,
        concat!("Size of: ", stringify!(mchar_async_cache_node))
    );
    assert_eq!(
        ::std::mem::align_of::<mchar_async_cache_node>(),
        8usize,
        concat!("Alignment of ", stringify!(mchar_async_cache_node))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mchar_async_cache_node>())).value as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(mchar_async_cache_node),
            "::",
            stringify!(value)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mchar_async_cache_node>())).size as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(mchar_async_cache_node),
            "::",
            stringify!(size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mchar_async_cache_node>())).left as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(mchar_async_cache_node),
            "::",
            stringify!(left)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mchar_async_cache_node>())).right as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(mchar_async_cache_node),
            "::",
            stringify!(right)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mchar_async_cache_node>())).parent as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(mchar_async_cache_node),
            "::",
            stringify!(parent)
        )
    );
}
pub type mchar_async_cache_node_t = mchar_async_cache_node;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mchar_async_chunk {
    pub begin: *mut ::std::os::raw::c_char,
    pub length: usize,
    pub size: usize,
    pub next: *mut mchar_async_chunk,
    pub prev: *mut mchar_async_chunk,
}
#[test]
fn bindgen_test_layout_mchar_async_chunk() {
    assert_eq!(
        ::std::mem::size_of::<mchar_async_chunk>(),
        40usize,
        concat!("Size of: ", stringify!(mchar_async_chunk))
    );
    assert_eq!(
        ::std::mem::align_of::<mchar_async_chunk>(),
        8usize,
        concat!("Alignment of ", stringify!(mchar_async_chunk))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mchar_async_chunk>())).begin as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(mchar_async_chunk),
            "::",
            stringify!(begin)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mchar_async_chunk>())).length as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(mchar_async_chunk),
            "::",
            stringify!(length)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mchar_async_chunk>())).size as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(mchar_async_chunk),
            "::",
            stringify!(size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mchar_async_chunk>())).next as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(mchar_async_chunk),
            "::",
            stringify!(next)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mchar_async_chunk>())).prev as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(mchar_async_chunk),
            "::",
            stringify!(prev)
        )
    );
}
pub type mchar_async_chunk_t = mchar_async_chunk;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mchar_async_cache {
    pub nodes: *mut mchar_async_cache_node_t,
    pub nodes_size: usize,
    pub nodes_length: usize,
    pub nodes_root: usize,
    pub count: usize,
    pub index: *mut usize,
    pub index_length: usize,
    pub index_size: usize,
}
#[test]
fn bindgen_test_layout_mchar_async_cache() {
    assert_eq!(
        ::std::mem::size_of::<mchar_async_cache>(),
        64usize,
        concat!("Size of: ", stringify!(mchar_async_cache))
    );
    assert_eq!(
        ::std::mem::align_of::<mchar_async_cache>(),
        8usize,
        concat!("Alignment of ", stringify!(mchar_async_cache))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mchar_async_cache>())).nodes as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(mchar_async_cache),
            "::",
            stringify!(nodes)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mchar_async_cache>())).nodes_size as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(mchar_async_cache),
            "::",
            stringify!(nodes_size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mchar_async_cache>())).nodes_length as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(mchar_async_cache),
            "::",
            stringify!(nodes_length)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mchar_async_cache>())).nodes_root as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(mchar_async_cache),
            "::",
            stringify!(nodes_root)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mchar_async_cache>())).count as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(mchar_async_cache),
            "::",
            stringify!(count)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mchar_async_cache>())).index as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(mchar_async_cache),
            "::",
            stringify!(index)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mchar_async_cache>())).index_length as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(mchar_async_cache),
            "::",
            stringify!(index_length)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mchar_async_cache>())).index_size as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(mchar_async_cache),
            "::",
            stringify!(index_size)
        )
    );
}
pub type mchar_async_cache_t = mchar_async_cache;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mchar_async_node {
    pub chunk: *mut mchar_async_chunk_t,
    pub cache: mchar_async_cache_t,
}
#[test]
fn bindgen_test_layout_mchar_async_node() {
    assert_eq!(
        ::std::mem::size_of::<mchar_async_node>(),
        72usize,
        concat!("Size of: ", stringify!(mchar_async_node))
    );
    assert_eq!(
        ::std::mem::align_of::<mchar_async_node>(),
        8usize,
        concat!("Alignment of ", stringify!(mchar_async_node))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mchar_async_node>())).chunk as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(mchar_async_node),
            "::",
            stringify!(chunk)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mchar_async_node>())).cache as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(mchar_async_node),
            "::",
            stringify!(cache)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mchar_async {
    pub origin_size: usize,
    pub chunks: *mut *mut mchar_async_chunk_t,
    pub chunks_pos_size: usize,
    pub chunks_pos_length: usize,
    pub chunks_size: usize,
    pub chunks_length: usize,
    pub chunk_cache: mchar_async_cache_t,
    pub nodes: *mut mchar_async_node_t,
    pub nodes_length: usize,
    pub nodes_size: usize,
    pub nodes_cache: *mut usize,
    pub nodes_cache_length: usize,
    pub nodes_cache_size: usize,
    pub mcsync: *mut mcsync_t,
}
#[test]
fn bindgen_test_layout_mchar_async() {
    assert_eq!(
        ::std::mem::size_of::<mchar_async>(),
        168usize,
        concat!("Size of: ", stringify!(mchar_async))
    );
    assert_eq!(
        ::std::mem::align_of::<mchar_async>(),
        8usize,
        concat!("Alignment of ", stringify!(mchar_async))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mchar_async>())).origin_size as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(mchar_async),
            "::",
            stringify!(origin_size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mchar_async>())).chunks as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(mchar_async),
            "::",
            stringify!(chunks)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mchar_async>())).chunks_pos_size as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(mchar_async),
            "::",
            stringify!(chunks_pos_size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mchar_async>())).chunks_pos_length as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(mchar_async),
            "::",
            stringify!(chunks_pos_length)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mchar_async>())).chunks_size as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(mchar_async),
            "::",
            stringify!(chunks_size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mchar_async>())).chunks_length as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(mchar_async),
            "::",
            stringify!(chunks_length)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mchar_async>())).chunk_cache as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(mchar_async),
            "::",
            stringify!(chunk_cache)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mchar_async>())).nodes as *const _ as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(mchar_async),
            "::",
            stringify!(nodes)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mchar_async>())).nodes_length as *const _ as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(mchar_async),
            "::",
            stringify!(nodes_length)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mchar_async>())).nodes_size as *const _ as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(mchar_async),
            "::",
            stringify!(nodes_size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mchar_async>())).nodes_cache as *const _ as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(mchar_async),
            "::",
            stringify!(nodes_cache)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mchar_async>())).nodes_cache_length as *const _ as usize },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(mchar_async),
            "::",
            stringify!(nodes_cache_length)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mchar_async>())).nodes_cache_size as *const _ as usize },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(mchar_async),
            "::",
            stringify!(nodes_cache_size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mchar_async>())).mcsync as *const _ as usize },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(mchar_async),
            "::",
            stringify!(mcsync)
        )
    );
}
pub type mchar_async_t = mchar_async;
extern "C" {
    pub fn mchar_async_create() -> *mut mchar_async_t;
}
extern "C" {
    pub fn mchar_async_init(
        mchar_async: *mut mchar_async_t,
        chunk_len: usize,
        char_size: usize,
    ) -> mystatus_t;
}
extern "C" {
    pub fn mchar_async_clean(mchar_async: *mut mchar_async_t) -> mystatus_t;
}
extern "C" {
    pub fn mchar_async_destroy(
        mchar_async: *mut mchar_async_t,
        destroy_self: ::std::os::raw::c_int,
    ) -> *mut mchar_async_t;
}
extern "C" {
    pub fn mchar_async_malloc(
        mchar_async: *mut mchar_async_t,
        node_idx: usize,
        size: usize,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn mchar_async_realloc(
        mchar_async: *mut mchar_async_t,
        node_idx: usize,
        data: *mut ::std::os::raw::c_char,
        data_len: usize,
        new_size: usize,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn mchar_async_free(
        mchar_async: *mut mchar_async_t,
        node_idx: usize,
        entry: *mut ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn mchar_async_node_add(mchar_async: *mut mchar_async_t, status: *mut mystatus_t) -> usize;
}
extern "C" {
    pub fn mchar_async_node_clean(mchar_async: *mut mchar_async_t, node_idx: usize);
}
extern "C" {
    pub fn mchar_async_node_delete(mchar_async: *mut mchar_async_t, node_idx: usize);
}
extern "C" {
    pub fn mchar_async_chunk_malloc(
        mchar_async: *mut mchar_async_t,
        node: *mut mchar_async_node_t,
        length: usize,
    ) -> *mut mchar_async_chunk_t;
}
extern "C" {
    pub fn mchar_async_crop_first_chars(
        mchar_async: *mut mchar_async_t,
        node_idx: usize,
        data: *mut ::std::os::raw::c_char,
        crop_len: usize,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn mchar_async_crop_first_chars_without_cache(
        data: *mut ::std::os::raw::c_char,
        crop_len: usize,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn mchar_async_get_size_by_data(data: *const ::std::os::raw::c_char) -> usize;
}
extern "C" {
    pub fn mchar_async_cache_init(cache: *mut mchar_async_cache_t) -> mystatus_t;
}
extern "C" {
    pub fn mchar_async_cache_destroy(
        cache: *mut mchar_async_cache_t,
        self_destroy: bool,
    ) -> *mut mchar_async_cache_t;
}
extern "C" {
    pub fn mchar_async_cache_clean(cache: *mut mchar_async_cache_t);
}
extern "C" {
    pub fn mchar_async_cache_add(
        cache: *mut mchar_async_cache_t,
        value: *mut ::std::os::raw::c_void,
        size: usize,
    );
}
extern "C" {
    pub fn mchar_async_cache_delete(cache: *mut mchar_async_cache_t, size: usize) -> usize;
}
extern "C" {
    pub fn mycore_power(t: usize, k: usize) -> usize;
}
extern "C" {
    #[doc = " Compare two strings ignoring case of the first n characters"]
    #[doc = ""]
    #[doc = " @param[in] myhtml_collection_t*"]
    #[doc = " @param[in] count of add nodes"]
    #[doc = ""]
    #[doc = " @return 0 if match, otherwise index of break position"]
    pub fn mycore_strncasecmp(
        str1: *const ::std::os::raw::c_char,
        str2: *const ::std::os::raw::c_char,
        size: usize,
    ) -> usize;
}
extern "C" {
    #[doc = " Compare two strings ignoring case"]
    #[doc = ""]
    #[doc = " @param[in] myhtml_collection_t*"]
    #[doc = " @param[in] count of add nodes"]
    #[doc = ""]
    #[doc = " @return 0 if match, otherwise index of break position"]
    pub fn mycore_strcasecmp(
        str1: *const ::std::os::raw::c_char,
        str2: *const ::std::os::raw::c_char,
    ) -> usize;
}
extern "C" {
    pub fn mycore_strncmp(
        str1: *const ::std::os::raw::c_char,
        str2: *const ::std::os::raw::c_char,
        size: usize,
    ) -> usize;
}
extern "C" {
    pub fn mycore_strcmp(
        str1: *const ::std::os::raw::c_char,
        str2: *const ::std::os::raw::c_char,
    ) -> usize;
}
extern "C" {
    pub fn mycore_strcmp_ws(
        str1: *const ::std::os::raw::c_char,
        str2: *const ::std::os::raw::c_char,
    ) -> usize;
}
extern "C" {
    pub fn mycore_ustrcasecmp_without_checks_by_secondary(
        ustr1: *const ::std::os::raw::c_uchar,
        ustr2: *const ::std::os::raw::c_uchar,
    ) -> bool;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mycore_string {
    pub data: *mut ::std::os::raw::c_char,
    pub size: usize,
    pub length: usize,
    pub mchar: *mut mchar_async_t,
    pub node_idx: usize,
}
#[test]
fn bindgen_test_layout_mycore_string() {
    assert_eq!(
        ::std::mem::size_of::<mycore_string>(),
        40usize,
        concat!("Size of: ", stringify!(mycore_string))
    );
    assert_eq!(
        ::std::mem::align_of::<mycore_string>(),
        8usize,
        concat!("Alignment of ", stringify!(mycore_string))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mycore_string>())).data as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(mycore_string),
            "::",
            stringify!(data)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mycore_string>())).size as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(mycore_string),
            "::",
            stringify!(size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mycore_string>())).length as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(mycore_string),
            "::",
            stringify!(length)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mycore_string>())).mchar as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(mycore_string),
            "::",
            stringify!(mchar)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mycore_string>())).node_idx as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(mycore_string),
            "::",
            stringify!(node_idx)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mycore_string_raw {
    pub data: *mut ::std::os::raw::c_char,
    pub size: usize,
    pub length: usize,
}
#[test]
fn bindgen_test_layout_mycore_string_raw() {
    assert_eq!(
        ::std::mem::size_of::<mycore_string_raw>(),
        24usize,
        concat!("Size of: ", stringify!(mycore_string_raw))
    );
    assert_eq!(
        ::std::mem::align_of::<mycore_string_raw>(),
        8usize,
        concat!("Alignment of ", stringify!(mycore_string_raw))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mycore_string_raw>())).data as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(mycore_string_raw),
            "::",
            stringify!(data)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mycore_string_raw>())).size as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(mycore_string_raw),
            "::",
            stringify!(size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mycore_string_raw>())).length as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(mycore_string_raw),
            "::",
            stringify!(length)
        )
    );
}
pub type mycore_string_index_t = usize;
extern "C" {
    #[doc = " Init mycore_string_t structure"]
    #[doc = ""]
    #[doc = " @param[in] mchar_async_t*. It can be obtained from myhtml_tree_t object"]
    #[doc = "  (see myhtml_tree_get_mchar function) or create manualy"]
    #[doc = "  For each Tree creates its object, I recommend to use it (myhtml_tree_get_mchar)."]
    #[doc = ""]
    #[doc = " @param[in] node_id. For all threads (and Main thread) identifier that is unique."]
    #[doc = "  if created mchar_async_t object manually you know it, if not then take from the Tree"]
    #[doc = "  (see myhtml_tree_get_mchar_node_id)"]
    #[doc = ""]
    #[doc = " @param[in] mycore_string_t*. It can be obtained from myhtml_tree_node_t object"]
    #[doc = "  (see myhtml_node_string function) or create manualy"]
    #[doc = ""]
    #[doc = " @param[in] data size. Set the size you want for char*"]
    #[doc = ""]
    #[doc = " @return char* of the size if successful, otherwise a NULL value"]
    pub fn mycore_string_init(
        mchar: *mut mchar_async_t,
        node_idx: usize,
        str: *mut mycore_string_t,
        size: usize,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    #[doc = " Increase the current size for mycore_string_t object"]
    #[doc = ""]
    #[doc = " @param[in] mycore_string_t*. See description for mycore_string_init function"]
    #[doc = " @param[in] data size. Set the new size you want for mycore_string_t object"]
    #[doc = ""]
    #[doc = " @return char* of the size if successful, otherwise a NULL value"]
    pub fn mycore_string_realloc(
        str: *mut mycore_string_t,
        new_size: usize,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    #[doc = " Clean mycore_string_t object. In reality, data length set to 0"]
    #[doc = " Equivalently: mycore_string_length_set(str, 0);"]
    #[doc = ""]
    #[doc = " @param[in] mycore_string_t*. See description for mycore_string_init function"]
    pub fn mycore_string_clean(str: *mut mycore_string_t);
}
extern "C" {
    #[doc = " Clean mycore_string_t object. Equivalently: memset(str, 0, sizeof(mycore_string_t))"]
    #[doc = ""]
    #[doc = " @param[in] mycore_string_t*. See description for mycore_string_init function"]
    pub fn mycore_string_clean_all(str: *mut mycore_string_t);
}
extern "C" {
    #[doc = " Release all resources for mycore_string_t object"]
    #[doc = ""]
    #[doc = " @param[in] mycore_string_t*. See description for mycore_string_init function"]
    #[doc = " @param[in] call free function for current object or not"]
    #[doc = ""]
    #[doc = " @return NULL if destroy_obj set true, otherwise a current mycore_string_t object"]
    pub fn mycore_string_destroy(
        str: *mut mycore_string_t,
        destroy_obj: bool,
    ) -> *mut mycore_string_t;
}
extern "C" {
    #[doc = " Clean mycore_string_raw_t object. In reality, data length set to 0"]
    #[doc = ""]
    #[doc = " @param[in] mycore_string_raw_t*"]
    pub fn mycore_string_raw_clean(str_raw: *mut mycore_string_raw_t);
}
extern "C" {
    #[doc = " Full clean mycore_string_raw_t object."]
    #[doc = " Equivalently: memset(str_raw, 0, sizeof(mycore_string_raw_t))"]
    #[doc = ""]
    #[doc = " @param[in] mycore_string_raw_t*"]
    pub fn mycore_string_raw_clean_all(str_raw: *mut mycore_string_raw_t);
}
extern "C" {
    #[doc = " Free resources for mycore_string_raw_t object"]
    #[doc = ""]
    #[doc = " @param[in] mycore_string_raw_t*"]
    #[doc = " @param[in] call free function for current object or not"]
    #[doc = ""]
    #[doc = " @return NULL if destroy_obj set true, otherwise a current mycore_string_raw_t object"]
    pub fn mycore_string_raw_destroy(
        str_raw: *mut mycore_string_raw_t,
        destroy_obj: bool,
    ) -> *mut mycore_string_raw_t;
}
extern "C" {
    #[doc = " Allocate data (char*) from a mchar_async_t object"]
    #[doc = ""]
    #[doc = " @param[in] mchar_async_t*. See description for mycore_string_init function"]
    #[doc = " @param[in] node id. See description for mycore_string_init function"]
    #[doc = " @param[in] you size to want assign"]
    #[doc = ""]
    #[doc = " @return data if successful, otherwise a NULL value"]
    pub fn mycore_string_data_alloc(
        mchar: *mut mchar_async_t,
        node_id: usize,
        size: usize,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    #[doc = " Allocate data (char*) from a mchar_async_t object"]
    #[doc = ""]
    #[doc = " @param[in] mchar_async_t*. See description for mycore_string_init function"]
    #[doc = " @param[in] node id. See description for mycore_string_init function"]
    #[doc = " @param[in] old data"]
    #[doc = " @param[in] how much data is copied from the old data to new data"]
    #[doc = " @param[in] new size"]
    #[doc = ""]
    #[doc = " @return data if successful, otherwise a NULL value"]
    pub fn mycore_string_data_realloc(
        mchar: *mut mchar_async_t,
        node_id: usize,
        data: *mut ::std::os::raw::c_char,
        len_to_copy: usize,
        size: usize,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    #[doc = " Release allocated data"]
    #[doc = ""]
    #[doc = " @param[in] mchar_async_t*. See description for mycore_string_init function"]
    #[doc = " @param[in] node id. See description for mycore_string_init function"]
    #[doc = " @param[in] data to release"]
    #[doc = ""]
    #[doc = " @return data if successful, otherwise a NULL value"]
    pub fn mycore_string_data_free(
        mchar: *mut mchar_async_t,
        node_id: usize,
        data: *mut ::std::os::raw::c_char,
    );
}
extern "C" {
    #[doc = " Get data (char*) from a mycore_string_t object"]
    #[doc = ""]
    #[doc = " @param[in] mycore_string_t*. See description for mycore_string_init function"]
    #[doc = ""]
    #[doc = " @return char* if exists, otherwise a NULL value"]
    pub fn mycore_string_data(str: *mut mycore_string_t) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    #[doc = " Get data length from a mycore_string_t object"]
    #[doc = ""]
    #[doc = " @param[in] mycore_string_t*. See description for mycore_string_init function"]
    #[doc = ""]
    #[doc = " @return data length"]
    pub fn mycore_string_length(str: *mut mycore_string_t) -> usize;
}
extern "C" {
    #[doc = " Get data size from a mycore_string_t object"]
    #[doc = ""]
    #[doc = " @param[in] mycore_string_t*. See description for mycore_string_init function"]
    #[doc = ""]
    #[doc = " @return data size"]
    pub fn mycore_string_size(str: *mut mycore_string_t) -> usize;
}
extern "C" {
    #[doc = " Set data (char *) for a mycore_string_t object."]
    #[doc = ""]
    #[doc = " Attention!!! Attention!!! Attention!!!"]
    #[doc = ""]
    #[doc = " You can assign only that it has been allocated from functions:"]
    #[doc = " mycore_string_data_alloc"]
    #[doc = " mycore_string_data_realloc"]
    #[doc = " or obtained manually created from mchar_async_t object"]
    #[doc = ""]
    #[doc = " Attention!!! Do not try set chat* from allocated by malloc or realloc!!!"]
    #[doc = ""]
    #[doc = " @param[in] mycore_string_t*. See description for mycore_string_init function"]
    #[doc = " @param[in] you data to want assign"]
    #[doc = ""]
    #[doc = " @return assigned data if successful, otherwise a NULL value"]
    pub fn mycore_string_data_set(
        str: *mut mycore_string_t,
        data: *mut ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    #[doc = " Set data size for a mycore_string_t object."]
    #[doc = ""]
    #[doc = " @param[in] mycore_string_t*. See description for mycore_string_init function"]
    #[doc = " @param[in] you size to want assign"]
    #[doc = ""]
    #[doc = " @return assigned size"]
    pub fn mycore_string_size_set(str: *mut mycore_string_t, size: usize) -> usize;
}
extern "C" {
    #[doc = " Set data length for a mycore_string_t object."]
    #[doc = ""]
    #[doc = " @param[in] mycore_string_t*. See description for mycore_string_init function"]
    #[doc = " @param[in] you length to want assign"]
    #[doc = ""]
    #[doc = " @return assigned length"]
    pub fn mycore_string_length_set(str: *mut mycore_string_t, length: usize) -> usize;
}
extern "C" {
    pub fn mycore_string_append(
        str: *mut mycore_string_t,
        data: *const ::std::os::raw::c_char,
        length: usize,
    );
}
extern "C" {
    pub fn mycore_string_append_one(str: *mut mycore_string_t, data: ::std::os::raw::c_char);
}
extern "C" {
    pub fn mycore_string_append_lowercase(
        str: *mut mycore_string_t,
        data: *const ::std::os::raw::c_char,
        length: usize,
    );
}
extern "C" {
    pub fn mycore_string_append_with_replacement_null_characters(
        str: *mut mycore_string_t,
        buff: *const ::std::os::raw::c_char,
        length: usize,
    );
}
extern "C" {
    pub fn mycore_string_raw_set_replacement_character(
        target: *mut mycore_string_t,
        position: usize,
    ) -> usize;
}
extern "C" {
    pub fn mycore_string_copy(dest: *mut mycore_string_t, target: *mut mycore_string_t);
}
extern "C" {
    pub fn mycore_string_raw_copy(
        str1: *mut ::std::os::raw::c_char,
        str2: *const ::std::os::raw::c_char,
        size: usize,
    ) -> usize;
}
extern "C" {
    pub fn mycore_string_stay_only_whitespace(target: *mut mycore_string_t);
}
extern "C" {
    pub fn mycore_string_crop_whitespace_from_begin(target: *mut mycore_string_t) -> usize;
}
extern "C" {
    pub fn mycore_string_whitespace_from_begin(target: *mut mycore_string_t) -> usize;
}
impl myencoding_list {
    pub const MyENCODING_UTF_8: myencoding_list = myencoding_list::MyENCODING_DEFAULT;
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum myencoding_list {
    MyENCODING_DEFAULT = 0,
    MyENCODING_NOT_DETERMINED = 2,
    MyENCODING_UTF_16LE = 4,
    MyENCODING_UTF_16BE = 5,
    MyENCODING_X_USER_DEFINED = 6,
    MyENCODING_BIG5 = 7,
    MyENCODING_EUC_JP = 8,
    MyENCODING_EUC_KR = 9,
    MyENCODING_GB18030 = 10,
    MyENCODING_GBK = 11,
    MyENCODING_IBM866 = 12,
    MyENCODING_ISO_2022_JP = 13,
    MyENCODING_ISO_8859_10 = 14,
    MyENCODING_ISO_8859_13 = 15,
    MyENCODING_ISO_8859_14 = 16,
    MyENCODING_ISO_8859_15 = 17,
    MyENCODING_ISO_8859_16 = 18,
    MyENCODING_ISO_8859_2 = 19,
    MyENCODING_ISO_8859_3 = 20,
    MyENCODING_ISO_8859_4 = 21,
    MyENCODING_ISO_8859_5 = 22,
    MyENCODING_ISO_8859_6 = 23,
    MyENCODING_ISO_8859_7 = 24,
    MyENCODING_ISO_8859_8 = 25,
    MyENCODING_ISO_8859_8_I = 26,
    MyENCODING_KOI8_R = 27,
    MyENCODING_KOI8_U = 28,
    MyENCODING_MACINTOSH = 29,
    MyENCODING_SHIFT_JIS = 30,
    MyENCODING_WINDOWS_1250 = 31,
    MyENCODING_WINDOWS_1251 = 32,
    MyENCODING_WINDOWS_1252 = 33,
    MyENCODING_WINDOWS_1253 = 34,
    MyENCODING_WINDOWS_1254 = 35,
    MyENCODING_WINDOWS_1255 = 36,
    MyENCODING_WINDOWS_1256 = 37,
    MyENCODING_WINDOWS_1257 = 38,
    MyENCODING_WINDOWS_1258 = 39,
    MyENCODING_WINDOWS_874 = 40,
    MyENCODING_X_MAC_CYRILLIC = 41,
    MyENCODING_LAST_ENTRY = 42,
}
pub use self::myencoding_list as myencoding_t;
#[repr(u32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum myencoding_status {
    MyENCODING_STATUS_OK = 0,
    MyENCODING_STATUS_ERROR = 1,
    MyENCODING_STATUS_CONTINUE = 2,
    MyENCODING_STATUS_DONE = 4,
}
pub use self::myencoding_status as myencoding_status_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct myencoding_result {
    _unused: [u8; 0],
}
pub type myencoding_result_t = myencoding_result;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct myencoding_trigram {
    _unused: [u8; 0],
}
pub type myencoding_trigram_t = myencoding_trigram;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct myencoding_trigram_result {
    _unused: [u8; 0],
}
pub type myencoding_trigram_result_t = myencoding_trigram_result;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct myencoding_unicode_result {
    _unused: [u8; 0],
}
pub type myencoding_unicode_result_t = myencoding_unicode_result;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct myencoding_detect_name_entry {
    _unused: [u8; 0],
}
pub type myencoding_detect_name_entry_t = myencoding_detect_name_entry;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct myencoding_detect_attr {
    _unused: [u8; 0],
}
pub type myencoding_detect_attr_t = myencoding_detect_attr;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct myencoding_entry_name_index {
    _unused: [u8; 0],
}
pub type myencoding_entry_name_index_t = myencoding_entry_name_index;
impl myhtml_tags {
    pub const MyHTML_TAG_FIRST_ENTRY: myhtml_tags = myhtml_tags::MyHTML_TAG__TEXT;
}
#[repr(u32)]
#[doc = " @struct basic tag ids"]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum myhtml_tags {
    MyHTML_TAG__UNDEF = 0,
    MyHTML_TAG__TEXT = 1,
    MyHTML_TAG__COMMENT = 2,
    MyHTML_TAG__DOCTYPE = 3,
    MyHTML_TAG_A = 4,
    MyHTML_TAG_ABBR = 5,
    MyHTML_TAG_ACRONYM = 6,
    MyHTML_TAG_ADDRESS = 7,
    MyHTML_TAG_ANNOTATION_XML = 8,
    MyHTML_TAG_APPLET = 9,
    MyHTML_TAG_AREA = 10,
    MyHTML_TAG_ARTICLE = 11,
    MyHTML_TAG_ASIDE = 12,
    MyHTML_TAG_AUDIO = 13,
    MyHTML_TAG_B = 14,
    MyHTML_TAG_BASE = 15,
    MyHTML_TAG_BASEFONT = 16,
    MyHTML_TAG_BDI = 17,
    MyHTML_TAG_BDO = 18,
    MyHTML_TAG_BGSOUND = 19,
    MyHTML_TAG_BIG = 20,
    MyHTML_TAG_BLINK = 21,
    MyHTML_TAG_BLOCKQUOTE = 22,
    MyHTML_TAG_BODY = 23,
    MyHTML_TAG_BR = 24,
    MyHTML_TAG_BUTTON = 25,
    MyHTML_TAG_CANVAS = 26,
    MyHTML_TAG_CAPTION = 27,
    MyHTML_TAG_CENTER = 28,
    MyHTML_TAG_CITE = 29,
    MyHTML_TAG_CODE = 30,
    MyHTML_TAG_COL = 31,
    MyHTML_TAG_COLGROUP = 32,
    MyHTML_TAG_COMMAND = 33,
    MyHTML_TAG_COMMENT = 34,
    MyHTML_TAG_DATALIST = 35,
    MyHTML_TAG_DD = 36,
    MyHTML_TAG_DEL = 37,
    MyHTML_TAG_DETAILS = 38,
    MyHTML_TAG_DFN = 39,
    MyHTML_TAG_DIALOG = 40,
    MyHTML_TAG_DIR = 41,
    MyHTML_TAG_DIV = 42,
    MyHTML_TAG_DL = 43,
    MyHTML_TAG_DT = 44,
    MyHTML_TAG_EM = 45,
    MyHTML_TAG_EMBED = 46,
    MyHTML_TAG_FIELDSET = 47,
    MyHTML_TAG_FIGCAPTION = 48,
    MyHTML_TAG_FIGURE = 49,
    MyHTML_TAG_FONT = 50,
    MyHTML_TAG_FOOTER = 51,
    MyHTML_TAG_FORM = 52,
    MyHTML_TAG_FRAME = 53,
    MyHTML_TAG_FRAMESET = 54,
    MyHTML_TAG_H1 = 55,
    MyHTML_TAG_H2 = 56,
    MyHTML_TAG_H3 = 57,
    MyHTML_TAG_H4 = 58,
    MyHTML_TAG_H5 = 59,
    MyHTML_TAG_H6 = 60,
    MyHTML_TAG_HEAD = 61,
    MyHTML_TAG_HEADER = 62,
    MyHTML_TAG_HGROUP = 63,
    MyHTML_TAG_HR = 64,
    MyHTML_TAG_HTML = 65,
    MyHTML_TAG_I = 66,
    MyHTML_TAG_IFRAME = 67,
    MyHTML_TAG_IMAGE = 68,
    MyHTML_TAG_IMG = 69,
    MyHTML_TAG_INPUT = 70,
    MyHTML_TAG_INS = 71,
    MyHTML_TAG_ISINDEX = 72,
    MyHTML_TAG_KBD = 73,
    MyHTML_TAG_KEYGEN = 74,
    MyHTML_TAG_LABEL = 75,
    MyHTML_TAG_LEGEND = 76,
    MyHTML_TAG_LI = 77,
    MyHTML_TAG_LINK = 78,
    MyHTML_TAG_LISTING = 79,
    MyHTML_TAG_MAIN = 80,
    MyHTML_TAG_MAP = 81,
    MyHTML_TAG_MARK = 82,
    MyHTML_TAG_MARQUEE = 83,
    MyHTML_TAG_MENU = 84,
    MyHTML_TAG_MENUITEM = 85,
    MyHTML_TAG_META = 86,
    MyHTML_TAG_METER = 87,
    MyHTML_TAG_MTEXT = 88,
    MyHTML_TAG_NAV = 89,
    MyHTML_TAG_NOBR = 90,
    MyHTML_TAG_NOEMBED = 91,
    MyHTML_TAG_NOFRAMES = 92,
    MyHTML_TAG_NOSCRIPT = 93,
    MyHTML_TAG_OBJECT = 94,
    MyHTML_TAG_OL = 95,
    MyHTML_TAG_OPTGROUP = 96,
    MyHTML_TAG_OPTION = 97,
    MyHTML_TAG_OUTPUT = 98,
    MyHTML_TAG_P = 99,
    MyHTML_TAG_PARAM = 100,
    MyHTML_TAG_PLAINTEXT = 101,
    MyHTML_TAG_PRE = 102,
    MyHTML_TAG_PROGRESS = 103,
    MyHTML_TAG_Q = 104,
    MyHTML_TAG_RB = 105,
    MyHTML_TAG_RP = 106,
    MyHTML_TAG_RT = 107,
    MyHTML_TAG_RTC = 108,
    MyHTML_TAG_RUBY = 109,
    MyHTML_TAG_S = 110,
    MyHTML_TAG_SAMP = 111,
    MyHTML_TAG_SCRIPT = 112,
    MyHTML_TAG_SECTION = 113,
    MyHTML_TAG_SELECT = 114,
    MyHTML_TAG_SMALL = 115,
    MyHTML_TAG_SOURCE = 116,
    MyHTML_TAG_SPAN = 117,
    MyHTML_TAG_STRIKE = 118,
    MyHTML_TAG_STRONG = 119,
    MyHTML_TAG_STYLE = 120,
    MyHTML_TAG_SUB = 121,
    MyHTML_TAG_SUMMARY = 122,
    MyHTML_TAG_SUP = 123,
    MyHTML_TAG_SVG = 124,
    MyHTML_TAG_TABLE = 125,
    MyHTML_TAG_TBODY = 126,
    MyHTML_TAG_TD = 127,
    MyHTML_TAG_TEMPLATE = 128,
    MyHTML_TAG_TEXTAREA = 129,
    MyHTML_TAG_TFOOT = 130,
    MyHTML_TAG_TH = 131,
    MyHTML_TAG_THEAD = 132,
    MyHTML_TAG_TIME = 133,
    MyHTML_TAG_TITLE = 134,
    MyHTML_TAG_TR = 135,
    MyHTML_TAG_TRACK = 136,
    MyHTML_TAG_TT = 137,
    MyHTML_TAG_U = 138,
    MyHTML_TAG_UL = 139,
    MyHTML_TAG_VAR = 140,
    MyHTML_TAG_VIDEO = 141,
    MyHTML_TAG_WBR = 142,
    MyHTML_TAG_XMP = 143,
    MyHTML_TAG_ALTGLYPH = 144,
    MyHTML_TAG_ALTGLYPHDEF = 145,
    MyHTML_TAG_ALTGLYPHITEM = 146,
    MyHTML_TAG_ANIMATE = 147,
    MyHTML_TAG_ANIMATECOLOR = 148,
    MyHTML_TAG_ANIMATEMOTION = 149,
    MyHTML_TAG_ANIMATETRANSFORM = 150,
    MyHTML_TAG_CIRCLE = 151,
    MyHTML_TAG_CLIPPATH = 152,
    MyHTML_TAG_COLOR_PROFILE = 153,
    MyHTML_TAG_CURSOR = 154,
    MyHTML_TAG_DEFS = 155,
    MyHTML_TAG_DESC = 156,
    MyHTML_TAG_ELLIPSE = 157,
    MyHTML_TAG_FEBLEND = 158,
    MyHTML_TAG_FECOLORMATRIX = 159,
    MyHTML_TAG_FECOMPONENTTRANSFER = 160,
    MyHTML_TAG_FECOMPOSITE = 161,
    MyHTML_TAG_FECONVOLVEMATRIX = 162,
    MyHTML_TAG_FEDIFFUSELIGHTING = 163,
    MyHTML_TAG_FEDISPLACEMENTMAP = 164,
    MyHTML_TAG_FEDISTANTLIGHT = 165,
    MyHTML_TAG_FEDROPSHADOW = 166,
    MyHTML_TAG_FEFLOOD = 167,
    MyHTML_TAG_FEFUNCA = 168,
    MyHTML_TAG_FEFUNCB = 169,
    MyHTML_TAG_FEFUNCG = 170,
    MyHTML_TAG_FEFUNCR = 171,
    MyHTML_TAG_FEGAUSSIANBLUR = 172,
    MyHTML_TAG_FEIMAGE = 173,
    MyHTML_TAG_FEMERGE = 174,
    MyHTML_TAG_FEMERGENODE = 175,
    MyHTML_TAG_FEMORPHOLOGY = 176,
    MyHTML_TAG_FEOFFSET = 177,
    MyHTML_TAG_FEPOINTLIGHT = 178,
    MyHTML_TAG_FESPECULARLIGHTING = 179,
    MyHTML_TAG_FESPOTLIGHT = 180,
    MyHTML_TAG_FETILE = 181,
    MyHTML_TAG_FETURBULENCE = 182,
    MyHTML_TAG_FILTER = 183,
    MyHTML_TAG_FONT_FACE = 184,
    MyHTML_TAG_FONT_FACE_FORMAT = 185,
    MyHTML_TAG_FONT_FACE_NAME = 186,
    MyHTML_TAG_FONT_FACE_SRC = 187,
    MyHTML_TAG_FONT_FACE_URI = 188,
    MyHTML_TAG_FOREIGNOBJECT = 189,
    MyHTML_TAG_G = 190,
    MyHTML_TAG_GLYPH = 191,
    MyHTML_TAG_GLYPHREF = 192,
    MyHTML_TAG_HKERN = 193,
    MyHTML_TAG_LINE = 194,
    MyHTML_TAG_LINEARGRADIENT = 195,
    MyHTML_TAG_MARKER = 196,
    MyHTML_TAG_MASK = 197,
    MyHTML_TAG_METADATA = 198,
    MyHTML_TAG_MISSING_GLYPH = 199,
    MyHTML_TAG_MPATH = 200,
    MyHTML_TAG_PATH = 201,
    MyHTML_TAG_PATTERN = 202,
    MyHTML_TAG_POLYGON = 203,
    MyHTML_TAG_POLYLINE = 204,
    MyHTML_TAG_RADIALGRADIENT = 205,
    MyHTML_TAG_RECT = 206,
    MyHTML_TAG_SET = 207,
    MyHTML_TAG_STOP = 208,
    MyHTML_TAG_SWITCH = 209,
    MyHTML_TAG_SYMBOL = 210,
    MyHTML_TAG_TEXT = 211,
    MyHTML_TAG_TEXTPATH = 212,
    MyHTML_TAG_TREF = 213,
    MyHTML_TAG_TSPAN = 214,
    MyHTML_TAG_USE = 215,
    MyHTML_TAG_VIEW = 216,
    MyHTML_TAG_VKERN = 217,
    MyHTML_TAG_MATH = 218,
    MyHTML_TAG_MACTION = 219,
    MyHTML_TAG_MALIGNGROUP = 220,
    MyHTML_TAG_MALIGNMARK = 221,
    MyHTML_TAG_MENCLOSE = 222,
    MyHTML_TAG_MERROR = 223,
    MyHTML_TAG_MFENCED = 224,
    MyHTML_TAG_MFRAC = 225,
    MyHTML_TAG_MGLYPH = 226,
    MyHTML_TAG_MI = 227,
    MyHTML_TAG_MLABELEDTR = 228,
    MyHTML_TAG_MLONGDIV = 229,
    MyHTML_TAG_MMULTISCRIPTS = 230,
    MyHTML_TAG_MN = 231,
    MyHTML_TAG_MO = 232,
    MyHTML_TAG_MOVER = 233,
    MyHTML_TAG_MPADDED = 234,
    MyHTML_TAG_MPHANTOM = 235,
    MyHTML_TAG_MROOT = 236,
    MyHTML_TAG_MROW = 237,
    MyHTML_TAG_MS = 238,
    MyHTML_TAG_MSCARRIES = 239,
    MyHTML_TAG_MSCARRY = 240,
    MyHTML_TAG_MSGROUP = 241,
    MyHTML_TAG_MSLINE = 242,
    MyHTML_TAG_MSPACE = 243,
    MyHTML_TAG_MSQRT = 244,
    MyHTML_TAG_MSROW = 245,
    MyHTML_TAG_MSTACK = 246,
    MyHTML_TAG_MSTYLE = 247,
    MyHTML_TAG_MSUB = 248,
    MyHTML_TAG_MSUP = 249,
    MyHTML_TAG_MSUBSUP = 250,
    MyHTML_TAG__END_OF_FILE = 251,
    MyHTML_TAG_LAST_ENTRY = 252,
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum myhtml_status {
    MyHTML_STATUS_OK = 0,
    MyHTML_STATUS_ERROR = 1,
    MyHTML_STATUS_ERROR_MEMORY_ALLOCATION = 2,
    MyHTML_STATUS_RULES_ERROR_MEMORY_ALLOCATION = 36964,
    MyHTML_STATUS_TOKENIZER_ERROR_MEMORY_ALLOCATION = 37164,
    MyHTML_STATUS_TOKENIZER_ERROR_FRAGMENT_INIT = 37165,
    MyHTML_STATUS_TAGS_ERROR_MEMORY_ALLOCATION = 37264,
    MyHTML_STATUS_TAGS_ERROR_MCOBJECT_CREATE = 37265,
    MyHTML_STATUS_TAGS_ERROR_MCOBJECT_MALLOC = 37266,
    MyHTML_STATUS_TAGS_ERROR_MCOBJECT_CREATE_NODE = 37267,
    MyHTML_STATUS_TAGS_ERROR_CACHE_MEMORY_ALLOCATION = 37268,
    MyHTML_STATUS_TAGS_ERROR_INDEX_MEMORY_ALLOCATION = 37269,
    MyHTML_STATUS_TREE_ERROR_MEMORY_ALLOCATION = 37364,
    MyHTML_STATUS_TREE_ERROR_MCOBJECT_CREATE = 37365,
    MyHTML_STATUS_TREE_ERROR_MCOBJECT_INIT = 37366,
    MyHTML_STATUS_TREE_ERROR_MCOBJECT_CREATE_NODE = 37367,
    MyHTML_STATUS_TREE_ERROR_INCOMING_BUFFER_CREATE = 37368,
    MyHTML_STATUS_ATTR_ERROR_ALLOCATION = 37464,
    MyHTML_STATUS_ATTR_ERROR_CREATE = 37465,
    MyHTML_STATUS_STREAM_BUFFER_ERROR_CREATE = 37632,
    MyHTML_STATUS_STREAM_BUFFER_ERROR_INIT = 37633,
    MyHTML_STATUS_STREAM_BUFFER_ENTRY_ERROR_CREATE = 37634,
    MyHTML_STATUS_STREAM_BUFFER_ENTRY_ERROR_INIT = 37635,
    MyHTML_STATUS_STREAM_BUFFER_ERROR_ADD_ENTRY = 37636,
}
pub use self::myhtml_status as myhtml_status_t;
impl myhtml_namespace {
    pub const MyHTML_NAMESPACE_LAST_ENTRY: myhtml_namespace =
        myhtml_namespace::MyHTML_NAMESPACE_ANY;
}
#[repr(u32)]
#[doc = " @struct myhtml namespace"]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum myhtml_namespace {
    MyHTML_NAMESPACE_UNDEF = 0,
    MyHTML_NAMESPACE_HTML = 1,
    MyHTML_NAMESPACE_MATHML = 2,
    MyHTML_NAMESPACE_SVG = 3,
    MyHTML_NAMESPACE_XLINK = 4,
    MyHTML_NAMESPACE_XML = 5,
    MyHTML_NAMESPACE_XMLNS = 6,
    MyHTML_NAMESPACE_ANY = 7,
}
pub use self::myhtml_namespace as myhtml_namespace_t;
#[repr(u32)]
#[doc = " @struct myhtml options"]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum myhtml_options {
    MyHTML_OPTIONS_DEFAULT = 0,
    MyHTML_OPTIONS_PARSE_MODE_SINGLE = 1,
    MyHTML_OPTIONS_PARSE_MODE_ALL_IN_ONE = 2,
    MyHTML_OPTIONS_PARSE_MODE_SEPARATELY = 4,
}
#[repr(u32)]
#[doc = " @struct myhtml_tree parse flags"]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum myhtml_tree_parse_flags {
    MyHTML_TREE_PARSE_FLAGS_CLEAN = 0,
    MyHTML_TREE_PARSE_FLAGS_WITHOUT_BUILD_TREE = 1,
    MyHTML_TREE_PARSE_FLAGS_WITHOUT_PROCESS_TOKEN = 3,
    MyHTML_TREE_PARSE_FLAGS_SKIP_WHITESPACE_TOKEN = 4,
    MyHTML_TREE_PARSE_FLAGS_WITHOUT_DOCTYPE_IN_TREE = 8,
}
pub use self::myhtml_tree_parse_flags as myhtml_tree_parse_flags_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct myhtml {
    _unused: [u8; 0],
}
#[doc = " @struct myhtml_t MyHTML"]
#[doc = ""]
#[doc = " Basic structure. Create once for using many times."]
pub type myhtml_t = myhtml;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct myhtml_tree {
    _unused: [u8; 0],
}
#[doc = " @struct myhtml_tree_t MyHTML_TREE"]
#[doc = ""]
#[doc = " Secondary structure. Create once for using many times."]
pub type myhtml_tree_t = myhtml_tree;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct myhtml_token {
    _unused: [u8; 0],
}
#[doc = " @struct myhtml_token_t MyHTML_TOKEN"]
pub type myhtml_token_t = myhtml_token;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct myhtml_token_attr {
    _unused: [u8; 0],
}
pub type myhtml_tree_attr_t = myhtml_token_attr;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct myhtml_tree_node {
    _unused: [u8; 0],
}
pub type myhtml_tree_node_t = myhtml_tree_node;
#[doc = " MyHTML_TAG"]
#[doc = ""]
pub type myhtml_tag_id_t = usize;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct myhtml_tag {
    _unused: [u8; 0],
}
pub type myhtml_tag_t = myhtml_tag;
#[doc = " @struct myhtml_collection_t"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct myhtml_collection {
    pub list: *mut *mut myhtml_tree_node_t,
    pub size: usize,
    pub length: usize,
}
#[test]
fn bindgen_test_layout_myhtml_collection() {
    assert_eq!(
        ::std::mem::size_of::<myhtml_collection>(),
        24usize,
        concat!("Size of: ", stringify!(myhtml_collection))
    );
    assert_eq!(
        ::std::mem::align_of::<myhtml_collection>(),
        8usize,
        concat!("Alignment of ", stringify!(myhtml_collection))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<myhtml_collection>())).list as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(myhtml_collection),
            "::",
            stringify!(list)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<myhtml_collection>())).size as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(myhtml_collection),
            "::",
            stringify!(size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<myhtml_collection>())).length as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(myhtml_collection),
            "::",
            stringify!(length)
        )
    );
}
pub type myhtml_collection_t = myhtml_collection;
#[doc = " @struct myhtml_position_t"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct myhtml_position {
    pub begin: usize,
    pub length: usize,
}
#[test]
fn bindgen_test_layout_myhtml_position() {
    assert_eq!(
        ::std::mem::size_of::<myhtml_position>(),
        16usize,
        concat!("Size of: ", stringify!(myhtml_position))
    );
    assert_eq!(
        ::std::mem::align_of::<myhtml_position>(),
        8usize,
        concat!("Alignment of ", stringify!(myhtml_position))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<myhtml_position>())).begin as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(myhtml_position),
            "::",
            stringify!(begin)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<myhtml_position>())).length as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(myhtml_position),
            "::",
            stringify!(length)
        )
    );
}
pub type myhtml_position_t = myhtml_position;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct myhtml_token_node {
    _unused: [u8; 0],
}
#[doc = " @struct myhtml_token_node_t"]
pub type myhtml_token_node_t = myhtml_token_node;
#[doc = " @struct myhtml_version_t"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct myhtml_version {
    pub major: ::std::os::raw::c_int,
    pub minor: ::std::os::raw::c_int,
    pub patch: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_myhtml_version() {
    assert_eq!(
        ::std::mem::size_of::<myhtml_version>(),
        12usize,
        concat!("Size of: ", stringify!(myhtml_version))
    );
    assert_eq!(
        ::std::mem::align_of::<myhtml_version>(),
        4usize,
        concat!("Alignment of ", stringify!(myhtml_version))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<myhtml_version>())).major as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(myhtml_version),
            "::",
            stringify!(major)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<myhtml_version>())).minor as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(myhtml_version),
            "::",
            stringify!(minor)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<myhtml_version>())).patch as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(myhtml_version),
            "::",
            stringify!(patch)
        )
    );
}
pub type myhtml_version_t = myhtml_version;
pub type myhtml_callback_token_f = ::std::option::Option<
    unsafe extern "C" fn(
        tree: *mut myhtml_tree_t,
        token: *mut myhtml_token_node_t,
        ctx: *mut ::std::os::raw::c_void,
    ) -> *mut ::std::os::raw::c_void,
>;
pub type myhtml_callback_tree_node_f = ::std::option::Option<
    unsafe extern "C" fn(
        tree: *mut myhtml_tree_t,
        node: *mut myhtml_tree_node_t,
        ctx: *mut ::std::os::raw::c_void,
    ),
>;
extern "C" {
    #[doc = " Create a MyHTML structure"]
    #[doc = ""]
    #[doc = " @return myhtml_t* if successful, otherwise an NULL value."]
    pub fn myhtml_create() -> *mut myhtml_t;
}
extern "C" {
    #[doc = " Allocating and Initialization resources for a MyHTML structure"]
    #[doc = ""]
    #[doc = " @param[in] myhtml_t*"]
    #[doc = " @param[in] work options, how many threads will be."]
    #[doc = " Default: MyHTML_OPTIONS_PARSE_MODE_SEPARATELY"]
    #[doc = ""]
    #[doc = " @param[in] thread count, it depends on the choice of work options"]
    #[doc = " Default: 1"]
    #[doc = ""]
    #[doc = " @param[in] queue size for a tokens. Dynamically increasing the specified number here. Default: 4096"]
    #[doc = ""]
    #[doc = " @return MyHTML_STATUS_OK if successful, otherwise an error status value."]
    pub fn myhtml_init(
        myhtml: *mut myhtml_t,
        opt: myhtml_options,
        thread_count: usize,
        queue_size: usize,
    ) -> mystatus_t;
}
extern "C" {
    #[doc = " Clears queue and threads resources"]
    #[doc = ""]
    #[doc = " @param[in] myhtml_t*"]
    pub fn myhtml_clean(myhtml: *mut myhtml_t);
}
extern "C" {
    #[doc = " Destroy of a MyHTML structure"]
    #[doc = ""]
    #[doc = " @param[in] myhtml_t*"]
    #[doc = " @return NULL if successful, otherwise an MyHTML structure."]
    pub fn myhtml_destroy(myhtml: *mut myhtml_t) -> *mut myhtml_t;
}
extern "C" {
    #[doc = " Parsing HTML"]
    #[doc = ""]
    #[doc = " @param[in] previously created structure myhtml_tree_t*"]
    #[doc = " @param[in] Input character encoding; Default: MyENCODING_UTF_8 or MyENCODING_DEFAULT or 0"]
    #[doc = " @param[in] HTML"]
    #[doc = " @param[in] HTML size"]
    #[doc = ""]
    #[doc = " All input character encoding decode to utf-8"]
    #[doc = ""]
    #[doc = " @return MyHTML_STATUS_OK if successful, otherwise an error status"]
    pub fn myhtml_parse(
        tree: *mut myhtml_tree_t,
        encoding: myencoding_t,
        html: *const ::std::os::raw::c_char,
        html_size: usize,
    ) -> mystatus_t;
}
extern "C" {
    #[doc = " Parsing fragment of HTML"]
    #[doc = ""]
    #[doc = " @param[in] previously created structure myhtml_tree_t*"]
    #[doc = " @param[in] Input character encoding; Default: MyENCODING_UTF_8 or MyENCODING_DEFAULT or 0"]
    #[doc = " @param[in] HTML"]
    #[doc = " @param[in] HTML size"]
    #[doc = " @param[in] fragment base (root) tag id. Default: MyHTML_TAG_DIV if set 0"]
    #[doc = " @param[in] fragment NAMESPACE. Default: MyHTML_NAMESPACE_HTML if set 0"]
    #[doc = ""]
    #[doc = " All input character encoding decode to utf-8"]
    #[doc = ""]
    #[doc = " @return MyHTML_STATUS_OK if successful, otherwise an error status"]
    pub fn myhtml_parse_fragment(
        tree: *mut myhtml_tree_t,
        encoding: myencoding_t,
        html: *const ::std::os::raw::c_char,
        html_size: usize,
        tag_id: myhtml_tag_id_t,
        ns: myhtml_namespace,
    ) -> mystatus_t;
}
extern "C" {
    #[doc = " Parsing HTML in Single Mode."]
    #[doc = " No matter what was said during initialization MyHTML"]
    #[doc = ""]
    #[doc = " @param[in] previously created structure myhtml_tree_t*"]
    #[doc = " @param[in] Input character encoding; Default: MyENCODING_UTF_8 or MyENCODING_DEFAULT or 0"]
    #[doc = " @param[in] HTML"]
    #[doc = " @param[in] HTML size"]
    #[doc = ""]
    #[doc = " All input character encoding decode to utf-8"]
    #[doc = ""]
    #[doc = " @return MyHTML_STATUS_OK if successful, otherwise an error status"]
    pub fn myhtml_parse_single(
        tree: *mut myhtml_tree_t,
        encoding: myencoding_t,
        html: *const ::std::os::raw::c_char,
        html_size: usize,
    ) -> mystatus_t;
}
extern "C" {
    #[doc = " Parsing fragment of HTML in Single Mode."]
    #[doc = " No matter what was said during initialization MyHTML"]
    #[doc = ""]
    #[doc = " @param[in] previously created structure myhtml_tree_t*"]
    #[doc = " @param[in] Input character encoding; Default: MyENCODING_UTF_8 or MyENCODING_DEFAULT or 0"]
    #[doc = " @param[in] HTML"]
    #[doc = " @param[in] HTML size"]
    #[doc = " @param[in] fragment base (root) tag id. Default: MyHTML_TAG_DIV if set 0"]
    #[doc = " @param[in] fragment NAMESPACE. Default: MyHTML_NAMESPACE_HTML if set 0"]
    #[doc = ""]
    #[doc = " All input character encoding decode to utf-8"]
    #[doc = ""]
    #[doc = " @return MyHTML_STATUS_OK if successful, otherwise an error status"]
    pub fn myhtml_parse_fragment_single(
        tree: *mut myhtml_tree_t,
        encoding: myencoding_t,
        html: *const ::std::os::raw::c_char,
        html_size: usize,
        tag_id: myhtml_tag_id_t,
        ns: myhtml_namespace,
    ) -> mystatus_t;
}
extern "C" {
    #[doc = " Parsing HTML chunk. For end parsing call myhtml_parse_chunk_end function"]
    #[doc = ""]
    #[doc = " @param[in] myhtml_tree_t*"]
    #[doc = " @param[in] HTML"]
    #[doc = " @param[in] HTML size"]
    #[doc = ""]
    #[doc = " @return MyHTML_STATUS_OK if successful, otherwise an error status"]
    pub fn myhtml_parse_chunk(
        tree: *mut myhtml_tree_t,
        html: *const ::std::os::raw::c_char,
        html_size: usize,
    ) -> mystatus_t;
}
extern "C" {
    #[doc = " Parsing chunk of fragment HTML. For end parsing call myhtml_parse_chunk_end function"]
    #[doc = ""]
    #[doc = " @param[in] myhtml_tree_t*"]
    #[doc = " @param[in] HTML"]
    #[doc = " @param[in] HTML size"]
    #[doc = " @param[in] fragment base (root) tag id. Default: MyHTML_TAG_DIV if set 0"]
    #[doc = " @param[in] fragment NAMESPACE. Default: MyHTML_NAMESPACE_HTML if set 0"]
    #[doc = ""]
    #[doc = " @return MyHTML_STATUS_OK if successful, otherwise an error status"]
    pub fn myhtml_parse_chunk_fragment(
        tree: *mut myhtml_tree_t,
        html: *const ::std::os::raw::c_char,
        html_size: usize,
        tag_id: myhtml_tag_id_t,
        ns: myhtml_namespace,
    ) -> mystatus_t;
}
extern "C" {
    #[doc = " Parsing HTML chunk in Single Mode."]
    #[doc = " No matter what was said during initialization MyHTML"]
    #[doc = ""]
    #[doc = " @param[in] myhtml_tree_t*"]
    #[doc = " @param[in] HTML"]
    #[doc = " @param[in] HTML size"]
    #[doc = ""]
    #[doc = " @return MyHTML_STATUS_OK if successful, otherwise an error status"]
    pub fn myhtml_parse_chunk_single(
        tree: *mut myhtml_tree_t,
        html: *const ::std::os::raw::c_char,
        html_size: usize,
    ) -> mystatus_t;
}
extern "C" {
    #[doc = " Parsing chunk of fragment of HTML in Single Mode."]
    #[doc = " No matter what was said during initialization MyHTML"]
    #[doc = ""]
    #[doc = " @param[in] myhtml_tree_t*"]
    #[doc = " @param[in] HTML"]
    #[doc = " @param[in] HTML size"]
    #[doc = " @param[in] fragment base (root) tag id. Default: MyHTML_TAG_DIV if set 0"]
    #[doc = " @param[in] fragment NAMESPACE. Default: MyHTML_NAMESPACE_HTML if set 0"]
    #[doc = ""]
    #[doc = " @return MyHTML_STATUS_OK if successful, otherwise an error status"]
    pub fn myhtml_parse_chunk_fragment_single(
        tree: *mut myhtml_tree_t,
        html: *const ::std::os::raw::c_char,
        html_size: usize,
        tag_id: myhtml_tag_id_t,
        ns: myhtml_namespace,
    ) -> mystatus_t;
}
extern "C" {
    #[doc = " End of parsing HTML chunks"]
    #[doc = ""]
    #[doc = " @param[in] myhtml_tree_t*"]
    #[doc = ""]
    #[doc = " @return MyHTML_STATUS_OK if successful, otherwise an error status"]
    pub fn myhtml_parse_chunk_end(tree: *mut myhtml_tree_t) -> mystatus_t;
}
extern "C" {
    #[doc = " Create a MyHTML_TREE structure"]
    #[doc = ""]
    #[doc = " @return myhtml_tree_t* if successful, otherwise an NULL value."]
    pub fn myhtml_tree_create() -> *mut myhtml_tree_t;
}
extern "C" {
    #[doc = " Allocating and Initialization resources for a MyHTML_TREE structure"]
    #[doc = ""]
    #[doc = " @param[in] myhtml_tree_t*"]
    #[doc = " @param[in] workmyhtml_t*"]
    #[doc = ""]
    #[doc = " @return MyHTML_STATUS_OK if successful, otherwise an error status"]
    pub fn myhtml_tree_init(tree: *mut myhtml_tree_t, myhtml: *mut myhtml_t) -> mystatus_t;
}
extern "C" {
    #[doc = " Get Parse Flags of Tree"]
    #[doc = ""]
    #[doc = " @param[in] myhtml_tree_t*"]
    #[doc = ""]
    #[doc = " @return myhtml_tree_parse_flags_t"]
    pub fn myhtml_tree_parse_flags(tree: *mut myhtml_tree_t) -> myhtml_tree_parse_flags_t;
}
extern "C" {
    #[doc = " Set Parse Flags for Tree"]
    #[doc = " See enum myhtml_tree_parse_flags in this file"]
    #[doc = ""]
    #[doc = " @example myhtml_tree_parse_flags_set(tree, MyHTML_TREE_PARSE_FLAGS_WITHOUT_BUILD_TREE|"]
    #[doc = "                                            MyHTML_TREE_PARSE_FLAGS_WITHOUT_DOCTYPE_IN_TREE|"]
    #[doc = "                                            MyHTML_TREE_PARSE_FLAGS_SKIP_WHITESPACE_TOKEN);"]
    #[doc = ""]
    #[doc = " @param[in] myhtml_tree_t*"]
    #[doc = " @param[in] parse flags. You can combine their"]
    pub fn myhtml_tree_parse_flags_set(
        tree: *mut myhtml_tree_t,
        parse_flags: myhtml_tree_parse_flags_t,
    );
}
extern "C" {
    #[doc = " Clears resources before new parsing"]
    #[doc = ""]
    #[doc = " @param[in] myhtml_tree_t*"]
    pub fn myhtml_tree_clean(tree: *mut myhtml_tree_t);
}
extern "C" {
    #[doc = " Add child node to node. If children already exists it will be added to the last"]
    #[doc = ""]
    #[doc = " @param[in] myhtml_tree_node_t* The node to which we add child node"]
    #[doc = " @param[in] myhtml_tree_node_t* The node which adds"]
    pub fn myhtml_tree_node_add_child(root: *mut myhtml_tree_node_t, node: *mut myhtml_tree_node_t);
}
extern "C" {
    #[doc = " Add a node immediately before the existing node"]
    #[doc = ""]
    #[doc = " @param[in] myhtml_tree_node_t* add for this node"]
    #[doc = " @param[in] myhtml_tree_node_t* add this node"]
    pub fn myhtml_tree_node_insert_before(
        root: *mut myhtml_tree_node_t,
        node: *mut myhtml_tree_node_t,
    );
}
extern "C" {
    #[doc = " Add a node immediately after the existing node"]
    #[doc = ""]
    #[doc = " @param[in] myhtml_tree_node_t* add for this node"]
    #[doc = " @param[in] myhtml_tree_node_t* add this node"]
    pub fn myhtml_tree_node_insert_after(
        root: *mut myhtml_tree_node_t,
        node: *mut myhtml_tree_node_t,
    );
}
extern "C" {
    #[doc = " Destroy of a MyHTML_TREE structure"]
    #[doc = ""]
    #[doc = " @param[in] myhtml_tree_t*"]
    #[doc = ""]
    #[doc = " @return NULL if successful, otherwise an MyHTML_TREE structure"]
    pub fn myhtml_tree_destroy(tree: *mut myhtml_tree_t) -> *mut myhtml_tree_t;
}
extern "C" {
    #[doc = " Get myhtml_t* from a myhtml_tree_t*"]
    #[doc = ""]
    #[doc = " @param[in] myhtml_tree_t*"]
    #[doc = ""]
    #[doc = " @return myhtml_t* if exists, otherwise a NULL value"]
    pub fn myhtml_tree_get_myhtml(tree: *mut myhtml_tree_t) -> *mut myhtml_t;
}
extern "C" {
    #[doc = " Get myhtml_tag_t* from a myhtml_tree_t*"]
    #[doc = ""]
    #[doc = " @param[in] myhtml_tree_t*"]
    #[doc = ""]
    #[doc = " @return myhtml_tag_t* if exists, otherwise a NULL value"]
    pub fn myhtml_tree_get_tag(tree: *mut myhtml_tree_t) -> *mut myhtml_tag_t;
}
extern "C" {
    #[doc = " Get Tree Document (Root of Tree)"]
    #[doc = ""]
    #[doc = " @param[in] myhtml_tree_t*"]
    #[doc = ""]
    #[doc = " @return myhtml_tree_node_t* if successful, otherwise a NULL value"]
    pub fn myhtml_tree_get_document(tree: *mut myhtml_tree_t) -> *mut myhtml_tree_node_t;
}
extern "C" {
    #[doc = " Get node HTML (Document -> HTML, Root of HTML Document)"]
    #[doc = ""]
    #[doc = " @param[in] myhtml_tree_t*"]
    #[doc = ""]
    #[doc = " @return myhtml_tree_node_t* if successful, otherwise a NULL value"]
    pub fn myhtml_tree_get_node_html(tree: *mut myhtml_tree_t) -> *mut myhtml_tree_node_t;
}
extern "C" {
    #[doc = " Get node HEAD (Document -> HTML -> HEAD)"]
    #[doc = ""]
    #[doc = " @param[in] myhtml_tree_t*"]
    #[doc = ""]
    #[doc = " @return myhtml_tree_node_t* if successful, otherwise a NULL value"]
    pub fn myhtml_tree_get_node_head(tree: *mut myhtml_tree_t) -> *mut myhtml_tree_node_t;
}
extern "C" {
    #[doc = " Get node BODY (Document -> HTML -> BODY)"]
    #[doc = ""]
    #[doc = " @param[in] myhtml_tree_t*"]
    #[doc = ""]
    #[doc = " @return myhtml_tree_node_t* if successful, otherwise a NULL value"]
    pub fn myhtml_tree_get_node_body(tree: *mut myhtml_tree_t) -> *mut myhtml_tree_node_t;
}
extern "C" {
    #[doc = " Get mchar_async_t object"]
    #[doc = ""]
    #[doc = " @param[in] myhtml_tree_t*"]
    #[doc = ""]
    #[doc = " @return mchar_async_t* if exists, otherwise a NULL value"]
    pub fn myhtml_tree_get_mchar(tree: *mut myhtml_tree_t) -> *mut mchar_async_t;
}
extern "C" {
    #[doc = " Get node_id from main thread for mchar_async_t object"]
    #[doc = ""]
    #[doc = " @param[in] myhtml_tree_t*"]
    #[doc = ""]
    #[doc = " @return size_t, node id"]
    pub fn myhtml_tree_get_mchar_node_id(tree: *mut myhtml_tree_t) -> usize;
}
extern "C" {
    #[doc = " Get first Incoming Buffer"]
    #[doc = ""]
    #[doc = " @param[in] myhtml_tree_t*"]
    #[doc = ""]
    #[doc = " @return mycore_incoming_buffer_t* if successful, otherwise a NULL value"]
    pub fn myhtml_tree_incoming_buffer_first(
        tree: *mut myhtml_tree_t,
    ) -> *mut mycore_incoming_buffer_t;
}
extern "C" {
    #[doc = " Get first (begin) node of tree"]
    #[doc = ""]
    #[doc = " @param[in] myhtml_tree_t*"]
    #[doc = ""]
    #[doc = " @return myhtml_tree_node_t* if successful, otherwise a NULL value"]
    pub fn myhtml_node_first(tree: *mut myhtml_tree_t) -> *mut myhtml_tree_node_t;
}
extern "C" {
    #[doc = " Get nodes by tag id"]
    #[doc = ""]
    #[doc = " @param[in] myhtml_tree_t*"]
    #[doc = " @param[in] myhtml_collection_t*, creates new collection if NULL"]
    #[doc = " @param[in] tag id"]
    #[doc = " @param[out] status of this operation"]
    #[doc = ""]
    #[doc = " @return myhtml_collection_t* if successful, otherwise an NULL value"]
    pub fn myhtml_get_nodes_by_tag_id(
        tree: *mut myhtml_tree_t,
        collection: *mut myhtml_collection_t,
        tag_id: myhtml_tag_id_t,
        status: *mut mystatus_t,
    ) -> *mut myhtml_collection_t;
}
extern "C" {
    #[doc = " Get nodes by tag name"]
    #[doc = ""]
    #[doc = " @param[in] myhtml_tree_t*"]
    #[doc = " @param[in] myhtml_collection_t*, creates new collection if NULL"]
    #[doc = " @param[in] tag name"]
    #[doc = " @param[in] tag name length"]
    #[doc = " @param[out] status of this operation, optional"]
    #[doc = ""]
    #[doc = " @return myhtml_collection_t* if successful, otherwise an NULL value"]
    pub fn myhtml_get_nodes_by_name(
        tree: *mut myhtml_tree_t,
        collection: *mut myhtml_collection_t,
        name: *const ::std::os::raw::c_char,
        length: usize,
        status: *mut mystatus_t,
    ) -> *mut myhtml_collection_t;
}
extern "C" {
    #[doc = " Get nodes by attribute key"]
    #[doc = ""]
    #[doc = " @param[in] myhtml_tree_t*"]
    #[doc = " @param[in] myhtml_collection_t*, optional; creates new collection if NULL"]
    #[doc = " @param[in] myhtml_tree_node_t*, optional; scope node; html if NULL"]
    #[doc = " @param[in] find key"]
    #[doc = " @param[in] find key length"]
    #[doc = " @param[out] status of this operation, optional"]
    #[doc = ""]
    #[doc = " @return myhtml_collection_t* if successful, otherwise an NULL value"]
    pub fn myhtml_get_nodes_by_attribute_key(
        tree: *mut myhtml_tree_t,
        collection: *mut myhtml_collection_t,
        scope_node: *mut myhtml_tree_node_t,
        key: *const ::std::os::raw::c_char,
        key_len: usize,
        status: *mut mystatus_t,
    ) -> *mut myhtml_collection_t;
}
extern "C" {
    #[doc = " Get nodes by attribute value; exactly equal; like a [foo=\"bar\"]"]
    #[doc = ""]
    #[doc = " @param[in] myhtml_tree_t*"]
    #[doc = " @param[in] myhtml_collection_t*, optional; creates new collection if NULL"]
    #[doc = " @param[in] myhtml_tree_node_t*, optional; scope node; html if NULL"]
    #[doc = " @param[in] case-insensitive if true"]
    #[doc = " @param[in] find in key; if NULL find in all attributes"]
    #[doc = " @param[in] find in key length; if 0 find in all attributes"]
    #[doc = " @param[in] find value"]
    #[doc = " @param[in] find value length"]
    #[doc = " @param[out] status of this operation, optional"]
    #[doc = ""]
    #[doc = " @return myhtml_collection_t* if successful, otherwise an NULL value"]
    pub fn myhtml_get_nodes_by_attribute_value(
        tree: *mut myhtml_tree_t,
        collection: *mut myhtml_collection_t,
        node: *mut myhtml_tree_node_t,
        case_insensitive: bool,
        key: *const ::std::os::raw::c_char,
        key_len: usize,
        value: *const ::std::os::raw::c_char,
        value_len: usize,
        status: *mut mystatus_t,
    ) -> *mut myhtml_collection_t;
}
extern "C" {
    #[doc = " Get nodes by attribute value; whitespace separated; like a [foo~=\"bar\"]"]
    #[doc = ""]
    #[doc = " @example if value=\"bar\" and node attr value=\"lalala bar bebebe\", then this node is found"]
    #[doc = ""]
    #[doc = " @param[in] myhtml_tree_t*"]
    #[doc = " @param[in] myhtml_collection_t*, optional; creates new collection if NULL"]
    #[doc = " @param[in] myhtml_tree_node_t*, optional; scope node; html if NULL"]
    #[doc = " @param[in] case-insensitive if true"]
    #[doc = " @param[in] find in key; if NULL find in all attributes"]
    #[doc = " @param[in] find in key length; if 0 find in all attributes"]
    #[doc = " @param[in] find value"]
    #[doc = " @param[in] find value length"]
    #[doc = " @param[out] status of this operation, optional"]
    #[doc = ""]
    #[doc = " @return myhtml_collection_t* if successful, otherwise an NULL value"]
    pub fn myhtml_get_nodes_by_attribute_value_whitespace_separated(
        tree: *mut myhtml_tree_t,
        collection: *mut myhtml_collection_t,
        node: *mut myhtml_tree_node_t,
        case_insensitive: bool,
        key: *const ::std::os::raw::c_char,
        key_len: usize,
        value: *const ::std::os::raw::c_char,
        value_len: usize,
        status: *mut mystatus_t,
    ) -> *mut myhtml_collection_t;
}
extern "C" {
    #[doc = " Get nodes by attribute value; value begins exactly with the string; like a [foo^=\"bar\"]"]
    #[doc = ""]
    #[doc = " @example if value=\"bar\" and node attr value=\"barmumumu\", then this node is found"]
    #[doc = ""]
    #[doc = " @param[in] myhtml_tree_t*"]
    #[doc = " @param[in] myhtml_collection_t*, optional; creates new collection if NULL"]
    #[doc = " @param[in] myhtml_tree_node_t*, optional; scope node; html if NULL"]
    #[doc = " @param[in] case-insensitive if true"]
    #[doc = " @param[in] find in key; if NULL find in all attributes"]
    #[doc = " @param[in] find in key length; if 0 find in all attributes"]
    #[doc = " @param[in] find value"]
    #[doc = " @param[in] find value length"]
    #[doc = " @param[out] status of this operation, optional"]
    #[doc = ""]
    #[doc = " @return myhtml_collection_t* if successful, otherwise an NULL value"]
    pub fn myhtml_get_nodes_by_attribute_value_begin(
        tree: *mut myhtml_tree_t,
        collection: *mut myhtml_collection_t,
        node: *mut myhtml_tree_node_t,
        case_insensitive: bool,
        key: *const ::std::os::raw::c_char,
        key_len: usize,
        value: *const ::std::os::raw::c_char,
        value_len: usize,
        status: *mut mystatus_t,
    ) -> *mut myhtml_collection_t;
}
extern "C" {
    #[doc = " Get nodes by attribute value; value ends exactly with the string; like a [foo$=\"bar\"]"]
    #[doc = ""]
    #[doc = " @example if value=\"bar\" and node attr value=\"mumumubar\", then this node is found"]
    #[doc = ""]
    #[doc = " @param[in] myhtml_tree_t*"]
    #[doc = " @param[in] myhtml_collection_t*, optional; creates new collection if NULL"]
    #[doc = " @param[in] myhtml_tree_node_t*, optional; scope node; html if NULL"]
    #[doc = " @param[in] case-insensitive if true"]
    #[doc = " @param[in] find in key; if NULL find in all attributes"]
    #[doc = " @param[in] find in key length; if 0 find in all attributes"]
    #[doc = " @param[in] find value"]
    #[doc = " @param[in] find value length"]
    #[doc = " @param[out] status of this operation, optional"]
    #[doc = ""]
    #[doc = " @return myhtml_collection_t* if successful, otherwise an NULL value"]
    pub fn myhtml_get_nodes_by_attribute_value_end(
        tree: *mut myhtml_tree_t,
        collection: *mut myhtml_collection_t,
        node: *mut myhtml_tree_node_t,
        case_insensitive: bool,
        key: *const ::std::os::raw::c_char,
        key_len: usize,
        value: *const ::std::os::raw::c_char,
        value_len: usize,
        status: *mut mystatus_t,
    ) -> *mut myhtml_collection_t;
}
extern "C" {
    #[doc = " Get nodes by attribute value; value contains the substring; like a [foo*=\"bar\"]"]
    #[doc = ""]
    #[doc = " @example if value=\"bar\" and node attr value=\"bububarmumu\", then this node is found"]
    #[doc = ""]
    #[doc = " @param[in] myhtml_tree_t*"]
    #[doc = " @param[in] myhtml_collection_t*, optional; creates new collection if NULL"]
    #[doc = " @param[in] myhtml_tree_node_t*, optional; scope node; html if NULL"]
    #[doc = " @param[in] case-insensitive if true"]
    #[doc = " @param[in] find in key; if NULL find in all attributes"]
    #[doc = " @param[in] find in key length; if 0 find in all attributes"]
    #[doc = " @param[in] find value"]
    #[doc = " @param[in] find value length"]
    #[doc = " @param[out] status of this operation, optional"]
    #[doc = ""]
    #[doc = " @return myhtml_collection_t* if successful, otherwise an NULL value"]
    pub fn myhtml_get_nodes_by_attribute_value_contain(
        tree: *mut myhtml_tree_t,
        collection: *mut myhtml_collection_t,
        node: *mut myhtml_tree_node_t,
        case_insensitive: bool,
        key: *const ::std::os::raw::c_char,
        key_len: usize,
        value: *const ::std::os::raw::c_char,
        value_len: usize,
        status: *mut mystatus_t,
    ) -> *mut myhtml_collection_t;
}
extern "C" {
    #[doc = " Get nodes by attribute value; attribute value is a hyphen-separated list of values beginning;"]
    #[doc = " like a [foo|=\"bar\"]"]
    #[doc = ""]
    #[doc = " @param[in] myhtml_tree_t*"]
    #[doc = " @param[in] myhtml_collection_t*, optional; creates new collection if NULL"]
    #[doc = " @param[in] myhtml_tree_node_t*, optional; scope node; html if NULL"]
    #[doc = " @param[in] case-insensitive if true"]
    #[doc = " @param[in] find in key; if NULL find in all attributes"]
    #[doc = " @param[in] find in key length; if 0 find in all attributes"]
    #[doc = " @param[in] find value"]
    #[doc = " @param[in] find value length"]
    #[doc = " @param[out] optional; status of this operation"]
    #[doc = ""]
    #[doc = " @return myhtml_collection_t* if successful, otherwise an NULL value"]
    pub fn myhtml_get_nodes_by_attribute_value_hyphen_separated(
        tree: *mut myhtml_tree_t,
        collection: *mut myhtml_collection_t,
        node: *mut myhtml_tree_node_t,
        case_insensitive: bool,
        key: *const ::std::os::raw::c_char,
        key_len: usize,
        value: *const ::std::os::raw::c_char,
        value_len: usize,
        status: *mut mystatus_t,
    ) -> *mut myhtml_collection_t;
}
extern "C" {
    #[doc = " Get nodes by tag id in node scope"]
    #[doc = ""]
    #[doc = " @param[in] myhtml_tree_t*"]
    #[doc = " @param[in] myhtml_collection_t*, creates new collection if NULL"]
    #[doc = " @param[in] node for search tag_id in children nodes"]
    #[doc = " @param[in] tag_id for search"]
    #[doc = " @param[out] status of this operation"]
    #[doc = ""]
    #[doc = " @return myhtml_collection_t* if successful, otherwise an NULL value"]
    pub fn myhtml_get_nodes_by_tag_id_in_scope(
        tree: *mut myhtml_tree_t,
        collection: *mut myhtml_collection_t,
        node: *mut myhtml_tree_node_t,
        tag_id: myhtml_tag_id_t,
        status: *mut mystatus_t,
    ) -> *mut myhtml_collection_t;
}
extern "C" {
    #[doc = " Get nodes by tag name in node scope"]
    #[doc = ""]
    #[doc = " @param[in] myhtml_tree_t*"]
    #[doc = " @param[in] myhtml_collection_t*, creates new collection if NULL"]
    #[doc = " @param[in] node for search tag_id in children nodes"]
    #[doc = " @param[in] tag name"]
    #[doc = " @param[in] tag name length"]
    #[doc = " @param[out] status of this operation"]
    #[doc = ""]
    #[doc = " @return myhtml_collection_t* if successful, otherwise an NULL value"]
    pub fn myhtml_get_nodes_by_name_in_scope(
        tree: *mut myhtml_tree_t,
        collection: *mut myhtml_collection_t,
        node: *mut myhtml_tree_node_t,
        html: *const ::std::os::raw::c_char,
        length: usize,
        status: *mut mystatus_t,
    ) -> *mut myhtml_collection_t;
}
extern "C" {
    #[doc = " Get next sibling node"]
    #[doc = ""]
    #[doc = " @param[in] myhtml_tree_node_t*"]
    #[doc = ""]
    #[doc = " @return myhtml_tree_node_t* if exists, otherwise an NULL value"]
    pub fn myhtml_node_next(node: *mut myhtml_tree_node_t) -> *mut myhtml_tree_node_t;
}
extern "C" {
    #[doc = " Get previous sibling node"]
    #[doc = ""]
    #[doc = " @param[in] myhtml_tree_node_t*"]
    #[doc = ""]
    #[doc = " @return myhtml_tree_node_t* if exists, otherwise an NULL value"]
    pub fn myhtml_node_prev(node: *mut myhtml_tree_node_t) -> *mut myhtml_tree_node_t;
}
extern "C" {
    #[doc = " Get parent node"]
    #[doc = ""]
    #[doc = " @param[in] myhtml_tree_node_t*"]
    #[doc = ""]
    #[doc = " @return myhtml_tree_node_t* if exists, otherwise an NULL value"]
    pub fn myhtml_node_parent(node: *mut myhtml_tree_node_t) -> *mut myhtml_tree_node_t;
}
extern "C" {
    #[doc = " Get child (first child) of node"]
    #[doc = ""]
    #[doc = " @param[in] myhtml_tree_node_t*"]
    #[doc = ""]
    #[doc = " @return myhtml_tree_node_t* if exists, otherwise an NULL value"]
    pub fn myhtml_node_child(node: *mut myhtml_tree_node_t) -> *mut myhtml_tree_node_t;
}
extern "C" {
    #[doc = " Get last child of node"]
    #[doc = ""]
    #[doc = " @param[in] myhtml_tree_node_t*"]
    #[doc = ""]
    #[doc = " @return myhtml_tree_node_t* if exists, otherwise an NULL value"]
    pub fn myhtml_node_last_child(node: *mut myhtml_tree_node_t) -> *mut myhtml_tree_node_t;
}
extern "C" {
    #[doc = " Create new node"]
    #[doc = ""]
    #[doc = " @param[in] myhtml_tree_t*"]
    #[doc = " @param[in] tag id, see enum myhtml_tags"]
    #[doc = " @param[in] enum myhtml_namespace"]
    #[doc = ""]
    #[doc = " @return myhtml_tree_node_t* if successful, otherwise a NULL value"]
    pub fn myhtml_node_create(
        tree: *mut myhtml_tree_t,
        tag_id: myhtml_tag_id_t,
        ns: myhtml_namespace,
    ) -> *mut myhtml_tree_node_t;
}
extern "C" {
    #[doc = " Release allocated resources"]
    #[doc = ""]
    #[doc = " @param[in] myhtml_tree_node_t*"]
    pub fn myhtml_node_free(node: *mut myhtml_tree_node_t);
}
extern "C" {
    #[doc = " Remove node of tree"]
    #[doc = ""]
    #[doc = " @param[in] myhtml_tree_node_t*"]
    #[doc = ""]
    #[doc = " @return myhtml_tree_node_t* if successful, otherwise a NULL value"]
    pub fn myhtml_node_remove(node: *mut myhtml_tree_node_t) -> *mut myhtml_tree_node_t;
}
extern "C" {
    #[doc = " Remove node of tree and release allocated resources"]
    #[doc = ""]
    #[doc = " @param[in] myhtml_tree_node_t*"]
    pub fn myhtml_node_delete(node: *mut myhtml_tree_node_t);
}
extern "C" {
    #[doc = " Remove nodes of tree recursively and release allocated resources"]
    #[doc = ""]
    #[doc = " @param[in] myhtml_tree_node_t*"]
    pub fn myhtml_node_delete_recursive(node: *mut myhtml_tree_node_t);
}
extern "C" {
    #[doc = " The appropriate place for inserting a node. Insertion with validation."]
    #[doc = " If try insert <a> node to <table> node, then <a> node inserted before <table> node"]
    #[doc = ""]
    #[doc = " @param[in] target node"]
    #[doc = " @param[in] insertion node"]
    #[doc = ""]
    #[doc = " @return insertion node if successful, otherwise a NULL value"]
    pub fn myhtml_node_insert_to_appropriate_place(
        target: *mut myhtml_tree_node_t,
        node: *mut myhtml_tree_node_t,
    ) -> *mut myhtml_tree_node_t;
}
extern "C" {
    #[doc = " Append to target node as last child. Insertion without validation."]
    #[doc = ""]
    #[doc = " @param[in] target node"]
    #[doc = " @param[in] insertion node"]
    #[doc = ""]
    #[doc = " @return insertion node if successful, otherwise a NULL value"]
    pub fn myhtml_node_append_child(
        target: *mut myhtml_tree_node_t,
        node: *mut myhtml_tree_node_t,
    ) -> *mut myhtml_tree_node_t;
}
extern "C" {
    #[doc = " Append sibling node after target node. Insertion without validation."]
    #[doc = ""]
    #[doc = " @param[in] target node"]
    #[doc = " @param[in] insertion node"]
    #[doc = ""]
    #[doc = " @return insertion node if successful, otherwise a NULL value"]
    pub fn myhtml_node_insert_after(
        target: *mut myhtml_tree_node_t,
        node: *mut myhtml_tree_node_t,
    ) -> *mut myhtml_tree_node_t;
}
extern "C" {
    #[doc = " Append sibling node before target node. Insertion without validation."]
    #[doc = ""]
    #[doc = " @param[in] target node"]
    #[doc = " @param[in] insertion node"]
    #[doc = ""]
    #[doc = " @return insertion node if successful, otherwise a NULL value"]
    pub fn myhtml_node_insert_before(
        target: *mut myhtml_tree_node_t,
        node: *mut myhtml_tree_node_t,
    ) -> *mut myhtml_tree_node_t;
}
extern "C" {
    #[doc = " Add text for a node with convert character encoding."]
    #[doc = ""]
    #[doc = " @param[in] target node"]
    #[doc = " @param[in] text"]
    #[doc = " @param[in] text length"]
    #[doc = " @param[in] character encoding"]
    #[doc = ""]
    #[doc = " @return mycore_string_t* if successful, otherwise a NULL value"]
    pub fn myhtml_node_text_set(
        node: *mut myhtml_tree_node_t,
        text: *const ::std::os::raw::c_char,
        length: usize,
        encoding: myencoding_t,
    ) -> *mut mycore_string_t;
}
extern "C" {
    #[doc = " Add text for a node with convert character encoding."]
    #[doc = ""]
    #[doc = " @param[in] target node"]
    #[doc = " @param[in] text"]
    #[doc = " @param[in] text length"]
    #[doc = " @param[in] character encoding"]
    #[doc = ""]
    #[doc = " @return mycore_string_t* if successful, otherwise a NULL value"]
    pub fn myhtml_node_text_set_with_charef(
        node: *mut myhtml_tree_node_t,
        text: *const ::std::os::raw::c_char,
        length: usize,
        encoding: myencoding_t,
    ) -> *mut mycore_string_t;
}
extern "C" {
    #[doc = " Get token node"]
    #[doc = ""]
    #[doc = " @param[in] myhtml_tree_node_t*"]
    #[doc = ""]
    #[doc = " @return myhtml_token_node_t*"]
    pub fn myhtml_node_token(node: *mut myhtml_tree_node_t) -> *mut myhtml_token_node_t;
}
extern "C" {
    #[doc = " Get node namespace"]
    #[doc = ""]
    #[doc = " @param[in] myhtml_tree_node_t*"]
    #[doc = ""]
    #[doc = " @return myhtml_namespace_t"]
    pub fn myhtml_node_namespace(node: *mut myhtml_tree_node_t) -> myhtml_namespace_t;
}
extern "C" {
    #[doc = " Set node namespace"]
    #[doc = ""]
    #[doc = " @param[in] myhtml_tree_node_t*"]
    #[doc = " @param[in] myhtml_namespace_t"]
    pub fn myhtml_node_namespace_set(node: *mut myhtml_tree_node_t, ns: myhtml_namespace_t);
}
extern "C" {
    #[doc = " Get node tag id"]
    #[doc = ""]
    #[doc = " @param[in] myhtml_tree_node_t*"]
    #[doc = ""]
    #[doc = " @return myhtml_tag_id_t"]
    pub fn myhtml_node_tag_id(node: *mut myhtml_tree_node_t) -> myhtml_tag_id_t;
}
extern "C" {
    #[doc = " Node has self-closing flag?"]
    #[doc = ""]
    #[doc = " @param[in] myhtml_tree_node_t*"]
    #[doc = ""]
    #[doc = " @return true or false (1 or 0)"]
    pub fn myhtml_node_is_close_self(node: *mut myhtml_tree_node_t) -> bool;
}
extern "C" {
    #[doc = " Node is a void element?"]
    #[doc = ""]
    #[doc = " @param[in] myhtml_tree_node_t*"]
    #[doc = ""]
    #[doc = " @return true or false (1 or 0)"]
    pub fn myhtml_node_is_void_element(node: *mut myhtml_tree_node_t) -> bool;
}
extern "C" {
    #[doc = " Get first attribute of a node"]
    #[doc = ""]
    #[doc = " @param[in] myhtml_tree_node_t*"]
    #[doc = ""]
    #[doc = " @return myhtml_tree_attr_t* if exists, otherwise an NULL value"]
    pub fn myhtml_node_attribute_first(node: *mut myhtml_tree_node_t) -> *mut myhtml_tree_attr_t;
}
extern "C" {
    #[doc = " Get last attribute of a node"]
    #[doc = ""]
    #[doc = " @param[in] myhtml_tree_node_t*"]
    #[doc = ""]
    #[doc = " @return myhtml_tree_attr_t* if exists, otherwise an NULL value"]
    pub fn myhtml_node_attribute_last(node: *mut myhtml_tree_node_t) -> *mut myhtml_tree_attr_t;
}
extern "C" {
    #[doc = " Get text of a node. Only for a MyHTML_TAG__TEXT or MyHTML_TAG__COMMENT tags"]
    #[doc = ""]
    #[doc = " @param[in] myhtml_tree_node_t*"]
    #[doc = " @param[out] optional, text length"]
    #[doc = ""]
    #[doc = " @return const char* if exists, otherwise an NULL value"]
    pub fn myhtml_node_text(
        node: *mut myhtml_tree_node_t,
        length: *mut usize,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    #[doc = " Get mycore_string_t object by Tree node"]
    #[doc = ""]
    #[doc = " @param[in] myhtml_tree_node_t*"]
    #[doc = ""]
    #[doc = " @return mycore_string_t* if exists, otherwise an NULL value"]
    pub fn myhtml_node_string(node: *mut myhtml_tree_node_t) -> *mut mycore_string_t;
}
extern "C" {
    #[doc = " Get raw position for Tree Node in Incoming Buffer"]
    #[doc = ""]
    #[doc = " @example <[BEGIN]div[LENGTH] attr=lalala>"]
    #[doc = ""]
    #[doc = " @param[in] myhtml_tree_node_t*"]
    #[doc = ""]
    #[doc = " @return myhtml_tree_node_t"]
    pub fn myhtml_node_raw_position(node: *mut myhtml_tree_node_t) -> myhtml_position_t;
}
extern "C" {
    #[doc = " Get element position for Tree Node in Incoming Buffer"]
    #[doc = ""]
    #[doc = " @example [BEGIN]<div attr=lalala>[LENGTH]"]
    #[doc = ""]
    #[doc = " @param[in] myhtml_tree_node_t*"]
    #[doc = ""]
    #[doc = " @return myhtml_tree_node_t"]
    pub fn myhtml_node_element_position(node: *mut myhtml_tree_node_t) -> myhtml_position_t;
}
extern "C" {
    #[doc = " Get data value from tree node"]
    #[doc = ""]
    #[doc = " @param[in] myhtml_tree_node_t*"]
    #[doc = ""]
    #[doc = " @return void*"]
    pub fn myhtml_node_get_data(node: *mut myhtml_tree_node_t) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    #[doc = " Set data value to tree node"]
    #[doc = ""]
    #[doc = " @param[in] myhtml_tree_node_t*"]
    #[doc = " @param[in] void*"]
    pub fn myhtml_node_set_data(node: *mut myhtml_tree_node_t, data: *mut ::std::os::raw::c_void);
}
extern "C" {
    #[doc = " Get current tree (myhtml_tree_t*) from node"]
    #[doc = ""]
    #[doc = " @param[in] myhtml_tree_node_t*"]
    #[doc = ""]
    #[doc = " @return myhtml_tree_t*"]
    pub fn myhtml_node_tree(node: *mut myhtml_tree_node_t) -> *mut myhtml_tree_t;
}
extern "C" {
    #[doc = " Get next sibling attribute of one node"]
    #[doc = ""]
    #[doc = " @param[in] myhtml_tree_attr_t*"]
    #[doc = ""]
    #[doc = " @return myhtml_tree_attr_t* if exists, otherwise an NULL value"]
    pub fn myhtml_attribute_next(attr: *mut myhtml_tree_attr_t) -> *mut myhtml_tree_attr_t;
}
extern "C" {
    #[doc = " Get previous sibling attribute of one node"]
    #[doc = ""]
    #[doc = " @param[in] myhtml_tree_attr_t*"]
    #[doc = ""]
    #[doc = " @return myhtml_tree_attr_t* if exists, otherwise an NULL value"]
    pub fn myhtml_attribute_prev(attr: *mut myhtml_tree_attr_t) -> *mut myhtml_tree_attr_t;
}
extern "C" {
    #[doc = " Get attribute namespace"]
    #[doc = ""]
    #[doc = " @param[in] myhtml_tree_attr_t*"]
    #[doc = ""]
    #[doc = " @return enum myhtml_namespace"]
    pub fn myhtml_attribute_namespace(attr: *mut myhtml_tree_attr_t) -> myhtml_namespace_t;
}
extern "C" {
    #[doc = " Set attribute namespace"]
    #[doc = ""]
    #[doc = " @param[in] myhtml_tree_attr_t*"]
    #[doc = " @param[in] myhtml_namespace_t"]
    pub fn myhtml_attribute_namespace_set(attr: *mut myhtml_tree_attr_t, ns: myhtml_namespace_t);
}
extern "C" {
    #[doc = " Get attribute key"]
    #[doc = ""]
    #[doc = " @param[in] myhtml_tree_attr_t*"]
    #[doc = " @param[out] optional, name length"]
    #[doc = ""]
    #[doc = " @return const char* if exists, otherwise an NULL value"]
    pub fn myhtml_attribute_key(
        attr: *mut myhtml_tree_attr_t,
        length: *mut usize,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    #[doc = " Get attribute value"]
    #[doc = ""]
    #[doc = " @param[in] myhtml_tree_attr_t*"]
    #[doc = " @param[out] optional, value length"]
    #[doc = ""]
    #[doc = " @return const char* if exists, otherwise an NULL value"]
    pub fn myhtml_attribute_value(
        attr: *mut myhtml_tree_attr_t,
        length: *mut usize,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    #[doc = " Get attribute key string"]
    #[doc = ""]
    #[doc = " @param[in] myhtml_tree_attr_t*"]
    #[doc = ""]
    #[doc = " @return mycore_string_t* if exists, otherwise an NULL value"]
    pub fn myhtml_attribute_key_string(attr: *mut myhtml_tree_attr_t) -> *mut mycore_string_t;
}
extern "C" {
    #[doc = " Get attribute value string"]
    #[doc = ""]
    #[doc = " @param[in] myhtml_tree_attr_t*"]
    #[doc = ""]
    #[doc = " @return mycore_string_t* if exists, otherwise an NULL value"]
    pub fn myhtml_attribute_value_string(attr: *mut myhtml_tree_attr_t) -> *mut mycore_string_t;
}
extern "C" {
    #[doc = " Get attribute by key"]
    #[doc = ""]
    #[doc = " @param[in] myhtml_tree_node_t*"]
    #[doc = " @param[in] attr key name"]
    #[doc = " @param[in] attr key name length"]
    #[doc = ""]
    #[doc = " @return myhtml_tree_attr_t* if exists, otherwise a NULL value"]
    pub fn myhtml_attribute_by_key(
        node: *mut myhtml_tree_node_t,
        key: *const ::std::os::raw::c_char,
        key_len: usize,
    ) -> *mut myhtml_tree_attr_t;
}
extern "C" {
    #[doc = " Added attribute to tree node"]
    #[doc = ""]
    #[doc = " @param[in] myhtml_tree_node_t*"]
    #[doc = " @param[in] attr key name"]
    #[doc = " @param[in] attr key name length"]
    #[doc = " @param[in] attr value name"]
    #[doc = " @param[in] attr value name length"]
    #[doc = " @param[in] character encoding; Default: MyENCODING_UTF_8 or MyENCODING_DEFAULT or 0"]
    #[doc = ""]
    #[doc = " @return created myhtml_tree_attr_t* if successful, otherwise a NULL value"]
    pub fn myhtml_attribute_add(
        node: *mut myhtml_tree_node_t,
        key: *const ::std::os::raw::c_char,
        key_len: usize,
        value: *const ::std::os::raw::c_char,
        value_len: usize,
        encoding: myencoding_t,
    ) -> *mut myhtml_tree_attr_t;
}
extern "C" {
    #[doc = " Remove attribute reference. Not release the resources"]
    #[doc = ""]
    #[doc = " @param[in] myhtml_tree_node_t*"]
    #[doc = " @param[in] myhtml_tree_attr_t*"]
    #[doc = ""]
    #[doc = " @return myhtml_tree_attr_t* if successful, otherwise a NULL value"]
    pub fn myhtml_attribute_remove(
        node: *mut myhtml_tree_node_t,
        attr: *mut myhtml_tree_attr_t,
    ) -> *mut myhtml_tree_attr_t;
}
extern "C" {
    #[doc = " Remove attribute by key reference. Not release the resources"]
    #[doc = ""]
    #[doc = " @param[in] myhtml_tree_node_t*"]
    #[doc = " @param[in] attr key name"]
    #[doc = " @param[in] attr key name length"]
    #[doc = ""]
    #[doc = " @return myhtml_tree_attr_t* if successful, otherwise a NULL value"]
    pub fn myhtml_attribute_remove_by_key(
        node: *mut myhtml_tree_node_t,
        key: *const ::std::os::raw::c_char,
        key_len: usize,
    ) -> *mut myhtml_tree_attr_t;
}
extern "C" {
    #[doc = " Remove attribute and release allocated resources"]
    #[doc = ""]
    #[doc = " @param[in] myhtml_tree_t*"]
    #[doc = " @param[in] myhtml_tree_node_t*"]
    #[doc = " @param[in] myhtml_tree_attr_t*"]
    #[doc = ""]
    pub fn myhtml_attribute_delete(
        tree: *mut myhtml_tree_t,
        node: *mut myhtml_tree_node_t,
        attr: *mut myhtml_tree_attr_t,
    );
}
extern "C" {
    #[doc = " Release allocated resources"]
    #[doc = ""]
    #[doc = " @param[in] myhtml_tree_t*"]
    #[doc = " @param[in] myhtml_tree_attr_t*"]
    #[doc = ""]
    #[doc = " @return myhtml_tree_attr_t* if successful, otherwise a NULL value"]
    pub fn myhtml_attribute_free(tree: *mut myhtml_tree_t, attr: *mut myhtml_tree_attr_t);
}
extern "C" {
    #[doc = " Get raw position for Attribute Key in Incoming Buffer"]
    #[doc = ""]
    #[doc = " @param[in] myhtml_tree_attr_t*"]
    #[doc = ""]
    #[doc = " @return myhtml_position_t"]
    pub fn myhtml_attribute_key_raw_position(attr: *mut myhtml_tree_attr_t) -> myhtml_position_t;
}
extern "C" {
    #[doc = " Get raw position for Attribute Value in Incoming Buffer"]
    #[doc = ""]
    #[doc = " @param[in] myhtml_tree_attr_t*"]
    #[doc = ""]
    #[doc = " @return myhtml_position_t"]
    pub fn myhtml_attribute_value_raw_position(attr: *mut myhtml_tree_attr_t) -> myhtml_position_t;
}
extern "C" {
    #[doc = " Get token node tag id"]
    #[doc = ""]
    #[doc = " @param[in] myhtml_token_node_t*"]
    #[doc = ""]
    #[doc = " @return myhtml_tag_id_t"]
    pub fn myhtml_token_node_tag_id(token_node: *mut myhtml_token_node_t) -> myhtml_tag_id_t;
}
extern "C" {
    #[doc = " Get raw position for Token Node in Incoming Buffer"]
    #[doc = ""]
    #[doc = " @example <[BEGIN]div[LENGTH] attr=lalala>"]
    #[doc = ""]
    #[doc = " @param[in] myhtml_token_node_t*"]
    #[doc = ""]
    #[doc = " @return myhtml_position_t"]
    pub fn myhtml_token_node_raw_position(
        token_node: *mut myhtml_token_node_t,
    ) -> myhtml_position_t;
}
extern "C" {
    #[doc = " Get element position for Token Node in Incoming Buffer"]
    #[doc = ""]
    #[doc = " @example [BEGIN]<div attr=lalala>[LENGTH]"]
    #[doc = ""]
    #[doc = " @param[in] myhtml_token_node_t*"]
    #[doc = ""]
    #[doc = " @return myhtml_position_t"]
    pub fn myhtml_token_node_element_position(
        token_node: *mut myhtml_token_node_t,
    ) -> myhtml_position_t;
}
extern "C" {
    #[doc = " Get first attribute of a token node"]
    #[doc = ""]
    #[doc = " @param[in] myhtml_token_node_t*"]
    #[doc = ""]
    #[doc = " @return myhtml_tree_attr_t* if exists, otherwise an NULL value"]
    pub fn myhtml_token_node_attribute_first(
        token_node: *mut myhtml_token_node_t,
    ) -> *mut myhtml_tree_attr_t;
}
extern "C" {
    #[doc = " Get last attribute of a token node"]
    #[doc = ""]
    #[doc = " @param[in] myhtml_token_node_t*"]
    #[doc = ""]
    #[doc = " @return myhtml_tree_attr_t* if exists, otherwise an NULL value"]
    pub fn myhtml_token_node_attribute_last(
        token_node: *mut myhtml_token_node_t,
    ) -> *mut myhtml_tree_attr_t;
}
extern "C" {
    #[doc = " Get text of a token node. Only for a MyHTML_TAG__TEXT or MyHTML_TAG__COMMENT tags"]
    #[doc = ""]
    #[doc = " @param[in] myhtml_token_node_t*"]
    #[doc = " @param[out] optional, text length"]
    #[doc = ""]
    #[doc = " @return const char* if exists, otherwise an NULL value"]
    pub fn myhtml_token_node_text(
        token_node: *mut myhtml_token_node_t,
        length: *mut usize,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    #[doc = " Get mycore_string_t object by token node"]
    #[doc = ""]
    #[doc = " @param[in] myhtml_token_node_t*"]
    #[doc = ""]
    #[doc = " @return mycore_string_t* if exists, otherwise an NULL value"]
    pub fn myhtml_token_node_string(token_node: *mut myhtml_token_node_t) -> *mut mycore_string_t;
}
extern "C" {
    #[doc = " Token node has closing flag?"]
    #[doc = ""]
    #[doc = " @param[in] myhtml_tree_node_t*"]
    #[doc = ""]
    #[doc = " @return true or false"]
    pub fn myhtml_token_node_is_close(token_node: *mut myhtml_token_node_t) -> bool;
}
extern "C" {
    #[doc = " Token node has self-closing flag?"]
    #[doc = ""]
    #[doc = " @param[in] myhtml_tree_node_t*"]
    #[doc = ""]
    #[doc = " @return true or false (1 or 0)"]
    pub fn myhtml_token_node_is_close_self(token_node: *mut myhtml_token_node_t) -> bool;
}
extern "C" {
    #[doc = " Wait for process token all parsing stage. Need if you use thread mode"]
    #[doc = ""]
    #[doc = " @param[in] myhtml_token_t*"]
    #[doc = " @param[in] myhtml_token_node_t*"]
    pub fn myhtml_token_node_wait_for_done(
        token: *mut myhtml_token_t,
        node: *mut myhtml_token_node_t,
    );
}
extern "C" {
    #[doc = " Get tag name by tag id"]
    #[doc = ""]
    #[doc = " @param[in] myhtml_tree_t*"]
    #[doc = " @param[in] tag id"]
    #[doc = " @param[out] optional, name length"]
    #[doc = ""]
    #[doc = " @return const char* if exists, otherwise a NULL value"]
    pub fn myhtml_tag_name_by_id(
        tree: *mut myhtml_tree_t,
        tag_id: myhtml_tag_id_t,
        length: *mut usize,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    #[doc = " Get tag id by name"]
    #[doc = ""]
    #[doc = " @param[in] myhtml_tree_t*"]
    #[doc = " @param[in] tag name"]
    #[doc = " @param[in] tag name length"]
    #[doc = ""]
    #[doc = " @return tag id"]
    pub fn myhtml_tag_id_by_name(
        tree: *mut myhtml_tree_t,
        tag_name: *const ::std::os::raw::c_char,
        length: usize,
    ) -> myhtml_tag_id_t;
}
extern "C" {
    #[doc = " Create collection"]
    #[doc = ""]
    #[doc = " @param[in] list size"]
    #[doc = " @param[out] optional, status of operation"]
    #[doc = ""]
    #[doc = " @return myhtml_collection_t* if successful, otherwise an NULL value"]
    pub fn myhtml_collection_create(
        size: usize,
        status: *mut mystatus_t,
    ) -> *mut myhtml_collection_t;
}
extern "C" {
    #[doc = " Clears collection"]
    #[doc = ""]
    #[doc = " @param[in] myhtml_collection_t*"]
    pub fn myhtml_collection_clean(collection: *mut myhtml_collection_t);
}
extern "C" {
    #[doc = " Destroy allocated resources"]
    #[doc = ""]
    #[doc = " @param[in] myhtml_collection_t*"]
    #[doc = ""]
    #[doc = " @return NULL if successful, otherwise an myhtml_collection_t* structure"]
    pub fn myhtml_collection_destroy(
        collection: *mut myhtml_collection_t,
    ) -> *mut myhtml_collection_t;
}
extern "C" {
    #[doc = " Check size by length and increase if necessary"]
    #[doc = ""]
    #[doc = " @param[in] myhtml_collection_t*"]
    #[doc = " @param[in] need nodes"]
    #[doc = " @param[in] upto_length: count for up if nodes not exists"]
    #[doc = "            (current length + need + upto_length + 1)"]
    #[doc = ""]
    #[doc = " @return NULL if successful, otherwise an myhtml_collection_t* structure"]
    pub fn myhtml_collection_check_size(
        collection: *mut myhtml_collection_t,
        need: usize,
        upto_length: usize,
    ) -> mystatus_t;
}
extern "C" {
    #[doc = " Set character encoding for input stream"]
    #[doc = ""]
    #[doc = " @param[in] myhtml_tree_t*"]
    #[doc = " @param[in] Input character encoding"]
    #[doc = ""]
    pub fn myhtml_encoding_set(tree: *mut myhtml_tree_t, encoding: myencoding_t);
}
extern "C" {
    #[doc = " Get character encoding for current stream"]
    #[doc = ""]
    #[doc = " @param[in] myhtml_tree_t*"]
    #[doc = ""]
    #[doc = " @return myencoding_t"]
    pub fn myhtml_encoding_get(tree: *mut myhtml_tree_t) -> myencoding_t;
}
extern "C" {
    #[doc = " Convert Unicode Codepoint to UTF-8"]
    #[doc = ""]
    #[doc = " @param[in] Codepoint"]
    #[doc = " @param[in] Data to set characters. Minimum data length is 1 bytes, maximum is 4 byte"]
    #[doc = "   data length must be always available 4 bytes"]
    #[doc = ""]
    #[doc = " @return size character set"]
    pub fn myencoding_codepoint_to_ascii_utf_8(
        codepoint: usize,
        data: *mut ::std::os::raw::c_char,
    ) -> usize;
}
extern "C" {
    #[doc = " Convert Unicode Codepoint to UTF-16LE"]
    #[doc = ""]
    #[doc = " I advise not to use UTF-16! Use UTF-8 and be happy!"]
    #[doc = ""]
    #[doc = " @param[in] Codepoint"]
    #[doc = " @param[in] Data to set characters. Data length is 2 or 4 bytes"]
    #[doc = "   data length must be always available 4 bytes"]
    #[doc = ""]
    #[doc = " @return size character set"]
    pub fn myencoding_codepoint_to_ascii_utf_16(
        codepoint: usize,
        data: *mut ::std::os::raw::c_char,
    ) -> usize;
}
extern "C" {
    #[doc = " Detect character encoding"]
    #[doc = ""]
    #[doc = " Now available for detect UTF-8, UTF-16LE, UTF-16BE"]
    #[doc = " and Russians: windows-1251,  koi8-r, iso-8859-5, x-mac-cyrillic, ibm866"]
    #[doc = " Other in progress"]
    #[doc = ""]
    #[doc = " @param[in]  text"]
    #[doc = " @param[in]  text length"]
    #[doc = " @param[out] detected encoding"]
    #[doc = ""]
    #[doc = " @return true if encoding found, otherwise false"]
    pub fn myencoding_detect(
        text: *const ::std::os::raw::c_char,
        length: usize,
        encoding: *mut myencoding_t,
    ) -> bool;
}
extern "C" {
    #[doc = " Detect Russian character encoding"]
    #[doc = ""]
    #[doc = " Now available for detect windows-1251,  koi8-r, iso-8859-5, x-mac-cyrillic, ibm866"]
    #[doc = ""]
    #[doc = " @param[in]  text"]
    #[doc = " @param[in]  text length"]
    #[doc = " @param[out] detected encoding"]
    #[doc = ""]
    #[doc = " @return true if encoding found, otherwise false"]
    pub fn myencoding_detect_russian(
        text: *const ::std::os::raw::c_char,
        length: usize,
        encoding: *mut myencoding_t,
    ) -> bool;
}
extern "C" {
    #[doc = " Detect Unicode character encoding"]
    #[doc = ""]
    #[doc = " Now available for detect UTF-8, UTF-16LE, UTF-16BE"]
    #[doc = ""]
    #[doc = " @param[in]  text"]
    #[doc = " @param[in]  text length"]
    #[doc = " @param[out] detected encoding"]
    #[doc = ""]
    #[doc = " @return true if encoding found, otherwise false"]
    pub fn myencoding_detect_unicode(
        text: *const ::std::os::raw::c_char,
        length: usize,
        encoding: *mut myencoding_t,
    ) -> bool;
}
extern "C" {
    #[doc = " Detect Unicode character encoding by BOM"]
    #[doc = ""]
    #[doc = " Now available for detect UTF-8, UTF-16LE, UTF-16BE"]
    #[doc = ""]
    #[doc = " @param[in]  text"]
    #[doc = " @param[in]  text length"]
    #[doc = " @param[out] detected encoding"]
    #[doc = ""]
    #[doc = " @return true if encoding found, otherwise false"]
    pub fn myencoding_detect_bom(
        text: *const ::std::os::raw::c_char,
        length: usize,
        encoding: *mut myencoding_t,
    ) -> bool;
}
extern "C" {
    #[doc = " Detect Unicode character encoding by BOM. Cut BOM if will be found"]
    #[doc = ""]
    #[doc = " Now available for detect UTF-8, UTF-16LE, UTF-16BE"]
    #[doc = ""]
    #[doc = " @param[in]  text"]
    #[doc = " @param[in]  text length"]
    #[doc = " @param[out] detected encoding"]
    #[doc = " @param[out] new text position"]
    #[doc = " @param[out] new size position"]
    #[doc = ""]
    #[doc = " @return true if encoding found, otherwise false"]
    pub fn myencoding_detect_and_cut_bom(
        text: *const ::std::os::raw::c_char,
        length: usize,
        encoding: *mut myencoding_t,
        new_text: *mut *const ::std::os::raw::c_char,
        new_size: *mut usize,
    ) -> bool;
}
extern "C" {
    #[doc = " Detect encoding by name"]
    #[doc = " Names like: windows-1258 return MyENCODING_WINDOWS_1258"]
    #[doc = "             cp1251 or windows-1251 return MyENCODING_WINDOWS_1251"]
    #[doc = ""]
    #[doc = " See https://encoding.spec.whatwg.org/#names-and-labels"]
    #[doc = ""]
    #[doc = " @param[in]  name"]
    #[doc = " @param[in]  name length"]
    #[doc = " @param[out] detected encoding"]
    #[doc = ""]
    #[doc = " @return true if encoding found, otherwise false"]
    pub fn myencoding_by_name(
        name: *const ::std::os::raw::c_char,
        length: usize,
        encoding: *mut myencoding_t,
    ) -> bool;
}
extern "C" {
    #[doc = " Get Encoding name by myencoding_t (by id)"]
    #[doc = ""]
    #[doc = " @param[in]  myencoding_t, encoding id"]
    #[doc = " @param[out] return name length"]
    #[doc = ""]
    #[doc = " @return encoding name, otherwise NULL value"]
    pub fn myencoding_name_by_id(
        encoding: myencoding_t,
        length: *mut usize,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    #[doc = " Detect encoding in meta tag (<meta ...>) before start parsing"]
    #[doc = ""]
    #[doc = " See https://html.spec.whatwg.org/multipage/syntax.html#prescan-a-byte-stream-to-determine-its-encoding"]
    #[doc = ""]
    #[doc = " @param[in]  html data bytes"]
    #[doc = " @param[in]  html data length"]
    #[doc = ""]
    #[doc = " @return detected encoding if encoding found, otherwise MyENCODING_NOT_DETERMINED"]
    pub fn myencoding_prescan_stream_to_determine_encoding(
        data: *const ::std::os::raw::c_char,
        data_size: usize,
    ) -> myencoding_t;
}
extern "C" {
    #[doc = " Extracting character encoding from string. Find \"charset=\" and see encoding."]
    #[doc = " For example: \"text/html; charset=windows-1251\". Return MyENCODING_WINDOWS_1251"]
    #[doc = ""]
    #[doc = ""]
    #[doc = " See https://html.spec.whatwg.org/multipage/infrastructure.html#algorithm-for-extracting-a-character-encoding-from-a-meta-element"]
    #[doc = ""]
    #[doc = " @param[in]  data"]
    #[doc = " @param[in]  data length"]
    #[doc = " @param[out] return encoding"]
    #[doc = ""]
    #[doc = " @return true if encoding found"]
    pub fn myencoding_extracting_character_encoding_from_charset(
        data: *const ::std::os::raw::c_char,
        data_size: usize,
        encoding: *mut myencoding_t,
    ) -> bool;
}
extern "C" {
    #[doc = " Detect encoding in meta tag (<meta ...>) before start parsing and return found raw data"]
    #[doc = ""]
    #[doc = " See https://html.spec.whatwg.org/multipage/syntax.html#prescan-a-byte-stream-to-determine-its-encoding"]
    #[doc = ""]
    #[doc = " @param[in]  html data bytes"]
    #[doc = " @param[in]  html data length"]
    #[doc = " @param[out] return raw char data point for find encoding"]
    #[doc = " @param[out] return raw char length"]
    #[doc = ""]
    #[doc = " @return detected encoding if encoding found, otherwise MyENCODING_NOT_DETERMINED"]
    pub fn myencoding_prescan_stream_to_determine_encoding_with_found(
        data: *const ::std::os::raw::c_char,
        data_size: usize,
        found: *mut *const ::std::os::raw::c_char,
        found_length: *mut usize,
    ) -> myencoding_t;
}
extern "C" {
    #[doc = " Extracting character encoding from string. Find \"charset=\" and see encoding. Return found raw data."]
    #[doc = " For example: \"text/html; charset=windows-1251\". Return MyENCODING_WINDOWS_1251"]
    #[doc = ""]
    #[doc = ""]
    #[doc = " See https://html.spec.whatwg.org/multipage/infrastructure.html#algorithm-for-extracting-a-character-encoding-from-a-meta-element"]
    #[doc = ""]
    #[doc = " @param[in]  data"]
    #[doc = " @param[in]  data length"]
    #[doc = " @param[out] return encoding"]
    #[doc = " @param[out] return raw char data point for find encoding"]
    #[doc = " @param[out] return raw char length"]
    #[doc = ""]
    #[doc = " @return true if encoding found"]
    pub fn myencoding_extracting_character_encoding_from_charset_with_found(
        data: *const ::std::os::raw::c_char,
        data_size: usize,
        encoding: *mut myencoding_t,
        found: *mut *const ::std::os::raw::c_char,
        found_length: *mut usize,
    ) -> bool;
}
extern "C" {
    #[doc = " Get namespace text by namespace type (id)"]
    #[doc = ""]
    #[doc = " @param[in] myhtml_namespace_t"]
    #[doc = " @param[out] optional, length of returned text"]
    #[doc = ""]
    #[doc = " @return text if successful, otherwise a NULL value"]
    pub fn myhtml_namespace_name_by_id(
        ns: myhtml_namespace_t,
        length: *mut usize,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    #[doc = " Get namespace type (id) by namespace text"]
    #[doc = ""]
    #[doc = " @param[in] const char*, namespace text"]
    #[doc = " @param[in] size of namespace text"]
    #[doc = " @param[out] detected namespace type (id)"]
    #[doc = ""]
    #[doc = " @return true if detect, otherwise false"]
    pub fn myhtml_namespace_id_by_name(
        name: *const ::std::os::raw::c_char,
        length: usize,
        ns: *mut myhtml_namespace_t,
    ) -> bool;
}
extern "C" {
    #[doc = " Get current callback for tokens before processing"]
    #[doc = ""]
    #[doc = " @param[in] myhtml_tree_t*"]
    #[doc = ""]
    #[doc = " @return myhtml_callback_token_f"]
    pub fn myhtml_callback_before_token_done(tree: *mut myhtml_tree_t) -> myhtml_callback_token_f;
}
extern "C" {
    #[doc = " Get current callback for tokens after processing"]
    #[doc = ""]
    #[doc = " @param[in] myhtml_tree_t*"]
    #[doc = ""]
    #[doc = " @return myhtml_callback_token_f"]
    pub fn myhtml_callback_after_token_done(tree: *mut myhtml_tree_t) -> myhtml_callback_token_f;
}
extern "C" {
    #[doc = " Set callback for tokens before processing"]
    #[doc = ""]
    #[doc = " Warning!"]
    #[doc = " If you using thread mode parsing then this callback calls from thread (not Main thread)"]
    #[doc = " If you build MyHTML without thread or using MyHTML_OPTIONS_PARSE_MODE_SINGLE for create myhtml_t object"]
    #[doc = "  then this callback calls from Main thread"]
    #[doc = ""]
    #[doc = " @param[in] myhtml_tree_t*"]
    #[doc = " @param[in] myhtml_callback_token_f callback function"]
    pub fn myhtml_callback_before_token_done_set(
        tree: *mut myhtml_tree_t,
        func: myhtml_callback_token_f,
        ctx: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    #[doc = " Set callback for tokens after processing"]
    #[doc = ""]
    #[doc = " Warning!"]
    #[doc = " If you using thread mode parsing then this callback calls from thread (not Main thread)"]
    #[doc = " If you build MyHTML without thread or using MyHTML_OPTIONS_PARSE_MODE_SINGLE for create myhtml_t object"]
    #[doc = "  then this callback calls from Main thread"]
    #[doc = ""]
    #[doc = " @param[in] myhtml_tree_t*"]
    #[doc = " @param[in] myhtml_callback_token_f callback function"]
    pub fn myhtml_callback_after_token_done_set(
        tree: *mut myhtml_tree_t,
        func: myhtml_callback_token_f,
        ctx: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    #[doc = " Get current callback for tree node after inserted"]
    #[doc = ""]
    #[doc = " @param[in] myhtml_tree_t*"]
    #[doc = ""]
    #[doc = " @return myhtml_callback_tree_node_f"]
    pub fn myhtml_callback_tree_node_insert(
        tree: *mut myhtml_tree_t,
    ) -> myhtml_callback_tree_node_f;
}
extern "C" {
    #[doc = " Get current callback for tree node after removed"]
    #[doc = ""]
    #[doc = " @param[in] myhtml_tree_t*"]
    #[doc = ""]
    #[doc = " @return myhtml_callback_tree_node_f"]
    pub fn myhtml_callback_tree_node_remove(
        tree: *mut myhtml_tree_t,
    ) -> myhtml_callback_tree_node_f;
}
extern "C" {
    #[doc = " Set callback for tree node after inserted"]
    #[doc = ""]
    #[doc = " Warning!"]
    #[doc = " If you using thread mode parsing then this callback calls from thread (not Main thread)"]
    #[doc = " If you build MyHTML without thread or using MyHTML_OPTIONS_PARSE_MODE_SINGLE for create myhtml_t object"]
    #[doc = "  then this callback calls from Main thread"]
    #[doc = ""]
    #[doc = " Warning!!!"]
    #[doc = " If you well access to attributes or text for node and you using thread mode then"]
    #[doc = " you need wait for token processing done. See myhtml_token_node_wait_for_done"]
    #[doc = ""]
    #[doc = " @param[in] myhtml_tree_t*"]
    #[doc = " @param[in] myhtml_callback_tree_node_f callback function"]
    pub fn myhtml_callback_tree_node_insert_set(
        tree: *mut myhtml_tree_t,
        func: myhtml_callback_tree_node_f,
        ctx: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    #[doc = " Set callback for tree node after removed"]
    #[doc = ""]
    #[doc = " Warning!"]
    #[doc = " If you using thread mode parsing then this callback calls from thread (not Main thread)"]
    #[doc = " If you build MyHTML without thread or using MyHTML_OPTIONS_PARSE_MODE_SINGLE for create myhtml_t object"]
    #[doc = "  then this callback calls from Main thread"]
    #[doc = ""]
    #[doc = " Warning!!!"]
    #[doc = " If you well access to attributes or text for node and you using thread mode then"]
    #[doc = " you need wait for token processing done. See myhtml_token_node_wait_for_done"]
    #[doc = ""]
    #[doc = " @param[in] myhtml_tree_t*"]
    #[doc = " @param[in] myhtml_callback_tree_node_f callback function"]
    pub fn myhtml_callback_tree_node_remove_set(
        tree: *mut myhtml_tree_t,
        func: myhtml_callback_tree_node_f,
        ctx: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    #[doc = " Tree fragment serialization"]
    #[doc = " The same as myhtml_serialization_tree_buffer function"]
    pub fn myhtml_serialization(
        scope_node: *mut myhtml_tree_node_t,
        str: *mut mycore_string_raw_t,
    ) -> mystatus_t;
}
extern "C" {
    #[doc = " Only one tree node serialization"]
    #[doc = " The same as myhtml_serialization_node_buffer function"]
    pub fn myhtml_serialization_node(
        node: *mut myhtml_tree_node_t,
        str: *mut mycore_string_raw_t,
    ) -> mystatus_t;
}
extern "C" {
    #[doc = " Serialize tree to an output string"]
    #[doc = ""]
    #[doc = " @param[in] myhtml_tree_t*"]
    #[doc = " @param[in] scope node"]
    #[doc = " @param[in] mycore_string_raw_t*"]
    #[doc = ""]
    #[doc = " @return true if successful, otherwise false"]
    pub fn myhtml_serialization_tree_buffer(
        scope_node: *mut myhtml_tree_node_t,
        str: *mut mycore_string_raw_t,
    ) -> mystatus_t;
}
extern "C" {
    #[doc = " Serialize node to an output string"]
    #[doc = ""]
    #[doc = " @param[in] myhtml_tree_t*"]
    #[doc = " @param[in] node"]
    #[doc = " @param[in] mycore_string_raw_t*"]
    #[doc = ""]
    #[doc = " @return true if successful, otherwise false"]
    pub fn myhtml_serialization_node_buffer(
        node: *mut myhtml_tree_node_t,
        str: *mut mycore_string_raw_t,
    ) -> mystatus_t;
}
extern "C" {
    #[doc = " The serialize function for an entire tree"]
    #[doc = ""]
    #[doc = " @param[in] tree        the tree to be serialized"]
    #[doc = " @param[in] scope_node  the scope_node"]
    #[doc = " @param[in] callback    function that will be called for all strings that have to be printed"]
    #[doc = " @param[in] ptr         user-supplied pointer"]
    #[doc = ""]
    #[doc = " @return true if successful, otherwise false"]
    pub fn myhtml_serialization_tree_callback(
        scope_node: *mut myhtml_tree_node_t,
        callback: mycore_callback_serialize_f,
        ptr: *mut ::std::os::raw::c_void,
    ) -> mystatus_t;
}
extern "C" {
    #[doc = " The serialize function for a single node"]
    #[doc = ""]
    #[doc = " @param[in] tree        the tree to be serialized"]
    #[doc = " @param[in] node        the node that is going to be serialized"]
    #[doc = " @param[in] callback    function that will be called for all strings that have to be printed"]
    #[doc = " @param[in] ptr         user-supplied pointer"]
    #[doc = ""]
    #[doc = " @return true if successful, otherwise false"]
    pub fn myhtml_serialization_node_callback(
        node: *mut myhtml_tree_node_t,
        callback: mycore_callback_serialize_f,
        ptr: *mut ::std::os::raw::c_void,
    ) -> mystatus_t;
}
extern "C" {
    #[doc = " Get current version"]
    #[doc = ""]
    #[doc = " @return myhtml_version_t"]
    pub fn myhtml_version() -> myhtml_version_t;
}
pub type __builtin_va_list = [__va_list_tag; 1usize];
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __va_list_tag {
    pub gp_offset: ::std::os::raw::c_uint,
    pub fp_offset: ::std::os::raw::c_uint,
    pub overflow_arg_area: *mut ::std::os::raw::c_void,
    pub reg_save_area: *mut ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout___va_list_tag() {
    assert_eq!(
        ::std::mem::size_of::<__va_list_tag>(),
        24usize,
        concat!("Size of: ", stringify!(__va_list_tag))
    );
    assert_eq!(
        ::std::mem::align_of::<__va_list_tag>(),
        8usize,
        concat!("Alignment of ", stringify!(__va_list_tag))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__va_list_tag>())).gp_offset as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__va_list_tag),
            "::",
            stringify!(gp_offset)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__va_list_tag>())).fp_offset as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(__va_list_tag),
            "::",
            stringify!(fp_offset)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__va_list_tag>())).overflow_arg_area as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__va_list_tag),
            "::",
            stringify!(overflow_arg_area)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__va_list_tag>())).reg_save_area as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(__va_list_tag),
            "::",
            stringify!(reg_save_area)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __locale_data {
    pub _address: u8,
}
